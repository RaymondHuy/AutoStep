//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\AutoStepInteractionsParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AutoStep.Language.Interaction.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
internal partial class AutoStepInteractionsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FLOAT=1, INT=2, STRING=3, APP_DEFINITION=4, TRAIT_DEFINITION=5, COMPONENT_DEFINITION=6, 
		COLLECTION_DEFINITION=7, TRAITS_KEYWORD=8, NAME_KEYWORD=9, COMPONENTS_KEYWORD=10, 
		BASEDON_KEYWORD=11, STEP_DEFINE=12, LIST_SEPARATOR=13, DEF_SEPARATOR=14, 
		METHOD_OPEN=15, METHOD_CLOSE=16, NAME_REF=17, ARR_LEFT=18, ARR_RIGHT=19, 
		PLUS=20, COMPONENT_INSERT=21, FUNC_PASS_MARKER=22, CONSTANT=23, NEWLINE=24, 
		TEXT_DOC_COMMENT=25, TEXT_COMMENT=26, WS=27, DEF_GIVEN=28, DEF_WHEN=29, 
		DEF_THEN=30, DEF_ESCAPED_LCURLY=31, DEF_ESCAPED_RCURLY=32, DEF_LCURLY=33, 
		DEF_RCURLY=34, DEF_NEWLINE=35, DEF_WS=36, DEF_COLON=37, DEF_COMPONENT_INSERT=38, 
		DEF_WORD=39, DEF_COMMENT=40;
	public const int
		RULE_file = 0, RULE_entityDefinition = 1, RULE_appDefinition = 2, RULE_appItem = 3, 
		RULE_traitDefinition = 4, RULE_traitItem = 5, RULE_methodDefinition = 6, 
		RULE_methodDefArgs = 7, RULE_methodCall = 8, RULE_methodCallArgs = 9, 
		RULE_methodCallArg = 10, RULE_componentDefinition = 11, RULE_componentItem = 12, 
		RULE_stepDefinitionBody = 13, RULE_stepDefinition = 14, RULE_stepDeclaration = 15, 
		RULE_stepDeclarationBody = 16, RULE_stepDeclarationSection = 17, RULE_stepDeclarationArgument = 18, 
		RULE_stepDeclarationArgumentName = 19, RULE_stepDeclarationTypeHint = 20, 
		RULE_stepDeclarationSectionContent = 21;
	public static readonly string[] ruleNames = {
		"file", "entityDefinition", "appDefinition", "appItem", "traitDefinition", 
		"traitItem", "methodDefinition", "methodDefArgs", "methodCall", "methodCallArgs", 
		"methodCallArg", "componentDefinition", "componentItem", "stepDefinitionBody", 
		"stepDefinition", "stepDeclaration", "stepDeclarationBody", "stepDeclarationSection", 
		"stepDeclarationArgument", "stepDeclarationArgumentName", "stepDeclarationTypeHint", 
		"stepDeclarationSectionContent"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'App:'", "'Trait:'", "'Component:'", "'Collection:'", 
		"'traits:'", "'name:'", "'components:'", "'based-on:'", "'Step:'", "','", 
		null, "'('", "')'", null, "'['", "']'", "'+'", null, "'->'", null, null, 
		null, null, null, "'Given'", "'When'", "'Then'", "'\\{'", "'\\}'", "'{'", 
		"'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FLOAT", "INT", "STRING", "APP_DEFINITION", "TRAIT_DEFINITION", 
		"COMPONENT_DEFINITION", "COLLECTION_DEFINITION", "TRAITS_KEYWORD", "NAME_KEYWORD", 
		"COMPONENTS_KEYWORD", "BASEDON_KEYWORD", "STEP_DEFINE", "LIST_SEPARATOR", 
		"DEF_SEPARATOR", "METHOD_OPEN", "METHOD_CLOSE", "NAME_REF", "ARR_LEFT", 
		"ARR_RIGHT", "PLUS", "COMPONENT_INSERT", "FUNC_PASS_MARKER", "CONSTANT", 
		"NEWLINE", "TEXT_DOC_COMMENT", "TEXT_COMMENT", "WS", "DEF_GIVEN", "DEF_WHEN", 
		"DEF_THEN", "DEF_ESCAPED_LCURLY", "DEF_ESCAPED_RCURLY", "DEF_LCURLY", 
		"DEF_RCURLY", "DEF_NEWLINE", "DEF_WS", "DEF_COLON", "DEF_COMPONENT_INSERT", 
		"DEF_WORD", "DEF_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AutoStepInteractionsParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AutoStepInteractionsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AutoStepInteractionsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AutoStepInteractionsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class FileContext : ParserRuleContext {
		public EntityDefinitionContext[] entityDefinition() {
			return GetRuleContexts<EntityDefinitionContext>();
		}
		public EntityDefinitionContext entityDefinition(int i) {
			return GetRuleContext<EntityDefinitionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << APP_DEFINITION) | (1L << TRAIT_DEFINITION) | (1L << COMPONENT_DEFINITION))) != 0)) {
				{
				{
				State = 44; entityDefinition();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class EntityDefinitionContext : ParserRuleContext {
		public TraitDefinitionContext traitDefinition() {
			return GetRuleContext<TraitDefinitionContext>(0);
		}
		public ComponentDefinitionContext componentDefinition() {
			return GetRuleContext<ComponentDefinitionContext>(0);
		}
		public AppDefinitionContext appDefinition() {
			return GetRuleContext<AppDefinitionContext>(0);
		}
		public EntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterEntityDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitEntityDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDefinitionContext entityDefinition() {
		EntityDefinitionContext _localctx = new EntityDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_entityDefinition);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRAIT_DEFINITION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; traitDefinition();
				}
				break;
			case COMPONENT_DEFINITION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; componentDefinition();
				}
				break;
			case APP_DEFINITION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; appDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AppDefinitionContext : ParserRuleContext {
		public ITerminalNode APP_DEFINITION() { return GetToken(AutoStepInteractionsParser.APP_DEFINITION, 0); }
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public AppItemContext[] appItem() {
			return GetRuleContexts<AppItemContext>();
		}
		public AppItemContext appItem(int i) {
			return GetRuleContext<AppItemContext>(i);
		}
		public AppDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterAppDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitAppDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppDefinitionContext appDefinition() {
		AppDefinitionContext _localctx = new AppDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_appDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(APP_DEFINITION);
			State = 56; Match(NAME_REF);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME_KEYWORD) | (1L << COMPONENTS_KEYWORD) | (1L << STEP_DEFINE) | (1L << NAME_REF))) != 0)) {
				{
				{
				State = 57; appItem();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AppItemContext : ParserRuleContext {
		public AppItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appItem; } }
	 
		public AppItemContext() { }
		public virtual void CopyFrom(AppItemContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class AppTraitsContext : AppItemContext {
		public ITerminalNode COMPONENTS_KEYWORD() { return GetToken(AutoStepInteractionsParser.COMPONENTS_KEYWORD, 0); }
		public ITerminalNode[] NAME_REF() { return GetTokens(AutoStepInteractionsParser.NAME_REF); }
		public ITerminalNode NAME_REF(int i) {
			return GetToken(AutoStepInteractionsParser.NAME_REF, i);
		}
		public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(AutoStepInteractionsParser.LIST_SEPARATOR); }
		public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(AutoStepInteractionsParser.LIST_SEPARATOR, i);
		}
		public AppTraitsContext(AppItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterAppTraits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitAppTraits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppTraits(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class AppStepContext : AppItemContext {
		public StepDefinitionBodyContext stepDefinitionBody() {
			return GetRuleContext<StepDefinitionBodyContext>(0);
		}
		public AppStepContext(AppItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterAppStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitAppStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppStep(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class AppMethodContext : AppItemContext {
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public AppMethodContext(AppItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterAppMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitAppMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class AppNameContext : AppItemContext {
		public ITerminalNode NAME_KEYWORD() { return GetToken(AutoStepInteractionsParser.NAME_KEYWORD, 0); }
		public ITerminalNode STRING() { return GetToken(AutoStepInteractionsParser.STRING, 0); }
		public AppNameContext(AppItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterAppName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitAppName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppItemContext appItem() {
		AppItemContext _localctx = new AppItemContext(Context, State);
		EnterRule(_localctx, 6, RULE_appItem);
		int _la;
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_KEYWORD:
				_localctx = new AppNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; Match(NAME_KEYWORD);
				State = 64; Match(STRING);
				}
				break;
			case COMPONENTS_KEYWORD:
				_localctx = new AppTraitsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; Match(COMPONENTS_KEYWORD);
				State = 66; Match(NAME_REF);
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LIST_SEPARATOR) {
					{
					{
					State = 67; Match(LIST_SEPARATOR);
					State = 68; Match(NAME_REF);
					}
					}
					State = 73;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case NAME_REF:
				_localctx = new AppMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 74; methodDefinition();
				}
				break;
			case STEP_DEFINE:
				_localctx = new AppStepContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 75; stepDefinitionBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TraitDefinitionContext : ParserRuleContext {
		public ITerminalNode TRAIT_DEFINITION() { return GetToken(AutoStepInteractionsParser.TRAIT_DEFINITION, 0); }
		public ITerminalNode[] NAME_REF() { return GetTokens(AutoStepInteractionsParser.NAME_REF); }
		public ITerminalNode NAME_REF(int i) {
			return GetToken(AutoStepInteractionsParser.NAME_REF, i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(AutoStepInteractionsParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(AutoStepInteractionsParser.PLUS, i);
		}
		public TraitItemContext[] traitItem() {
			return GetRuleContexts<TraitItemContext>();
		}
		public TraitItemContext traitItem(int i) {
			return GetRuleContext<TraitItemContext>(i);
		}
		public TraitDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterTraitDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitTraitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitDefinitionContext traitDefinition() {
		TraitDefinitionContext _localctx = new TraitDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_traitDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(TRAIT_DEFINITION);
			State = 79; Match(NAME_REF);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS) {
				{
				{
				State = 80; Match(PLUS);
				State = 81; Match(NAME_REF);
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME_KEYWORD) | (1L << STEP_DEFINE) | (1L << NAME_REF))) != 0)) {
				{
				{
				State = 87; traitItem();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TraitItemContext : ParserRuleContext {
		public TraitItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitItem; } }
	 
		public TraitItemContext() { }
		public virtual void CopyFrom(TraitItemContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class TraitNameContext : TraitItemContext {
		public ITerminalNode NAME_KEYWORD() { return GetToken(AutoStepInteractionsParser.NAME_KEYWORD, 0); }
		public ITerminalNode STRING() { return GetToken(AutoStepInteractionsParser.STRING, 0); }
		public TraitNameContext(TraitItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterTraitName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitTraitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitName(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class TraitStepContext : TraitItemContext {
		public StepDefinitionBodyContext stepDefinitionBody() {
			return GetRuleContext<StepDefinitionBodyContext>(0);
		}
		public TraitStepContext(TraitItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterTraitStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitTraitStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitStep(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class TraitMethodContext : TraitItemContext {
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public TraitMethodContext(TraitItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterTraitMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitTraitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitItemContext traitItem() {
		TraitItemContext _localctx = new TraitItemContext(Context, State);
		EnterRule(_localctx, 10, RULE_traitItem);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_KEYWORD:
				_localctx = new TraitNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; Match(NAME_KEYWORD);
				State = 94; Match(STRING);
				}
				break;
			case NAME_REF:
				_localctx = new TraitMethodContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; methodDefinition();
				}
				break;
			case STEP_DEFINE:
				_localctx = new TraitStepContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; stepDefinitionBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodDefinitionContext : ParserRuleContext {
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public ITerminalNode METHOD_OPEN() { return GetToken(AutoStepInteractionsParser.METHOD_OPEN, 0); }
		public ITerminalNode METHOD_CLOSE() { return GetToken(AutoStepInteractionsParser.METHOD_CLOSE, 0); }
		public ITerminalNode DEF_SEPARATOR() { return GetToken(AutoStepInteractionsParser.DEF_SEPARATOR, 0); }
		public MethodCallContext[] methodCall() {
			return GetRuleContexts<MethodCallContext>();
		}
		public MethodCallContext methodCall(int i) {
			return GetRuleContext<MethodCallContext>(i);
		}
		public MethodDefArgsContext methodDefArgs() {
			return GetRuleContext<MethodDefArgsContext>(0);
		}
		public ITerminalNode[] FUNC_PASS_MARKER() { return GetTokens(AutoStepInteractionsParser.FUNC_PASS_MARKER); }
		public ITerminalNode FUNC_PASS_MARKER(int i) {
			return GetToken(AutoStepInteractionsParser.FUNC_PASS_MARKER, i);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_methodDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(NAME_REF);
			State = 100; Match(METHOD_OPEN);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME_REF) {
				{
				State = 101; methodDefArgs();
				}
			}

			State = 104; Match(METHOD_CLOSE);
			State = 105; Match(DEF_SEPARATOR);
			State = 106; methodCall();
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUNC_PASS_MARKER) {
				{
				{
				State = 107; Match(FUNC_PASS_MARKER);
				State = 108; methodCall();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodDefArgsContext : ParserRuleContext {
		public ITerminalNode[] NAME_REF() { return GetTokens(AutoStepInteractionsParser.NAME_REF); }
		public ITerminalNode NAME_REF(int i) {
			return GetToken(AutoStepInteractionsParser.NAME_REF, i);
		}
		public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(AutoStepInteractionsParser.LIST_SEPARATOR); }
		public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(AutoStepInteractionsParser.LIST_SEPARATOR, i);
		}
		public MethodDefArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodDefArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodDefArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefArgsContext methodDefArgs() {
		MethodDefArgsContext _localctx = new MethodDefArgsContext(Context, State);
		EnterRule(_localctx, 14, RULE_methodDefArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(NAME_REF);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME_REF) {
				{
				{
				State = 115; Match(NAME_REF);
				State = 116; Match(LIST_SEPARATOR);
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodCallContext : ParserRuleContext {
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public ITerminalNode METHOD_OPEN() { return GetToken(AutoStepInteractionsParser.METHOD_OPEN, 0); }
		public ITerminalNode METHOD_CLOSE() { return GetToken(AutoStepInteractionsParser.METHOD_CLOSE, 0); }
		public MethodCallArgsContext methodCallArgs() {
			return GetRuleContext<MethodCallArgsContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(NAME_REF);
			State = 123; Match(METHOD_OPEN);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FLOAT) | (1L << INT) | (1L << STRING) | (1L << NAME_REF) | (1L << CONSTANT))) != 0)) {
				{
				State = 124; methodCallArgs();
				}
			}

			State = 127; Match(METHOD_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodCallArgsContext : ParserRuleContext {
		public MethodCallArgContext[] methodCallArg() {
			return GetRuleContexts<MethodCallArgContext>();
		}
		public MethodCallArgContext methodCallArg(int i) {
			return GetRuleContext<MethodCallArgContext>(i);
		}
		public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(AutoStepInteractionsParser.LIST_SEPARATOR); }
		public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(AutoStepInteractionsParser.LIST_SEPARATOR, i);
		}
		public MethodCallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterMethodCallArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitMethodCallArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgsContext methodCallArgs() {
		MethodCallArgsContext _localctx = new MethodCallArgsContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodCallArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; methodCallArg();
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LIST_SEPARATOR) {
				{
				{
				State = 130; Match(LIST_SEPARATOR);
				State = 131; methodCallArg();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MethodCallArgContext : ParserRuleContext {
		public MethodCallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArg; } }
	 
		public MethodCallArgContext() { }
		public virtual void CopyFrom(MethodCallArgContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class StringArgContext : MethodCallArgContext {
		public ITerminalNode STRING() { return GetToken(AutoStepInteractionsParser.STRING, 0); }
		public StringArgContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStringArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStringArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringArg(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class VariableArrRefContext : MethodCallArgContext {
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public ITerminalNode ARR_LEFT() { return GetToken(AutoStepInteractionsParser.ARR_LEFT, 0); }
		public ITerminalNode STRING() { return GetToken(AutoStepInteractionsParser.STRING, 0); }
		public ITerminalNode ARR_RIGHT() { return GetToken(AutoStepInteractionsParser.ARR_RIGHT, 0); }
		public VariableArrRefContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterVariableArrRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitVariableArrRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableArrRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class FloatArgContext : MethodCallArgContext {
		public ITerminalNode FLOAT() { return GetToken(AutoStepInteractionsParser.FLOAT, 0); }
		public FloatArgContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterFloatArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitFloatArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatArg(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class IntArgContext : MethodCallArgContext {
		public ITerminalNode INT() { return GetToken(AutoStepInteractionsParser.INT, 0); }
		public IntArgContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterIntArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitIntArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArg(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ConstantRefContext : MethodCallArgContext {
		public ITerminalNode CONSTANT() { return GetToken(AutoStepInteractionsParser.CONSTANT, 0); }
		public ConstantRefContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterConstantRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitConstantRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class VariableRefContext : MethodCallArgContext {
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public VariableRefContext(MethodCallArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterVariableRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitVariableRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgContext methodCallArg() {
		MethodCallArgContext _localctx = new MethodCallArgContext(Context, State);
		EnterRule(_localctx, 20, RULE_methodCallArg);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new StringArgContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 137; Match(STRING);
				}
				break;
			case 2:
				_localctx = new VariableRefContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 138; Match(NAME_REF);
				}
				break;
			case 3:
				_localctx = new VariableArrRefContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 139; Match(NAME_REF);
				State = 140; Match(ARR_LEFT);
				State = 141; Match(STRING);
				State = 142; Match(ARR_RIGHT);
				}
				break;
			case 4:
				_localctx = new ConstantRefContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 143; Match(CONSTANT);
				}
				break;
			case 5:
				_localctx = new IntArgContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 144; Match(INT);
				}
				break;
			case 6:
				_localctx = new FloatArgContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 145; Match(FLOAT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ComponentDefinitionContext : ParserRuleContext {
		public ITerminalNode COMPONENT_DEFINITION() { return GetToken(AutoStepInteractionsParser.COMPONENT_DEFINITION, 0); }
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public ComponentItemContext[] componentItem() {
			return GetRuleContexts<ComponentItemContext>();
		}
		public ComponentItemContext componentItem(int i) {
			return GetRuleContext<ComponentItemContext>(i);
		}
		public ComponentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDefinitionContext componentDefinition() {
		ComponentDefinitionContext _localctx = new ComponentDefinitionContext(Context, State);
		EnterRule(_localctx, 22, RULE_componentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(COMPONENT_DEFINITION);
			State = 149; Match(NAME_REF);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRAITS_KEYWORD) | (1L << NAME_KEYWORD) | (1L << BASEDON_KEYWORD) | (1L << STEP_DEFINE) | (1L << NAME_REF))) != 0)) {
				{
				{
				State = 150; componentItem();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ComponentItemContext : ParserRuleContext {
		public ComponentItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentItem; } }
	 
		public ComponentItemContext() { }
		public virtual void CopyFrom(ComponentItemContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class ComponentMethodContext : ComponentItemContext {
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public ComponentMethodContext(ComponentItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ComponentNameContext : ComponentItemContext {
		public ITerminalNode NAME_KEYWORD() { return GetToken(AutoStepInteractionsParser.NAME_KEYWORD, 0); }
		public ITerminalNode STRING() { return GetToken(AutoStepInteractionsParser.STRING, 0); }
		public ComponentNameContext(ComponentItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentName(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ComponentStepContext : ComponentItemContext {
		public StepDefinitionBodyContext stepDefinitionBody() {
			return GetRuleContext<StepDefinitionBodyContext>(0);
		}
		public ComponentStepContext(ComponentItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentStep(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ComponentBasedOnContext : ComponentItemContext {
		public ITerminalNode BASEDON_KEYWORD() { return GetToken(AutoStepInteractionsParser.BASEDON_KEYWORD, 0); }
		public ITerminalNode NAME_REF() { return GetToken(AutoStepInteractionsParser.NAME_REF, 0); }
		public ComponentBasedOnContext(ComponentItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentBasedOn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentBasedOn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentBasedOn(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ComponentTraitsContext : ComponentItemContext {
		public ITerminalNode TRAITS_KEYWORD() { return GetToken(AutoStepInteractionsParser.TRAITS_KEYWORD, 0); }
		public ITerminalNode[] NAME_REF() { return GetTokens(AutoStepInteractionsParser.NAME_REF); }
		public ITerminalNode NAME_REF(int i) {
			return GetToken(AutoStepInteractionsParser.NAME_REF, i);
		}
		public ITerminalNode[] LIST_SEPARATOR() { return GetTokens(AutoStepInteractionsParser.LIST_SEPARATOR); }
		public ITerminalNode LIST_SEPARATOR(int i) {
			return GetToken(AutoStepInteractionsParser.LIST_SEPARATOR, i);
		}
		public ComponentTraitsContext(ComponentItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterComponentTraits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitComponentTraits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentTraits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentItemContext componentItem() {
		ComponentItemContext _localctx = new ComponentItemContext(Context, State);
		EnterRule(_localctx, 24, RULE_componentItem);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_KEYWORD:
				_localctx = new ComponentNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 156; Match(NAME_KEYWORD);
				State = 157; Match(STRING);
				}
				break;
			case BASEDON_KEYWORD:
				_localctx = new ComponentBasedOnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; Match(BASEDON_KEYWORD);
				State = 159; Match(NAME_REF);
				}
				break;
			case TRAITS_KEYWORD:
				_localctx = new ComponentTraitsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 160; Match(TRAITS_KEYWORD);
				State = 161; Match(NAME_REF);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LIST_SEPARATOR) {
					{
					{
					State = 162; Match(LIST_SEPARATOR);
					State = 163; Match(NAME_REF);
					}
					}
					State = 168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case NAME_REF:
				_localctx = new ComponentMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 169; methodDefinition();
				}
				break;
			case STEP_DEFINE:
				_localctx = new ComponentStepContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 170; stepDefinitionBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDefinitionBodyContext : ParserRuleContext {
		public StepDefinitionContext stepDefinition() {
			return GetRuleContext<StepDefinitionContext>(0);
		}
		public MethodCallContext[] methodCall() {
			return GetRuleContexts<MethodCallContext>();
		}
		public MethodCallContext methodCall(int i) {
			return GetRuleContext<MethodCallContext>(i);
		}
		public ITerminalNode[] FUNC_PASS_MARKER() { return GetTokens(AutoStepInteractionsParser.FUNC_PASS_MARKER); }
		public ITerminalNode FUNC_PASS_MARKER(int i) {
			return GetToken(AutoStepInteractionsParser.FUNC_PASS_MARKER, i);
		}
		public StepDefinitionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDefinitionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDefinitionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDefinitionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDefinitionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDefinitionBodyContext stepDefinitionBody() {
		StepDefinitionBodyContext _localctx = new StepDefinitionBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_stepDefinitionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; stepDefinition();
			State = 174; methodCall();
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUNC_PASS_MARKER) {
				{
				{
				State = 175; Match(FUNC_PASS_MARKER);
				State = 176; methodCall();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDefinitionContext : ParserRuleContext {
		public ITerminalNode STEP_DEFINE() { return GetToken(AutoStepInteractionsParser.STEP_DEFINE, 0); }
		public StepDeclarationContext stepDeclaration() {
			return GetRuleContext<StepDeclarationContext>(0);
		}
		public ITerminalNode DEF_NEWLINE() { return GetToken(AutoStepInteractionsParser.DEF_NEWLINE, 0); }
		public ITerminalNode DEF_WS() { return GetToken(AutoStepInteractionsParser.DEF_WS, 0); }
		public StepDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDefinitionContext stepDefinition() {
		StepDefinitionContext _localctx = new StepDefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_stepDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(STEP_DEFINE);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEF_WS) {
				{
				State = 183; Match(DEF_WS);
				}
			}

			State = 186; stepDeclaration();
			State = 187; Match(DEF_NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationContext : ParserRuleContext {
		public StepDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclaration; } }
	 
		public StepDeclarationContext() { }
		public virtual void CopyFrom(StepDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclareGivenContext : StepDeclarationContext {
		public ITerminalNode DEF_GIVEN() { return GetToken(AutoStepInteractionsParser.DEF_GIVEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public ITerminalNode DEF_WS() { return GetToken(AutoStepInteractionsParser.DEF_WS, 0); }
		public DeclareGivenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclareGiven(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclareGiven(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareGiven(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclareWhenContext : StepDeclarationContext {
		public ITerminalNode DEF_WHEN() { return GetToken(AutoStepInteractionsParser.DEF_WHEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public ITerminalNode DEF_WS() { return GetToken(AutoStepInteractionsParser.DEF_WS, 0); }
		public DeclareWhenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclareWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclareWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareWhen(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclareThenContext : StepDeclarationContext {
		public ITerminalNode DEF_THEN() { return GetToken(AutoStepInteractionsParser.DEF_THEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public ITerminalNode DEF_WS() { return GetToken(AutoStepInteractionsParser.DEF_WS, 0); }
		public DeclareThenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclareThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclareThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationContext stepDeclaration() {
		StepDeclarationContext _localctx = new StepDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_stepDeclaration);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_GIVEN:
				_localctx = new DeclareGivenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; Match(DEF_GIVEN);
				State = 191;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 190; Match(DEF_WS);
					}
					break;
				}
				State = 193; stepDeclarationBody();
				}
				break;
			case DEF_WHEN:
				_localctx = new DeclareWhenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 194; Match(DEF_WHEN);
				State = 196;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 195; Match(DEF_WS);
					}
					break;
				}
				State = 198; stepDeclarationBody();
				}
				break;
			case DEF_THEN:
				_localctx = new DeclareThenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 199; Match(DEF_THEN);
				State = 201;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 200; Match(DEF_WS);
					}
					break;
				}
				State = 203; stepDeclarationBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationBodyContext : ParserRuleContext {
		public StepDeclarationSectionContext[] stepDeclarationSection() {
			return GetRuleContexts<StepDeclarationSectionContext>();
		}
		public StepDeclarationSectionContext stepDeclarationSection(int i) {
			return GetRuleContext<StepDeclarationSectionContext>(i);
		}
		public StepDeclarationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationBodyContext stepDeclarationBody() {
		StepDeclarationBodyContext _localctx = new StepDeclarationBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_stepDeclarationBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 206; stepDeclarationSection();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEF_GIVEN) | (1L << DEF_WHEN) | (1L << DEF_THEN) | (1L << DEF_ESCAPED_LCURLY) | (1L << DEF_ESCAPED_RCURLY) | (1L << DEF_LCURLY) | (1L << DEF_WS) | (1L << DEF_COLON) | (1L << DEF_COMPONENT_INSERT) | (1L << DEF_WORD))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationSectionContext : ParserRuleContext {
		public StepDeclarationSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationSection; } }
	 
		public StepDeclarationSectionContext() { }
		public virtual void CopyFrom(StepDeclarationSectionContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclarationSectionContext : StepDeclarationSectionContext {
		public StepDeclarationSectionContentContext stepDeclarationSectionContent() {
			return GetRuleContext<StepDeclarationSectionContentContext>(0);
		}
		public DeclarationSectionContext(StepDeclarationSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationArgumentContext : StepDeclarationSectionContext {
		public ITerminalNode DEF_LCURLY() { return GetToken(AutoStepInteractionsParser.DEF_LCURLY, 0); }
		public StepDeclarationArgumentContext stepDeclarationArgument() {
			return GetRuleContext<StepDeclarationArgumentContext>(0);
		}
		public ITerminalNode DEF_RCURLY() { return GetToken(AutoStepInteractionsParser.DEF_RCURLY, 0); }
		public DeclarationArgumentContext(StepDeclarationSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationSectionContext stepDeclarationSection() {
		StepDeclarationSectionContext _localctx = new StepDeclarationSectionContext(Context, State);
		EnterRule(_localctx, 34, RULE_stepDeclarationSection);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_LCURLY:
				_localctx = new DeclarationArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; Match(DEF_LCURLY);
				State = 212; stepDeclarationArgument();
				State = 213; Match(DEF_RCURLY);
				}
				break;
			case DEF_GIVEN:
			case DEF_WHEN:
			case DEF_THEN:
			case DEF_ESCAPED_LCURLY:
			case DEF_ESCAPED_RCURLY:
			case DEF_WS:
			case DEF_COLON:
			case DEF_COMPONENT_INSERT:
			case DEF_WORD:
				_localctx = new DeclarationSectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; stepDeclarationSectionContent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationArgumentContext : ParserRuleContext {
		public StepDeclarationArgumentNameContext stepDeclarationArgumentName() {
			return GetRuleContext<StepDeclarationArgumentNameContext>(0);
		}
		public ITerminalNode DEF_COLON() { return GetToken(AutoStepInteractionsParser.DEF_COLON, 0); }
		public StepDeclarationTypeHintContext stepDeclarationTypeHint() {
			return GetRuleContext<StepDeclarationTypeHintContext>(0);
		}
		public StepDeclarationArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationArgumentContext stepDeclarationArgument() {
		StepDeclarationArgumentContext _localctx = new StepDeclarationArgumentContext(Context, State);
		EnterRule(_localctx, 36, RULE_stepDeclarationArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; stepDeclarationArgumentName();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEF_COLON) {
				{
				State = 219; Match(DEF_COLON);
				State = 220; stepDeclarationTypeHint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationArgumentNameContext : ParserRuleContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepInteractionsParser.DEF_WORD, 0); }
		public StepDeclarationArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationArgumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationArgumentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationArgumentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationArgumentNameContext stepDeclarationArgumentName() {
		StepDeclarationArgumentNameContext _localctx = new StepDeclarationArgumentNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_stepDeclarationArgumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(DEF_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationTypeHintContext : ParserRuleContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepInteractionsParser.DEF_WORD, 0); }
		public StepDeclarationTypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationTypeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationTypeHintContext stepDeclarationTypeHint() {
		StepDeclarationTypeHintContext _localctx = new StepDeclarationTypeHintContext(Context, State);
		EnterRule(_localctx, 40, RULE_stepDeclarationTypeHint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(DEF_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationSectionContentContext : ParserRuleContext {
		public StepDeclarationSectionContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationSectionContent; } }
	 
		public StepDeclarationSectionContentContext() { }
		public virtual void CopyFrom(StepDeclarationSectionContentContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclarationWordContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepInteractionsParser.DEF_WORD, 0); }
		public ITerminalNode DEF_GIVEN() { return GetToken(AutoStepInteractionsParser.DEF_GIVEN, 0); }
		public ITerminalNode DEF_WHEN() { return GetToken(AutoStepInteractionsParser.DEF_WHEN, 0); }
		public ITerminalNode DEF_THEN() { return GetToken(AutoStepInteractionsParser.DEF_THEN, 0); }
		public DeclarationWordContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationWord(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationComponentInsertContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_COMPONENT_INSERT() { return GetToken(AutoStepInteractionsParser.DEF_COMPONENT_INSERT, 0); }
		public DeclarationComponentInsertContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationComponentInsert(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationComponentInsert(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationComponentInsert(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationWsContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_WS() { return GetToken(AutoStepInteractionsParser.DEF_WS, 0); }
		public DeclarationWsContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationWs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationWs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationWs(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationColonContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_COLON() { return GetToken(AutoStepInteractionsParser.DEF_COLON, 0); }
		public DeclarationColonContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationColon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationColon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationColon(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationEscapedContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_ESCAPED_LCURLY() { return GetToken(AutoStepInteractionsParser.DEF_ESCAPED_LCURLY, 0); }
		public ITerminalNode DEF_ESCAPED_RCURLY() { return GetToken(AutoStepInteractionsParser.DEF_ESCAPED_RCURLY, 0); }
		public DeclarationEscapedContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.EnterDeclarationEscaped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepInteractionsParserListener typedListener = listener as IAutoStepInteractionsParserListener;
			if (typedListener != null) typedListener.ExitDeclarationEscaped(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepInteractionsParserVisitor<TResult> typedVisitor = visitor as IAutoStepInteractionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationEscaped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationSectionContentContext stepDeclarationSectionContent() {
		StepDeclarationSectionContentContext _localctx = new StepDeclarationSectionContentContext(Context, State);
		EnterRule(_localctx, 42, RULE_stepDeclarationSectionContent);
		int _la;
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_GIVEN:
			case DEF_WHEN:
			case DEF_THEN:
			case DEF_WORD:
				_localctx = new DeclarationWordContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEF_GIVEN) | (1L << DEF_WHEN) | (1L << DEF_THEN) | (1L << DEF_WORD))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DEF_COMPONENT_INSERT:
				_localctx = new DeclarationComponentInsertContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(DEF_COMPONENT_INSERT);
				}
				break;
			case DEF_ESCAPED_LCURLY:
			case DEF_ESCAPED_RCURLY:
				_localctx = new DeclarationEscapedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 229;
				_la = TokenStream.LA(1);
				if ( !(_la==DEF_ESCAPED_LCURLY || _la==DEF_ESCAPED_RCURLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DEF_WS:
				_localctx = new DeclarationWsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 230; Match(DEF_WS);
				}
				break;
			case DEF_COLON:
				_localctx = new DeclarationColonContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 231; Match(DEF_COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\xED', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\a', 
		'\x2', '\x30', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x33', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x38', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '=', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '@', '\v', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'H', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'K', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'O', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'U', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', 'X', '\v', '\x6', '\x3', '\x6', '\a', '\x6', '[', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '^', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x64', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'i', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'p', '\n', '\b', '\f', '\b', '\xE', '\b', 's', '\v', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', 'x', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '{', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x80', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', '\x87', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\x8A', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\x95', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\x9A', '\n', '\r', '\f', '\r', '\xE', '\r', '\x9D', '\v', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xA7', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xAA', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xAE', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\a', '\xF', '\xB4', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\xB7', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xBB', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xC2', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xC7', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xCC', '\n', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\xCF', '\n', '\x11', '\x3', '\x12', '\x6', 
		'\x12', '\xD2', '\n', '\x12', '\r', '\x12', '\xE', '\x12', '\xD3', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\xDB', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xE0', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\xEB', '\n', '\x17', '\x3', '\x17', 
		'\x2', '\x2', '\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '\x2', '\x4', '\x4', '\x2', '\x1E', ' ', ')', ')', 
		'\x3', '\x2', '!', '\"', '\x2', '\x100', '\x2', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x37', '\x3', '\x2', '\x2', '\x2', '\x6', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'N', '\x3', '\x2', '\x2', '\x2', '\n', 
		'P', '\x3', '\x2', '\x2', '\x2', '\f', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x65', '\x3', '\x2', '\x2', '\x2', '\x10', 't', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '|', '\x3', '\x2', '\x2', '\x2', '\x14', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x96', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xCE', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '$', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xDC', '\x3', '\x2', '\x2', '\x2', '(', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xE3', '\x3', '\x2', '\x2', '\x2', ',', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x30', '\x5', '\x4', '\x3', '\x2', '/', '.', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x3', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x38', '\x5', '\n', '\x6', '\x2', 
		'\x35', '\x38', '\x5', '\x18', '\r', '\x2', '\x36', '\x38', '\x5', '\x6', 
		'\x4', '\x2', '\x37', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x5', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\x6', '\x2', 
		'\x2', ':', '>', '\a', '\x13', '\x2', '\x2', ';', '=', '\x5', '\b', '\x5', 
		'\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', 
		'\x2', '?', '\a', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\a', '\v', '\x2', '\x2', '\x42', 'O', '\a', 
		'\x5', '\x2', '\x2', '\x43', '\x44', '\a', '\f', '\x2', '\x2', '\x44', 
		'I', '\a', '\x13', '\x2', '\x2', '\x45', '\x46', '\a', '\xF', '\x2', '\x2', 
		'\x46', 'H', '\a', '\x13', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x5', '\xE', '\b', 
		'\x2', 'M', 'O', '\x5', '\x1C', '\xF', '\x2', 'N', '\x41', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x43', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\a', '\x2', '\x2', 'Q', 'V', 
		'\a', '\x13', '\x2', '\x2', 'R', 'S', '\a', '\x16', '\x2', '\x2', 'S', 
		'U', '\a', '\x13', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 
		'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\\', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\x5', '\f', '\a', 
		'\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', 
		'\x2', '\x2', ']', '\v', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\a', '\v', '\x2', '\x2', '`', '\x64', 
		'\a', '\x5', '\x2', '\x2', '\x61', '\x64', '\x5', '\xE', '\b', '\x2', 
		'\x62', '\x64', '\x5', '\x1C', '\xF', '\x2', '\x63', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\a', '\x13', '\x2', '\x2', '\x66', 'h', '\a', '\x11', 
		'\x2', '\x2', 'g', 'i', '\x5', '\x10', '\t', '\x2', 'h', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\a', '\x12', '\x2', '\x2', 'k', 'l', '\a', '\x10', 
		'\x2', '\x2', 'l', 'q', '\x5', '\x12', '\n', '\x2', 'm', 'n', '\a', '\x18', 
		'\x2', '\x2', 'n', 'p', '\x5', '\x12', '\n', '\x2', 'o', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'y', '\a', 
		'\x13', '\x2', '\x2', 'u', 'v', '\a', '\x13', '\x2', '\x2', 'v', 'x', 
		'\a', '\xF', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'x', 
		'{', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\x13', '\x2', 
		'\x2', '}', '\x7F', '\a', '\x11', '\x2', '\x2', '~', '\x80', '\x5', '\x14', 
		'\v', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\a', '\x12', '\x2', '\x2', '\x82', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x88', '\x5', '\x16', '\f', '\x2', '\x84', '\x85', 
		'\a', '\xF', '\x2', '\x2', '\x85', '\x87', '\x5', '\x16', '\f', '\x2', 
		'\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x95', '\a', '\x5', 
		'\x2', '\x2', '\x8C', '\x95', '\a', '\x13', '\x2', '\x2', '\x8D', '\x8E', 
		'\a', '\x13', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x14', '\x2', '\x2', 
		'\x8F', '\x90', '\a', '\x5', '\x2', '\x2', '\x90', '\x95', '\a', '\x15', 
		'\x2', '\x2', '\x91', '\x95', '\a', '\x19', '\x2', '\x2', '\x92', '\x95', 
		'\a', '\x4', '\x2', '\x2', '\x93', '\x95', '\a', '\x3', '\x2', '\x2', 
		'\x94', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x94', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x94', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x97', '\a', '\b', '\x2', '\x2', '\x97', '\x9B', 
		'\a', '\x13', '\x2', '\x2', '\x98', '\x9A', '\x5', '\x1A', '\xE', '\x2', 
		'\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '\v', 
		'\x2', '\x2', '\x9F', '\xAE', '\a', '\x5', '\x2', '\x2', '\xA0', '\xA1', 
		'\a', '\r', '\x2', '\x2', '\xA1', '\xAE', '\a', '\x13', '\x2', '\x2', 
		'\xA2', '\xA3', '\a', '\n', '\x2', '\x2', '\xA3', '\xA8', '\a', '\x13', 
		'\x2', '\x2', '\xA4', '\xA5', '\a', '\xF', '\x2', '\x2', '\xA5', '\xA7', 
		'\a', '\x13', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xAE', '\x5', '\xE', '\b', '\x2', '\xAC', '\xAE', '\x5', '\x1C', 
		'\xF', '\x2', '\xAD', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', 
		'\x5', '\x1E', '\x10', '\x2', '\xB0', '\xB5', '\x5', '\x12', '\n', '\x2', 
		'\xB1', '\xB2', '\a', '\x18', '\x2', '\x2', '\xB2', '\xB4', '\x5', '\x12', 
		'\n', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBA', 
		'\a', '\xE', '\x2', '\x2', '\xB9', '\xBB', '\a', '&', '\x2', '\x2', '\xBA', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x5', 
		' ', '\x11', '\x2', '\xBD', '\xBE', '\a', '%', '\x2', '\x2', '\xBE', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xC1', '\a', '\x1E', '\x2', '\x2', 
		'\xC0', '\xC2', '\a', '&', '\x2', '\x2', '\xC1', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xCF', '\x5', '\"', '\x12', '\x2', 
		'\xC4', '\xC6', '\a', '\x1F', '\x2', '\x2', '\xC5', '\xC7', '\a', '&', 
		'\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xCF', '\x5', '\"', '\x12', '\x2', '\xC9', '\xCB', '\a', ' ', 
		'\x2', '\x2', '\xCA', '\xCC', '\a', '&', '\x2', '\x2', '\xCB', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCF', '\x5', '\"', 
		'\x12', '\x2', '\xCE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '!', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', '\x5', '$', '\x13', 
		'\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD6', '\a', '#', '\x2', '\x2', '\xD6', '\xD7', '\x5', 
		'&', '\x14', '\x2', '\xD7', '\xD8', '\a', '$', '\x2', '\x2', '\xD8', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xDB', '\x5', ',', '\x17', '\x2', 
		'\xDA', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '%', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', 
		'\x5', '(', '\x15', '\x2', '\xDD', '\xDE', '\a', '\'', '\x2', '\x2', '\xDE', 
		'\xE0', '\x5', '*', '\x16', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', ')', '\x2', '\x2', '\xE2', 
		')', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\a', ')', '\x2', '\x2', 
		'\xE4', '+', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xEB', '\t', '\x2', 
		'\x2', '\x2', '\xE6', '\xEB', '\a', '(', '\x2', '\x2', '\xE7', '\xEB', 
		'\t', '\x3', '\x2', '\x2', '\xE8', '\xEB', '\a', '&', '\x2', '\x2', '\xE9', 
		'\xEB', '\a', '\'', '\x2', '\x2', '\xEA', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x31', '\x37', '>', 'I', 'N', 'V', '\\', '\x63', 'h', 
		'q', 'y', '\x7F', '\x88', '\x94', '\x9B', '\xA8', '\xAD', '\xB5', '\xBA', 
		'\xC1', '\xC6', '\xCB', '\xCE', '\xD3', '\xDA', '\xDF', '\xEA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AutoStep.Language.Interaction.Parser

