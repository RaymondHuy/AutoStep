//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\AutoStepParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AutoStep.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class AutoStepParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FEATURE=1, SCENARIO=2, BACKGROUND=3, TAG=4, OPTION=5, NEWLINE=6, WORD=7, 
		WS=8, TEXT_COMMENT=9, GIVEN=10, WHEN=11, THEN=12, AND=13;
	public const int
		RULE_file = 0, RULE_featureBlock = 1, RULE_annotations = 2, RULE_annotation = 3, 
		RULE_featureDefinition = 4, RULE_featureTitle = 5, RULE_featureBody = 6, 
		RULE_backgroundBlock = 7, RULE_backgroundBody = 8, RULE_scenarioBlock = 9, 
		RULE_scenarioDefinition = 10, RULE_scenarioBody = 11, RULE_statement = 12, 
		RULE_statementBody = 13, RULE_text = 14, RULE_line = 15, RULE_description = 16;
	public static readonly string[] ruleNames = {
		"file", "featureBlock", "annotations", "annotation", "featureDefinition", 
		"featureTitle", "featureBody", "backgroundBlock", "backgroundBody", "scenarioBlock", 
		"scenarioDefinition", "scenarioBody", "statement", "statementBody", "text", 
		"line", "description"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Feature:'", "'Scenario:'", "'Background:'", null, null, null, 
		null, null, null, "'Given '", "'When '", "'Then '", "'And '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FEATURE", "SCENARIO", "BACKGROUND", "TAG", "OPTION", "NEWLINE", 
		"WORD", "WS", "TEXT_COMMENT", "GIVEN", "WHEN", "THEN", "AND"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AutoStepParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AutoStepParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AutoStepParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AutoStepParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public FeatureBlockContext[] featureBlock() {
			return GetRuleContexts<FeatureBlockContext>();
		}
		public FeatureBlockContext featureBlock(int i) {
			return GetRuleContext<FeatureBlockContext>(i);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 34; Match(NEWLINE);
					}
					} 
				}
				State = 39;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 41;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 40; featureBlock();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 43;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 45; Match(WS);
				}
			}

			State = 48; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureBlockContext : ParserRuleContext {
		public FeatureDefinitionContext featureDefinition() {
			return GetRuleContext<FeatureDefinitionContext>(0);
		}
		public FeatureBodyContext featureBody() {
			return GetRuleContext<FeatureBodyContext>(0);
		}
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public BackgroundBlockContext backgroundBlock() {
			return GetRuleContext<BackgroundBlockContext>(0);
		}
		public FeatureBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureBlockContext featureBlock() {
		FeatureBlockContext _localctx = new FeatureBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_featureBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAG) | (1L << OPTION) | (1L << NEWLINE))) != 0)) {
				{
				State = 50; annotations();
				}
			}

			State = 53; featureDefinition();
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 54; backgroundBlock();
				}
				break;
			}
			State = 57; featureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationsContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterAnnotations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitAnnotations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationsContext annotations() {
		AnnotationsContext _localctx = new AnnotationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_annotations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 59; annotation();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAG) | (1L << OPTION) | (1L << NEWLINE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
	 
		public AnnotationContext() { }
		public virtual void CopyFrom(AnnotationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlankAnnotationContext : AnnotationContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public BlankAnnotationContext(AnnotationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBlankAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBlankAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionAnnotationContext : AnnotationContext {
		public ITerminalNode OPTION() { return GetToken(AutoStepParser.OPTION, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public OptionAnnotationContext(AnnotationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterOptionAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitOptionAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TagAnnotationContext : AnnotationContext {
		public ITerminalNode TAG() { return GetToken(AutoStepParser.TAG, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public TagAnnotationContext(AnnotationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTagAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTagAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 6, RULE_annotation);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TAG:
				_localctx = new TagAnnotationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; Match(TAG);
				State = 65; Match(NEWLINE);
				}
				break;
			case OPTION:
				_localctx = new OptionAnnotationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; Match(OPTION);
				State = 67; Match(NEWLINE);
				}
				break;
			case NEWLINE:
				_localctx = new BlankAnnotationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureDefinitionContext : ParserRuleContext {
		public FeatureTitleContext featureTitle() {
			return GetRuleContext<FeatureTitleContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public FeatureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureDefinitionContext featureDefinition() {
		FeatureDefinitionContext _localctx = new FeatureDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_featureDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 71; Match(WS);
				}
			}

			State = 74; featureTitle();
			State = 75; Match(NEWLINE);
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 76; description();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureTitleContext : ParserRuleContext {
		public ITerminalNode FEATURE() { return GetToken(AutoStepParser.FEATURE, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public FeatureTitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureTitle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureTitle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureTitleContext featureTitle() {
		FeatureTitleContext _localctx = new FeatureTitleContext(Context, State);
		EnterRule(_localctx, 10, RULE_featureTitle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(FEATURE);
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 80; Match(WS);
				}
				break;
			}
			State = 83; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureBodyContext : ParserRuleContext {
		public ScenarioBlockContext[] scenarioBlock() {
			return GetRuleContexts<ScenarioBlockContext>();
		}
		public ScenarioBlockContext scenarioBlock(int i) {
			return GetRuleContext<ScenarioBlockContext>(i);
		}
		public FeatureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureBodyContext featureBody() {
		FeatureBodyContext _localctx = new FeatureBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_featureBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 85; scenarioBlock();
					}
					} 
				}
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackgroundBlockContext : ParserRuleContext {
		public ITerminalNode BACKGROUND() { return GetToken(AutoStepParser.BACKGROUND, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public BackgroundBodyContext backgroundBody() {
			return GetRuleContext<BackgroundBodyContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public BackgroundBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backgroundBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBackgroundBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBackgroundBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackgroundBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackgroundBlockContext backgroundBlock() {
		BackgroundBlockContext _localctx = new BackgroundBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_backgroundBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 91; Match(WS);
				}
			}

			State = 94; Match(BACKGROUND);
			State = 95; Match(NEWLINE);
			State = 96; backgroundBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackgroundBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BackgroundBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backgroundBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBackgroundBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBackgroundBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackgroundBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackgroundBodyContext backgroundBody() {
		BackgroundBodyContext _localctx = new BackgroundBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_backgroundBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GIVEN) | (1L << WHEN) | (1L << THEN) | (1L << AND))) != 0)) {
				{
				{
				State = 98; statement();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioBlockContext : ParserRuleContext {
		public ScenarioDefinitionContext scenarioDefinition() {
			return GetRuleContext<ScenarioDefinitionContext>(0);
		}
		public ScenarioBodyContext scenarioBody() {
			return GetRuleContext<ScenarioBodyContext>(0);
		}
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public ScenarioBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioBlockContext scenarioBlock() {
		ScenarioBlockContext _localctx = new ScenarioBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_scenarioBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAG) | (1L << OPTION) | (1L << NEWLINE))) != 0)) {
				{
				State = 104; annotations();
				}
			}

			State = 107; scenarioDefinition();
			State = 108; scenarioBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioDefinitionContext : ParserRuleContext {
		public ITerminalNode SCENARIO() { return GetToken(AutoStepParser.SCENARIO, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ScenarioDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioDefinitionContext scenarioDefinition() {
		ScenarioDefinitionContext _localctx = new ScenarioDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_scenarioDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 110; Match(WS);
				}
			}

			State = 113; Match(SCENARIO);
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 114; Match(WS);
				}
				break;
			}
			State = 117; text();
			State = 118; Match(NEWLINE);
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 119; description();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public ScenarioBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioBodyContext scenarioBody() {
		ScenarioBodyContext _localctx = new ScenarioBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_scenarioBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 129;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
					case GIVEN:
					case WHEN:
					case THEN:
					case AND:
						{
						State = 123;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 122; Match(WS);
							}
						}

						State = 125; statement();
						State = 126; Match(NEWLINE);
						}
						break;
					case NEWLINE:
						{
						State = 128; Match(NEWLINE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GivenContext : StatementContext {
		public ITerminalNode GIVEN() { return GetToken(AutoStepParser.GIVEN, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public GivenContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterGiven(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitGiven(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGiven(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : StatementContext {
		public ITerminalNode AND() { return GetToken(AutoStepParser.AND, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public AndContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThenContext : StatementContext {
		public ITerminalNode THEN() { return GetToken(AutoStepParser.THEN, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public ThenContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhenContext : StatementContext {
		public ITerminalNode WHEN() { return GetToken(AutoStepParser.WHEN, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public WhenContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GIVEN:
				_localctx = new GivenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 134; Match(GIVEN);
				State = 135; statementBody();
				}
				break;
			case WHEN:
				_localctx = new WhenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; Match(WHEN);
				State = 137; statementBody();
				}
				break;
			case THEN:
				_localctx = new ThenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 138; Match(THEN);
				State = 139; statementBody();
				}
				break;
			case AND:
				_localctx = new AndContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 140; Match(AND);
				State = 141; statementBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBodyContext : ParserRuleContext {
		public ITerminalNode[] WORD() { return GetTokens(AutoStepParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AutoStepParser.WORD, i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public StatementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBodyContext statementBody() {
		StatementBodyContext _localctx = new StatementBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_statementBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 144; Match(WS);
						}
					}

					State = 147; Match(WORD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode[] WORD() { return GetTokens(AutoStepParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AutoStepParser.WORD, i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 28, RULE_text);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 152; Match(WS);
						}
					}

					State = 155; Match(WORD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode[] WORD() { return GetTokens(AutoStepParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AutoStepParser.WORD, i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 30, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WORD || _la==WS) {
				{
				{
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 160; Match(WS);
					}
				}

				State = 163; Match(WORD);
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 169; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 32, RULE_description);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 171; line();
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 177; text();
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 178; line();
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '\xBB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\a', 
		'\x2', '&', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ')', '\v', '\x2', 
		'\x3', '\x2', '\x6', '\x2', ',', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'-', '\x3', '\x2', '\x5', '\x2', '\x31', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x5', '\x3', '\x36', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', ':', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x6', '\x4', '?', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 
		'@', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 'H', '\n', '\x5', '\x3', '\x6', '\x5', '\x6', 'K', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'P', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'T', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\a', '\b', 'Y', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '\\', '\v', '\b', '\x3', '\t', '\x5', '\t', '_', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\a', 
		'\n', '\x66', '\n', '\n', '\f', '\n', '\xE', '\n', 'i', '\v', '\n', '\x3', 
		'\v', '\x5', '\v', 'l', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x5', '\f', 'r', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', 'v', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'{', '\n', '\f', '\x3', '\r', '\x5', '\r', '~', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x84', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x87', '\v', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x91', '\n', '\xE', '\x3', '\xF', '\x5', 
		'\xF', '\x94', '\n', '\xF', '\x3', '\xF', '\x6', '\xF', '\x97', '\n', 
		'\xF', '\r', '\xF', '\xE', '\xF', '\x98', '\x3', '\x10', '\x5', '\x10', 
		'\x9C', '\n', '\x10', '\x3', '\x10', '\x6', '\x10', '\x9F', '\n', '\x10', 
		'\r', '\x10', '\xE', '\x10', '\xA0', '\x3', '\x11', '\x5', '\x11', '\xA4', 
		'\n', '\x11', '\x3', '\x11', '\a', '\x11', '\xA7', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xAA', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\a', '\x12', '\xAF', '\n', '\x12', '\f', '\x12', '\xE', 
		'\x12', '\xB2', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\xB6', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xB9', '\v', '\x12', 
		'\x3', '\x12', '\x2', '\x2', '\x13', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '\x2', '\x2', '\x2', '\xC9', '\x2', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x35', '\x3', '\x2', '\x2', '\x2', '\x6', '>', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'G', '\x3', '\x2', '\x2', '\x2', '\n', 'J', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'Q', '\x3', '\x2', '\x2', '\x2', '\xE', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '^', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x14', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'q', '\x3', '\x2', '\x2', '\x2', '\x18', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x90', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xA8', '\x3', '\x2', '\x2', '\x2', '\"', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '$', '&', '\a', '\b', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', 
		'\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', 
		'\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', ',', 
		'\x5', '\x4', '\x3', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', ',', 
		'-', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x31', '\a', '\n', '\x2', '\x2', '\x30', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\x2', '\x2', '\x3', 
		'\x33', '\x3', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x5', '\x6', 
		'\x4', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x39', '\x5', '\n', '\x6', '\x2', '\x38', ':', '\x5', '\x10', 
		'\t', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\x5', '\xE', '\b', '\x2', '<', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'=', '?', '\x5', '\b', '\x5', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\a', '\x6', '\x2', '\x2', '\x43', 'H', '\a', '\b', 
		'\x2', '\x2', '\x44', '\x45', '\a', '\a', '\x2', '\x2', '\x45', 'H', '\a', 
		'\b', '\x2', '\x2', '\x46', 'H', '\a', '\b', '\x2', '\x2', 'G', '\x42', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'H', '\t', '\x3', '\x2', '\x2', '\x2', 
		'I', 'K', '\a', '\n', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x5', '\f', '\a', '\x2', 'M', 'O', '\a', '\b', '\x2', '\x2', 
		'N', 'P', '\x5', '\"', '\x12', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'S', '\a', '\x3', '\x2', '\x2', 'R', 'T', '\a', '\n', '\x2', 
		'\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x5', '\x1E', 
		'\x10', '\x2', 'V', '\r', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\x5', 
		'\x14', '\v', '\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', 
		'\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', 
		'[', '\x3', '\x2', '\x2', '\x2', '[', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '_', '\a', '\n', '\x2', '\x2', 
		'^', ']', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '\x5', '\x2', 
		'\x2', '\x61', '\x62', '\a', '\b', '\x2', '\x2', '\x62', '\x63', '\x5', 
		'\x12', '\n', '\x2', '\x63', '\x11', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x66', '\x5', '\x1A', '\xE', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x13', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x5', 
		'\x6', '\x4', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x5', 
		'\x16', '\f', '\x2', 'n', 'o', '\x5', '\x18', '\r', '\x2', 'o', '\x15', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'r', '\a', '\n', '\x2', '\x2', 'q', 'p', 
		'\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 
		's', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\a', '\x4', '\x2', '\x2', 
		't', 'v', '\a', '\n', '\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\x5', '\x1E', '\x10', '\x2', 'x', 'z', '\a', '\b', '\x2', '\x2', 
		'y', '{', '\x5', '\"', '\x12', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '|', '~', '\a', '\n', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\x5', '\x1A', '\xE', '\x2', '\x80', '\x81', 
		'\a', '\b', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x84', '\a', '\b', '\x2', '\x2', '\x83', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\f', '\x2', '\x2', '\x89', '\x91', '\x5', '\x1C', '\xF', '\x2', '\x8A', 
		'\x8B', '\a', '\r', '\x2', '\x2', '\x8B', '\x91', '\x5', '\x1C', '\xF', 
		'\x2', '\x8C', '\x8D', '\a', '\xE', '\x2', '\x2', '\x8D', '\x91', '\x5', 
		'\x1C', '\xF', '\x2', '\x8E', '\x8F', '\a', '\xF', '\x2', '\x2', '\x8F', 
		'\x91', '\x5', '\x1C', '\xF', '\x2', '\x90', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\a', '\n', '\x2', 
		'\x2', '\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x97', '\a', '\t', '\x2', '\x2', '\x96', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\a', '\n', '\x2', 
		'\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9F', '\a', '\t', '\x2', '\x2', '\x9E', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\a', '\n', '\x2', 
		'\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA7', '\a', '\t', '\x2', '\x2', '\xA6', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\a', '\b', '\x2', '\x2', '\xAC', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xAF', '\x5', ' ', '\x11', '\x2', '\xAE', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB7', '\x5', '\x1E', '\x10', '\x2', 
		'\xB4', '\xB6', '\x5', ' ', '\x11', '\x2', '\xB5', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '#', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\'', '-', '\x30', '\x35', '\x39', '@', 'G', 'J', 
		'O', 'S', 'Z', '^', 'g', 'k', 'q', 'u', 'z', '}', '\x83', '\x85', '\x90', 
		'\x93', '\x98', '\x9B', '\xA0', '\xA3', '\xA8', '\xB0', '\xB7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AutoStep.Compiler.Parser
