
# Define App Context
App: my-app

  name: "My App"
  components: button, text, checkbox


Trait: enable-disable
  
  assertEnabled(): isEnabled() -> assertTrue()
  assertDisabled(): isEnabled() -> assertFalse()

Trait: named

  default(name): locateNamed(name)

  locateNamed(name): select("input[name='<name>']")

Trait: named + enable-disable

  Step: Then the {name} $component$ should be enabled
    locateNamed(name)
    -> first()
    -> assertEnabled()

  Step: Then the {name} $component$ should be disabled
    locateNamed(name)
    -> first()
    -> assertEnabled()
    
Trait: clickable + named + enable-disable
  
  Step: Given I have clicked the {name} $component$

    ## This step will click the $component$.    

    locateNamed(name)
    -> first()
    -> assertEnabled()
    -> click()

# The singular trait implies there is only one 
# on the page.
Trait: singular

Trait: has-value

  getValue(): getAttribute("value")

Trait: has-value + named

  Step: Then the {name} $component$ should have the value {value}
    locateNamed(name)
    -> getValue()
    
Trait: named + displayable
  
  Step: Then the {name} $component$ should exist
    locateNamed(name)
    -> assertOneExists()

  Step: Then the {name} $component$ should not exist
    locateNamed('name')
    -> assertNoneExist()


  Step: Then the {name} $component$ should be visible
    locatedNamed(name)
    -> assertVisible()

Trait: scannable + named

  Step: Given I have scanned {value:list} into the {name} $component$
    locateNamed(name)
    -> forEachItemIn(value)
    -> type(item)
    -> typeEscape()

  Step: Given I have scanned the following values into the {name} $component$
    locateNamed(name)
    -> forEachTableRow()
    -> type(row["value"])
    -> typeEscape()

Trait: scannable-list + named

  selectListItems(): select("li")

  Step: Then {value} should be in the {name} $component$
    locateNamed(name)
    -> selectListItems()
    -> getText()
    -> assertOneHasText(value)

Trait: editable + named

  isReadOnly(): getAttribute("readonly") -> equals("readonly")

  assertReadOnly(): isReadOnly() -> assertTrue()
  assertNotReadOnly(): isReadOnly() -> assertFalse()

  Step: When I press Tab in the {name} $component$
    locateNamed(name)
    -> type(TAB)
    
  Step: When I press Escape in the {name} $component$
    locateNamed(name)
    -> type(TAB)

  Step: Then the {name} $component$ should be readonly
    locateNamed(name)
    -> assertReadOnly()

Trait: selectable + named
 
  Step: Then the {name} $component$ should have {count} items and contain the values {values:list}
    locateNamed(name)
    -> getItems()
    -> assertCountIs(count)
    -> assertContainsAll(values)

Trait: checkable + named

  Step: Given I have checked the {name} $component$
    locateNamed(name)
    -> check()

  Step: Given I have un-checked the {name} $component$
    locateNamed(name)
    -> uncheck()
    
# Base control component
Component: control

  traits: displayable

# Defining a button
Component: button
  ## Description

  traits: clickable, enable-disable, named
  based-on: control
  locateNamed(name): select("input[type=button], button") -> with-text(name)
      

# Example of overriding locate for a default control
Component: button

  ## This component is the override for buttons
  
  locateNamed(name): select("input.bootstrap-btn") -> with-text(name)
  based-on: button

Component: kendo-button

  name: "kendo button"

# Defining the "field"
Component: field

  traits: clickable, enable-disable, named, scannable, has-value
  locateAll(): select("input[type=text]")
  locateNamed(name): label(name) -> linkedComponent()
 
# Page Example
Component: page

  Step: Then the {title} page should be displayed
    select("head title") 
    -> get-text()
    -> assertEqualTo(title)

  Step: Then a page with {partialTitle} in the title should be displayed
    select("head title")
    -> get-text()
    -> assert-contains(partialTitle)

  Step: Given I press Tab
    type(TAB)
    
  Step: Given I press Escape
    type(ESCAPE)

  Step: Given I press Tab {count} times
    repeat(count)
    -> wait(0.5)
    -> type(TAB)

Component: kendo-grid
  
  name: "kendo grid"
 
  locate(): select("k-grid") -> displayed()
  locateNamed(name): label(name) -> linkedComponent() -> withClass("k-grid") -> displayed()
  
  getGridRow(): select("k-grid")

  Step: Given I have clicked the {linkName} in the kendo grid where {column} equals {columnValue}
    locate()
    -> getRowByColumn(column, columnValue) # Defined in code, because it can"t be done here
    -> link(linkName)
    -> click()
    
  Step: Then the {linkName} link column in the kendo grid should be shown
    locate()    
    -> link(linkName)
    -> assertAtLeastOne()

  Step: Then the {linkName} in the kendo grid where {column} equals {columnValue} is disabled
    locate()
    -> getRowByColumn(column, columnValue)
    -> link(linkName)
    -> assertEnabled()

  Step: Then the kendo grid should have {count:int} rows
    locate()
    -> remember("grid") # Stores the grid as a local variable
    -> waitForNo("k-loading-mask")
    -> select("tr[role=row]")
    -> assertCountIs(count)
        
  Step: Then the kendo grid $component$ should have at least {count:int} rows
    locate()
    -> remember("grid") # Stores the grid as a local variable
    -> waitForNo("k-loading-mask")
    -> select("tr[role=row]")
    -> assertCountIsAtLeast(count)
    

Component: label
  
  traits: named

  locateNamed(name): select("label") -> with-text(name);

Component: heading

  locateNamed(name): select("h1,h2,h3") -> with-text(name)

  traits: named, displayable

Component: link
  
  traits: named, displayable, clickable, enable-disable

  locateNamed(name): select("a") -> with-text(name)
