//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoStep
{
    using System;
    using System.Threading.Tasks;
    using AutoStep.Definitions.Test;
    using AutoStep.Execution.Dependency;
        
    /// <summary>
    /// Defines extension methods for registering callback variants.
    /// This class is automatically generated - do not modify directly.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("ExtensionMethodGenerator", "1.0")]
    public static class CallbackDefinitionExtensions
    {
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// </summary>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given(this CallbackDefinitionSource source, string declaration, Action callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// </summary>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given(this CallbackDefinitionSource source, string declaration, Func<ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1>(this CallbackDefinitionSource source, string declaration, Action<T1> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1>(this CallbackDefinitionSource source, string declaration, Func<T1, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2>(this CallbackDefinitionSource source, string declaration, Action<T1, T2> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5, T6>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5, T6>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5, T6, T7>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5, T6, T7>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5, T6, T7, T8>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7, T8> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5, T6, T7, T8>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, T8, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <typeparam name="T10">Method argument type 10.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Given' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <typeparam name="T10">Method argument type 10.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Given<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Given, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// </summary>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When(this CallbackDefinitionSource source, string declaration, Action callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// </summary>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When(this CallbackDefinitionSource source, string declaration, Func<ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1>(this CallbackDefinitionSource source, string declaration, Action<T1> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1>(this CallbackDefinitionSource source, string declaration, Func<T1, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2>(this CallbackDefinitionSource source, string declaration, Action<T1, T2> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5, T6>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5, T6>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5, T6, T7>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5, T6, T7>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5, T6, T7, T8>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7, T8> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5, T6, T7, T8>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, T8, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <typeparam name="T10">Method argument type 10.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'When' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <typeparam name="T10">Method argument type 10.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource When<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.When, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// </summary>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then(this CallbackDefinitionSource source, string declaration, Action callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// </summary>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then(this CallbackDefinitionSource source, string declaration, Func<ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1>(this CallbackDefinitionSource source, string declaration, Action<T1> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1>(this CallbackDefinitionSource source, string declaration, Func<T1, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2>(this CallbackDefinitionSource source, string declaration, Action<T1, T2> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5, T6>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5, T6>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5, T6, T7>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5, T6, T7>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5, T6, T7, T8>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7, T8> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5, T6, T7, T8>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, T8, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <typeparam name="T10">Method argument type 10.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this CallbackDefinitionSource source, string declaration, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
        
        /// <summary>
        /// Register a 'Then' step definition, with a callback to be invoked when
        /// that step is used in a test.
        /// Type parameters for the callback are the type of values to bind step arguments to.
        /// A type argument of <see cref="IServiceScope" /> will cause the current scope to be injected into the method.
        /// </summary>
        /// <typeparam name="T1">Method argument type 1.</typeparam>
        /// <typeparam name="T2">Method argument type 2.</typeparam>
        /// <typeparam name="T3">Method argument type 3.</typeparam>
        /// <typeparam name="T4">Method argument type 4.</typeparam>
        /// <typeparam name="T5">Method argument type 5.</typeparam>
        /// <typeparam name="T6">Method argument type 6.</typeparam>
        /// <typeparam name="T7">Method argument type 7.</typeparam>
        /// <typeparam name="T8">Method argument type 8.</typeparam>
        /// <typeparam name="T9">Method argument type 9.</typeparam>
        /// <typeparam name="T10">Method argument type 10.</typeparam>
        /// <param name="source">The callback source to add to.</param>
        /// <param name="declaration">The step declaration body.</param>
        /// <param name="callback">The callback to invoke when the step executes.</param>
        /// <returns>The same callback source, to allow continuations.</returns>
        public static CallbackDefinitionSource Then<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this CallbackDefinitionSource source, string declaration, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, ValueTask> callback)
        {
            callback = callback.ThrowIfNull(nameof(callback));
            source = source.ThrowIfNull(nameof(source));
            source.Add(new DelegateBackedStepDefinition(source, callback.Target, callback.Method, StepType.Then, declaration));
            return source;
        }
    }
}
