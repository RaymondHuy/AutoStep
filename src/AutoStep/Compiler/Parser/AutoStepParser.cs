//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\AutoStepParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AutoStep.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
internal partial class AutoStepParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FEATURE=1, SCENARIO=2, SCENARIO_OUTLINE=3, EXAMPLES=4, STEP_DEFINE=5, 
		BACKGROUND=6, TAG=7, OPTION=8, GIVEN=9, WHEN=10, THEN=11, AND=12, NEWLINE=13, 
		WORD=14, WS=15, TEXT_COMMENT=16, ESCAPED_TABLE_DELIMITER=17, TABLE_START=18, 
		STATEMENT_ESCAPED_QUOTE=19, STATEMENT_ESCAPED_DBLQUOTE=20, STATEMENT_ESCAPED_VARSTART=21, 
		STATEMENT_ESCAPED_VAREND=22, STATEMENT_VAR_START=23, STATEMENT_VAR_STOP=24, 
		STATEMENT_QUOTE=25, STATEMENT_DOUBLE_QUOTE=26, STATEMENT_NEWLINE=27, STATEMENT_FLOAT=28, 
		STATEMENT_INT=29, STATEMENT_COLON=30, STATEMENT_WS=31, STATEMENT_WORD=32, 
		STATEMENT_COMMENT=33, DEF_GIVEN=34, DEF_WHEN=35, DEF_THEN=36, DEF_ESCAPED_LCURLY=37, 
		DEF_ESCAPED_RCURLY=38, DEF_LCURLY=39, DEF_RCURLY=40, DEF_NEWLINE=41, DEF_WS=42, 
		DEF_COLON=43, DEF_WORD=44, DEF_COMMENT=45, CELL_ESCAPED_VARSTART=46, CELL_ESCAPED_VAREND=47, 
		CELL_VAR_START=48, CELL_VAR_STOP=49, CELL_WORD=50, CELL_FLOAT=51, CELL_INT=52, 
		CELL_COLON=53, CELL_ESCAPED_DELIMITER=54, CELL_DELIMITER=55, CELL_WS=56, 
		ROW_COMMENT=57, ROW_NL=58;
	public const int
		RULE_file = 0, RULE_stepDefinitionBlock = 1, RULE_stepDefinition = 2, 
		RULE_stepDefinitionBody = 3, RULE_stepDeclaration = 4, RULE_stepDeclarationBody = 5, 
		RULE_stepDeclarationSection = 6, RULE_stepDeclarationArgument = 7, RULE_stepDeclarationArgumentName = 8, 
		RULE_stepDeclarationTypeHint = 9, RULE_stepDeclarationSectionContent = 10, 
		RULE_featureBlock = 11, RULE_annotations = 12, RULE_annotation = 13, RULE_featureDefinition = 14, 
		RULE_featureTitle = 15, RULE_featureBody = 16, RULE_backgroundBlock = 17, 
		RULE_backgroundBody = 18, RULE_scenarioBlock = 19, RULE_scenarioDefinition = 20, 
		RULE_scenarioTitle = 21, RULE_scenarioBody = 22, RULE_stepCollectionBodyLine = 23, 
		RULE_statementBlock = 24, RULE_statement = 25, RULE_statementBody = 26, 
		RULE_statementSection = 27, RULE_statementVariableName = 28, RULE_statementVarPhrase = 29, 
		RULE_examples = 30, RULE_exampleBlock = 31, RULE_tableBlock = 32, RULE_tableHeader = 33, 
		RULE_tableHeaderCell = 34, RULE_tableRow = 35, RULE_tableRowCell = 36, 
		RULE_tableRowCellContent = 37, RULE_cellContentBlock = 38, RULE_cellVariableName = 39, 
		RULE_cellVarPhrase = 40, RULE_text = 41, RULE_line = 42, RULE_description = 43, 
		RULE_onlyLine = 44, RULE_lineTerm = 45;
	public static readonly string[] ruleNames = {
		"file", "stepDefinitionBlock", "stepDefinition", "stepDefinitionBody", 
		"stepDeclaration", "stepDeclarationBody", "stepDeclarationSection", "stepDeclarationArgument", 
		"stepDeclarationArgumentName", "stepDeclarationTypeHint", "stepDeclarationSectionContent", 
		"featureBlock", "annotations", "annotation", "featureDefinition", "featureTitle", 
		"featureBody", "backgroundBlock", "backgroundBody", "scenarioBlock", "scenarioDefinition", 
		"scenarioTitle", "scenarioBody", "stepCollectionBodyLine", "statementBlock", 
		"statement", "statementBody", "statementSection", "statementVariableName", 
		"statementVarPhrase", "examples", "exampleBlock", "tableBlock", "tableHeader", 
		"tableHeaderCell", "tableRow", "tableRowCell", "tableRowCellContent", 
		"cellContentBlock", "cellVariableName", "cellVarPhrase", "text", "line", 
		"description", "onlyLine", "lineTerm"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'Background:'", null, null, "'Given'", 
		"'When'", "'Then'", "'And'", null, null, null, null, null, null, "'\\''", 
		"'\\\"'", null, null, null, null, "'''", "'\"'", null, null, null, null, 
		null, null, null, "'Given '", "'When '", "'Then '", "'\\{'", "'\\}'", 
		"'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FEATURE", "SCENARIO", "SCENARIO_OUTLINE", "EXAMPLES", "STEP_DEFINE", 
		"BACKGROUND", "TAG", "OPTION", "GIVEN", "WHEN", "THEN", "AND", "NEWLINE", 
		"WORD", "WS", "TEXT_COMMENT", "ESCAPED_TABLE_DELIMITER", "TABLE_START", 
		"STATEMENT_ESCAPED_QUOTE", "STATEMENT_ESCAPED_DBLQUOTE", "STATEMENT_ESCAPED_VARSTART", 
		"STATEMENT_ESCAPED_VAREND", "STATEMENT_VAR_START", "STATEMENT_VAR_STOP", 
		"STATEMENT_QUOTE", "STATEMENT_DOUBLE_QUOTE", "STATEMENT_NEWLINE", "STATEMENT_FLOAT", 
		"STATEMENT_INT", "STATEMENT_COLON", "STATEMENT_WS", "STATEMENT_WORD", 
		"STATEMENT_COMMENT", "DEF_GIVEN", "DEF_WHEN", "DEF_THEN", "DEF_ESCAPED_LCURLY", 
		"DEF_ESCAPED_RCURLY", "DEF_LCURLY", "DEF_RCURLY", "DEF_NEWLINE", "DEF_WS", 
		"DEF_COLON", "DEF_WORD", "DEF_COMMENT", "CELL_ESCAPED_VARSTART", "CELL_ESCAPED_VAREND", 
		"CELL_VAR_START", "CELL_VAR_STOP", "CELL_WORD", "CELL_FLOAT", "CELL_INT", 
		"CELL_COLON", "CELL_ESCAPED_DELIMITER", "CELL_DELIMITER", "CELL_WS", "ROW_COMMENT", 
		"ROW_NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AutoStepParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AutoStepParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AutoStepParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AutoStepParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public FeatureBlockContext[] featureBlock() {
			return GetRuleContexts<FeatureBlockContext>();
		}
		public FeatureBlockContext featureBlock(int i) {
			return GetRuleContext<FeatureBlockContext>(i);
		}
		public StepDefinitionBlockContext[] stepDefinitionBlock() {
			return GetRuleContexts<StepDefinitionBlockContext>();
		}
		public StepDefinitionBlockContext stepDefinitionBlock(int i) {
			return GetRuleContext<StepDefinitionBlockContext>(i);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 92; Match(NEWLINE);
					}
					} 
				}
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 100;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 100;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 98; featureBlock();
						}
						break;
					case 2:
						{
						State = 99; stepDefinitionBlock();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 104; Match(WS);
				}
			}

			State = 107; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDefinitionBlockContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public StepDefinitionContext stepDefinition() {
			return GetRuleContext<StepDefinitionContext>(0);
		}
		public StepDefinitionBodyContext stepDefinitionBody() {
			return GetRuleContext<StepDefinitionBodyContext>(0);
		}
		public StepDefinitionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDefinitionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDefinitionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDefinitionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDefinitionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDefinitionBlockContext stepDefinitionBlock() {
		StepDefinitionBlockContext _localctx = new StepDefinitionBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_stepDefinitionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; annotations();
			State = 110; stepDefinition();
			State = 111; stepDefinitionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDefinitionContext : ParserRuleContext {
		public ITerminalNode STEP_DEFINE() { return GetToken(AutoStepParser.STEP_DEFINE, 0); }
		public StepDeclarationContext stepDeclaration() {
			return GetRuleContext<StepDeclarationContext>(0);
		}
		public ITerminalNode DEF_NEWLINE() { return GetToken(AutoStepParser.DEF_NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public ITerminalNode DEF_WS() { return GetToken(AutoStepParser.DEF_WS, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public StepDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDefinitionContext stepDefinition() {
		StepDefinitionContext _localctx = new StepDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_stepDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 113; Match(WS);
				}
			}

			State = 116; Match(STEP_DEFINE);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEF_WS) {
				{
				State = 117; Match(DEF_WS);
				}
			}

			State = 120; stepDeclaration();
			State = 121; Match(DEF_NEWLINE);
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 122; description();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDefinitionBodyContext : ParserRuleContext {
		public StepCollectionBodyLineContext[] stepCollectionBodyLine() {
			return GetRuleContexts<StepCollectionBodyLineContext>();
		}
		public StepCollectionBodyLineContext stepCollectionBodyLine(int i) {
			return GetRuleContext<StepCollectionBodyLineContext>(i);
		}
		public StepDefinitionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDefinitionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDefinitionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDefinitionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDefinitionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDefinitionBodyContext stepDefinitionBody() {
		StepDefinitionBodyContext _localctx = new StepDefinitionBodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_stepDefinitionBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 125; stepCollectionBodyLine();
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationContext : ParserRuleContext {
		public StepDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclaration; } }
	 
		public StepDeclarationContext() { }
		public virtual void CopyFrom(StepDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclareGivenContext : StepDeclarationContext {
		public ITerminalNode DEF_GIVEN() { return GetToken(AutoStepParser.DEF_GIVEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public DeclareGivenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclareGiven(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclareGiven(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareGiven(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclareWhenContext : StepDeclarationContext {
		public ITerminalNode DEF_WHEN() { return GetToken(AutoStepParser.DEF_WHEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public DeclareWhenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclareWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclareWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareWhen(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclareThenContext : StepDeclarationContext {
		public ITerminalNode DEF_THEN() { return GetToken(AutoStepParser.DEF_THEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public DeclareThenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclareThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclareThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationContext stepDeclaration() {
		StepDeclarationContext _localctx = new StepDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_stepDeclaration);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_GIVEN:
				_localctx = new DeclareGivenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; Match(DEF_GIVEN);
				State = 132; stepDeclarationBody();
				}
				break;
			case DEF_WHEN:
				_localctx = new DeclareWhenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; Match(DEF_WHEN);
				State = 134; stepDeclarationBody();
				}
				break;
			case DEF_THEN:
				_localctx = new DeclareThenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 135; Match(DEF_THEN);
				State = 136; stepDeclarationBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationBodyContext : ParserRuleContext {
		public StepDeclarationSectionContext[] stepDeclarationSection() {
			return GetRuleContexts<StepDeclarationSectionContext>();
		}
		public StepDeclarationSectionContext stepDeclarationSection(int i) {
			return GetRuleContext<StepDeclarationSectionContext>(i);
		}
		public StepDeclarationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationBodyContext stepDeclarationBody() {
		StepDeclarationBodyContext _localctx = new StepDeclarationBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_stepDeclarationBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 139; stepDeclarationSection();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEF_ESCAPED_LCURLY) | (1L << DEF_ESCAPED_RCURLY) | (1L << DEF_LCURLY) | (1L << DEF_WS) | (1L << DEF_COLON) | (1L << DEF_WORD))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationSectionContext : ParserRuleContext {
		public StepDeclarationSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationSection; } }
	 
		public StepDeclarationSectionContext() { }
		public virtual void CopyFrom(StepDeclarationSectionContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclarationSectionContext : StepDeclarationSectionContext {
		public StepDeclarationSectionContentContext stepDeclarationSectionContent() {
			return GetRuleContext<StepDeclarationSectionContentContext>(0);
		}
		public DeclarationSectionContext(StepDeclarationSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationArgumentContext : StepDeclarationSectionContext {
		public ITerminalNode DEF_LCURLY() { return GetToken(AutoStepParser.DEF_LCURLY, 0); }
		public StepDeclarationArgumentContext stepDeclarationArgument() {
			return GetRuleContext<StepDeclarationArgumentContext>(0);
		}
		public ITerminalNode DEF_RCURLY() { return GetToken(AutoStepParser.DEF_RCURLY, 0); }
		public DeclarationArgumentContext(StepDeclarationSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationSectionContext stepDeclarationSection() {
		StepDeclarationSectionContext _localctx = new StepDeclarationSectionContext(Context, State);
		EnterRule(_localctx, 12, RULE_stepDeclarationSection);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_LCURLY:
				_localctx = new DeclarationArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; Match(DEF_LCURLY);
				State = 145; stepDeclarationArgument();
				State = 146; Match(DEF_RCURLY);
				}
				break;
			case DEF_ESCAPED_LCURLY:
			case DEF_ESCAPED_RCURLY:
			case DEF_WS:
			case DEF_COLON:
			case DEF_WORD:
				_localctx = new DeclarationSectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; stepDeclarationSectionContent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationArgumentContext : ParserRuleContext {
		public StepDeclarationArgumentNameContext stepDeclarationArgumentName() {
			return GetRuleContext<StepDeclarationArgumentNameContext>(0);
		}
		public ITerminalNode DEF_COLON() { return GetToken(AutoStepParser.DEF_COLON, 0); }
		public StepDeclarationTypeHintContext stepDeclarationTypeHint() {
			return GetRuleContext<StepDeclarationTypeHintContext>(0);
		}
		public StepDeclarationArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationArgumentContext stepDeclarationArgument() {
		StepDeclarationArgumentContext _localctx = new StepDeclarationArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_stepDeclarationArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; stepDeclarationArgumentName();
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEF_COLON) {
				{
				State = 152; Match(DEF_COLON);
				State = 153; stepDeclarationTypeHint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationArgumentNameContext : ParserRuleContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepParser.DEF_WORD, 0); }
		public StepDeclarationArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationArgumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationArgumentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationArgumentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationArgumentNameContext stepDeclarationArgumentName() {
		StepDeclarationArgumentNameContext _localctx = new StepDeclarationArgumentNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_stepDeclarationArgumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(DEF_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationTypeHintContext : ParserRuleContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepParser.DEF_WORD, 0); }
		public StepDeclarationTypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationTypeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationTypeHintContext stepDeclarationTypeHint() {
		StepDeclarationTypeHintContext _localctx = new StepDeclarationTypeHintContext(Context, State);
		EnterRule(_localctx, 18, RULE_stepDeclarationTypeHint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(DEF_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationSectionContentContext : ParserRuleContext {
		public StepDeclarationSectionContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationSectionContent; } }
	 
		public StepDeclarationSectionContentContext() { }
		public virtual void CopyFrom(StepDeclarationSectionContentContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclarationWordContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepParser.DEF_WORD, 0); }
		public DeclarationWordContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationWord(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationWsContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_WS() { return GetToken(AutoStepParser.DEF_WS, 0); }
		public DeclarationWsContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationWs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationWs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationWs(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationColonContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_COLON() { return GetToken(AutoStepParser.DEF_COLON, 0); }
		public DeclarationColonContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationColon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationColon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationColon(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationEscapedContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_ESCAPED_LCURLY() { return GetToken(AutoStepParser.DEF_ESCAPED_LCURLY, 0); }
		public ITerminalNode DEF_ESCAPED_RCURLY() { return GetToken(AutoStepParser.DEF_ESCAPED_RCURLY, 0); }
		public DeclarationEscapedContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationEscaped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationEscaped(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationEscaped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationSectionContentContext stepDeclarationSectionContent() {
		StepDeclarationSectionContentContext _localctx = new StepDeclarationSectionContentContext(Context, State);
		EnterRule(_localctx, 20, RULE_stepDeclarationSectionContent);
		int _la;
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_WORD:
				_localctx = new DeclarationWordContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; Match(DEF_WORD);
				}
				break;
			case DEF_ESCAPED_LCURLY:
			case DEF_ESCAPED_RCURLY:
				_localctx = new DeclarationEscapedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				_la = TokenStream.LA(1);
				if ( !(_la==DEF_ESCAPED_LCURLY || _la==DEF_ESCAPED_RCURLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DEF_WS:
				_localctx = new DeclarationWsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 162; Match(DEF_WS);
				}
				break;
			case DEF_COLON:
				_localctx = new DeclarationColonContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 163; Match(DEF_COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FeatureBlockContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public FeatureDefinitionContext featureDefinition() {
			return GetRuleContext<FeatureDefinitionContext>(0);
		}
		public FeatureBodyContext featureBody() {
			return GetRuleContext<FeatureBodyContext>(0);
		}
		public BackgroundBlockContext backgroundBlock() {
			return GetRuleContext<BackgroundBlockContext>(0);
		}
		public FeatureBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureBlockContext featureBlock() {
		FeatureBlockContext _localctx = new FeatureBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_featureBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; annotations();
			State = 167; featureDefinition();
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 168; backgroundBlock();
				}
				break;
			}
			State = 171; featureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AnnotationsContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterAnnotations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitAnnotations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationsContext annotations() {
		AnnotationsContext _localctx = new AnnotationsContext(Context, State);
		EnterRule(_localctx, 24, RULE_annotations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 173; annotation();
					}
					} 
				}
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AnnotationContext : ParserRuleContext {
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
	 
		public AnnotationContext() { }
		public virtual void CopyFrom(AnnotationContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class BlankContext : AnnotationContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public BlankContext(AnnotationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBlank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBlank(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlank(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class OptionAnnotationContext : AnnotationContext {
		public ITerminalNode OPTION() { return GetToken(AutoStepParser.OPTION, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public OptionAnnotationContext(AnnotationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterOptionAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitOptionAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class TagAnnotationContext : AnnotationContext {
		public ITerminalNode TAG() { return GetToken(AutoStepParser.TAG, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public TagAnnotationContext(AnnotationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTagAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTagAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 26, RULE_annotation);
		int _la;
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new TagAnnotationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 179; Match(WS);
					}
				}

				State = 182; Match(TAG);
				State = 183; Match(NEWLINE);
				}
				break;
			case 2:
				_localctx = new OptionAnnotationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 184; Match(WS);
					}
				}

				State = 187; Match(OPTION);
				State = 188; Match(NEWLINE);
				}
				break;
			case 3:
				_localctx = new BlankContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 189; Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FeatureDefinitionContext : ParserRuleContext {
		public FeatureTitleContext featureTitle() {
			return GetRuleContext<FeatureTitleContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public FeatureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureDefinitionContext featureDefinition() {
		FeatureDefinitionContext _localctx = new FeatureDefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_featureDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 192; Match(WS);
				}
			}

			State = 195; featureTitle();
			State = 196; Match(NEWLINE);
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 197; description();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FeatureTitleContext : ParserRuleContext {
		public ITerminalNode FEATURE() { return GetToken(AutoStepParser.FEATURE, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public FeatureTitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureTitle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureTitle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureTitleContext featureTitle() {
		FeatureTitleContext _localctx = new FeatureTitleContext(Context, State);
		EnterRule(_localctx, 30, RULE_featureTitle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(FEATURE);
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 201; Match(WS);
				}
				break;
			}
			State = 204; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FeatureBodyContext : ParserRuleContext {
		public ScenarioBlockContext[] scenarioBlock() {
			return GetRuleContexts<ScenarioBlockContext>();
		}
		public ScenarioBlockContext scenarioBlock(int i) {
			return GetRuleContext<ScenarioBlockContext>(i);
		}
		public FeatureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureBodyContext featureBody() {
		FeatureBodyContext _localctx = new FeatureBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_featureBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 206; scenarioBlock();
					}
					} 
				}
				State = 211;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class BackgroundBlockContext : ParserRuleContext {
		public ITerminalNode BACKGROUND() { return GetToken(AutoStepParser.BACKGROUND, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public BackgroundBodyContext backgroundBody() {
			return GetRuleContext<BackgroundBodyContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public BackgroundBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backgroundBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBackgroundBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBackgroundBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackgroundBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackgroundBlockContext backgroundBlock() {
		BackgroundBlockContext _localctx = new BackgroundBlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_backgroundBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 212; Match(WS);
				}
			}

			State = 215; Match(BACKGROUND);
			State = 216; Match(NEWLINE);
			State = 217; backgroundBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class BackgroundBodyContext : ParserRuleContext {
		public StepCollectionBodyLineContext[] stepCollectionBodyLine() {
			return GetRuleContexts<StepCollectionBodyLineContext>();
		}
		public StepCollectionBodyLineContext stepCollectionBodyLine(int i) {
			return GetRuleContext<StepCollectionBodyLineContext>(i);
		}
		public BackgroundBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backgroundBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBackgroundBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBackgroundBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackgroundBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackgroundBodyContext backgroundBody() {
		BackgroundBodyContext _localctx = new BackgroundBodyContext(Context, State);
		EnterRule(_localctx, 36, RULE_backgroundBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 219; stepCollectionBodyLine();
					}
					} 
				}
				State = 224;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ScenarioBlockContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public ScenarioDefinitionContext scenarioDefinition() {
			return GetRuleContext<ScenarioDefinitionContext>(0);
		}
		public ScenarioBodyContext scenarioBody() {
			return GetRuleContext<ScenarioBodyContext>(0);
		}
		public ExamplesContext examples() {
			return GetRuleContext<ExamplesContext>(0);
		}
		public ScenarioBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioBlockContext scenarioBlock() {
		ScenarioBlockContext _localctx = new ScenarioBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_scenarioBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; annotations();
			State = 226; scenarioDefinition();
			State = 227; scenarioBody();
			State = 228; examples();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ScenarioDefinitionContext : ParserRuleContext {
		public ScenarioTitleContext scenarioTitle() {
			return GetRuleContext<ScenarioTitleContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ScenarioDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioDefinitionContext scenarioDefinition() {
		ScenarioDefinitionContext _localctx = new ScenarioDefinitionContext(Context, State);
		EnterRule(_localctx, 40, RULE_scenarioDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 230; Match(WS);
				}
			}

			State = 233; scenarioTitle();
			State = 234; Match(NEWLINE);
			State = 236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 235; description();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ScenarioTitleContext : ParserRuleContext {
		public ScenarioTitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioTitle; } }
	 
		public ScenarioTitleContext() { }
		public virtual void CopyFrom(ScenarioTitleContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class NormalScenarioTitleContext : ScenarioTitleContext {
		public ITerminalNode SCENARIO() { return GetToken(AutoStepParser.SCENARIO, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public NormalScenarioTitleContext(ScenarioTitleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterNormalScenarioTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitNormalScenarioTitle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalScenarioTitle(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ScenarioOutlineTitleContext : ScenarioTitleContext {
		public ITerminalNode SCENARIO_OUTLINE() { return GetToken(AutoStepParser.SCENARIO_OUTLINE, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public ScenarioOutlineTitleContext(ScenarioTitleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioOutlineTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioOutlineTitle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioOutlineTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioTitleContext scenarioTitle() {
		ScenarioTitleContext _localctx = new ScenarioTitleContext(Context, State);
		EnterRule(_localctx, 42, RULE_scenarioTitle);
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCENARIO:
				_localctx = new NormalScenarioTitleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 238; Match(SCENARIO);
				State = 240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 239; Match(WS);
					}
					break;
				}
				State = 242; text();
				}
				break;
			case SCENARIO_OUTLINE:
				_localctx = new ScenarioOutlineTitleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; Match(SCENARIO_OUTLINE);
				State = 245;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 244; Match(WS);
					}
					break;
				}
				State = 247; text();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ScenarioBodyContext : ParserRuleContext {
		public StepCollectionBodyLineContext[] stepCollectionBodyLine() {
			return GetRuleContexts<StepCollectionBodyLineContext>();
		}
		public StepCollectionBodyLineContext stepCollectionBodyLine(int i) {
			return GetRuleContext<StepCollectionBodyLineContext>(i);
		}
		public ScenarioBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioBodyContext scenarioBody() {
		ScenarioBodyContext _localctx = new ScenarioBodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_scenarioBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 250; stepCollectionBodyLine();
					}
					} 
				}
				State = 255;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepCollectionBodyLineContext : ParserRuleContext {
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public StepCollectionBodyLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepCollectionBodyLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepCollectionBodyLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepCollectionBodyLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepCollectionBodyLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepCollectionBodyLineContext stepCollectionBodyLine() {
		StepCollectionBodyLineContext _localctx = new StepCollectionBodyLineContext(Context, State);
		EnterRule(_localctx, 46, RULE_stepCollectionBodyLine);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GIVEN:
			case WHEN:
			case THEN:
			case AND:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; statementBlock();
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementBlockContext : ParserRuleContext {
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
	 
		public StatementBlockContext() { }
		public virtual void CopyFrom(StatementBlockContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class StatementEofTerminatedContext : StatementBlockContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public StatementEofTerminatedContext(StatementBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementEofTerminated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementEofTerminated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementEofTerminated(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementLineTerminatedContext : StatementBlockContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode STATEMENT_NEWLINE() { return GetToken(AutoStepParser.STATEMENT_NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementLineTerminatedContext(StatementBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementLineTerminated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementLineTerminated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLineTerminated(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementWithTableContext : StatementBlockContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode STATEMENT_NEWLINE() { return GetToken(AutoStepParser.STATEMENT_NEWLINE, 0); }
		public TableBlockContext tableBlock() {
			return GetRuleContext<TableBlockContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public StatementWithTableContext(StatementBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementWithTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementWithTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWithTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_statementBlock);
		int _la;
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new StatementWithTableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 260; Match(WS);
					}
				}

				State = 263; statement();
				State = 264; Match(STATEMENT_NEWLINE);
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 265; Match(NEWLINE);
					}
					}
					State = 270;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 271; tableBlock();
				}
				break;
			case 2:
				_localctx = new StatementLineTerminatedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 273; Match(WS);
					}
				}

				State = 276; statement();
				State = 277; Match(STATEMENT_NEWLINE);
				}
				break;
			case 3:
				_localctx = new StatementEofTerminatedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 279; Match(WS);
					}
				}

				State = 282; statement();
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 283; Match(WS);
					}
				}

				State = 286; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class GivenContext : StatementContext {
		public ITerminalNode GIVEN() { return GetToken(AutoStepParser.GIVEN, 0); }
		public ITerminalNode STATEMENT_WS() { return GetToken(AutoStepParser.STATEMENT_WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public GivenContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterGiven(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitGiven(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGiven(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class AndContext : StatementContext {
		public ITerminalNode AND() { return GetToken(AutoStepParser.AND, 0); }
		public ITerminalNode STATEMENT_WS() { return GetToken(AutoStepParser.STATEMENT_WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public AndContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ThenContext : StatementContext {
		public ITerminalNode THEN() { return GetToken(AutoStepParser.THEN, 0); }
		public ITerminalNode STATEMENT_WS() { return GetToken(AutoStepParser.STATEMENT_WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public ThenContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class WhenContext : StatementContext {
		public ITerminalNode WHEN() { return GetToken(AutoStepParser.WHEN, 0); }
		public ITerminalNode STATEMENT_WS() { return GetToken(AutoStepParser.STATEMENT_WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public WhenContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_statement);
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GIVEN:
				_localctx = new GivenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 290; Match(GIVEN);
				State = 291; Match(STATEMENT_WS);
				State = 292; statementBody();
				}
				break;
			case WHEN:
				_localctx = new WhenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 293; Match(WHEN);
				State = 294; Match(STATEMENT_WS);
				State = 295; statementBody();
				}
				break;
			case THEN:
				_localctx = new ThenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 296; Match(THEN);
				State = 297; Match(STATEMENT_WS);
				State = 298; statementBody();
				}
				break;
			case AND:
				_localctx = new AndContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 299; Match(AND);
				State = 300; Match(STATEMENT_WS);
				State = 301; statementBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementBodyContext : ParserRuleContext {
		public StatementSectionContext[] statementSection() {
			return GetRuleContexts<StatementSectionContext>();
		}
		public StatementSectionContext statementSection(int i) {
			return GetRuleContext<StatementSectionContext>(i);
		}
		public StatementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBodyContext statementBody() {
		StatementBodyContext _localctx = new StatementBodyContext(Context, State);
		EnterRule(_localctx, 52, RULE_statementBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 304; statementSection();
				}
				}
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STATEMENT_ESCAPED_QUOTE) | (1L << STATEMENT_ESCAPED_DBLQUOTE) | (1L << STATEMENT_ESCAPED_VARSTART) | (1L << STATEMENT_ESCAPED_VAREND) | (1L << STATEMENT_VAR_START) | (1L << STATEMENT_VAR_STOP) | (1L << STATEMENT_QUOTE) | (1L << STATEMENT_DOUBLE_QUOTE) | (1L << STATEMENT_FLOAT) | (1L << STATEMENT_INT) | (1L << STATEMENT_COLON) | (1L << STATEMENT_WS) | (1L << STATEMENT_WORD))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementSectionContext : ParserRuleContext {
		public StatementSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSection; } }
	 
		public StatementSectionContext() { }
		public virtual void CopyFrom(StatementSectionContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class StatementVarUnmatchedContext : StatementSectionContext {
		public ITerminalNode STATEMENT_VAR_START() { return GetToken(AutoStepParser.STATEMENT_VAR_START, 0); }
		public ITerminalNode STATEMENT_VAR_STOP() { return GetToken(AutoStepParser.STATEMENT_VAR_STOP, 0); }
		public StatementVarUnmatchedContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementVarUnmatched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementVarUnmatched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementVarUnmatched(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementEscapedCharContext : StatementSectionContext {
		public ITerminalNode STATEMENT_ESCAPED_QUOTE() { return GetToken(AutoStepParser.STATEMENT_ESCAPED_QUOTE, 0); }
		public ITerminalNode STATEMENT_ESCAPED_DBLQUOTE() { return GetToken(AutoStepParser.STATEMENT_ESCAPED_DBLQUOTE, 0); }
		public ITerminalNode STATEMENT_ESCAPED_VARSTART() { return GetToken(AutoStepParser.STATEMENT_ESCAPED_VARSTART, 0); }
		public ITerminalNode STATEMENT_ESCAPED_VAREND() { return GetToken(AutoStepParser.STATEMENT_ESCAPED_VAREND, 0); }
		public StatementEscapedCharContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementEscapedChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementEscapedChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementEscapedChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementVariableContext : StatementSectionContext {
		public ITerminalNode STATEMENT_VAR_START() { return GetToken(AutoStepParser.STATEMENT_VAR_START, 0); }
		public StatementVariableNameContext statementVariableName() {
			return GetRuleContext<StatementVariableNameContext>(0);
		}
		public ITerminalNode STATEMENT_VAR_STOP() { return GetToken(AutoStepParser.STATEMENT_VAR_STOP, 0); }
		public StatementVariableContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementBlockWsContext : StatementSectionContext {
		public ITerminalNode STATEMENT_WS() { return GetToken(AutoStepParser.STATEMENT_WS, 0); }
		public StatementBlockWsContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementBlockWs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementBlockWs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlockWs(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementDoubleQuoteContext : StatementSectionContext {
		public ITerminalNode STATEMENT_DOUBLE_QUOTE() { return GetToken(AutoStepParser.STATEMENT_DOUBLE_QUOTE, 0); }
		public StatementDoubleQuoteContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementDoubleQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementDoubleQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDoubleQuote(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementColonContext : StatementSectionContext {
		public ITerminalNode STATEMENT_COLON() { return GetToken(AutoStepParser.STATEMENT_COLON, 0); }
		public StatementColonContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementColon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementColon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementColon(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementWordContext : StatementSectionContext {
		public ITerminalNode STATEMENT_WORD() { return GetToken(AutoStepParser.STATEMENT_WORD, 0); }
		public StatementWordContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWord(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementFloatContext : StatementSectionContext {
		public ITerminalNode STATEMENT_FLOAT() { return GetToken(AutoStepParser.STATEMENT_FLOAT, 0); }
		public StatementFloatContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementInterpolateContext : StatementSectionContext {
		public ITerminalNode STATEMENT_COLON() { return GetToken(AutoStepParser.STATEMENT_COLON, 0); }
		public ITerminalNode STATEMENT_WORD() { return GetToken(AutoStepParser.STATEMENT_WORD, 0); }
		public StatementInterpolateContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementInterpolate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementInterpolate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInterpolate(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementQuoteContext : StatementSectionContext {
		public ITerminalNode STATEMENT_QUOTE() { return GetToken(AutoStepParser.STATEMENT_QUOTE, 0); }
		public StatementQuoteContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementQuote(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementIntContext : StatementSectionContext {
		public ITerminalNode STATEMENT_INT() { return GetToken(AutoStepParser.STATEMENT_INT, 0); }
		public StatementIntContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSectionContext statementSection() {
		StatementSectionContext _localctx = new StatementSectionContext(Context, State);
		EnterRule(_localctx, 54, RULE_statementSection);
		int _la;
		try {
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				_localctx = new StatementQuoteContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 309; Match(STATEMENT_QUOTE);
				}
				break;
			case 2:
				_localctx = new StatementDoubleQuoteContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; Match(STATEMENT_DOUBLE_QUOTE);
				}
				break;
			case 3:
				_localctx = new StatementVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 311; Match(STATEMENT_VAR_START);
				State = 312; statementVariableName();
				State = 313; Match(STATEMENT_VAR_STOP);
				}
				break;
			case 4:
				_localctx = new StatementEscapedCharContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 315;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STATEMENT_ESCAPED_QUOTE) | (1L << STATEMENT_ESCAPED_DBLQUOTE) | (1L << STATEMENT_ESCAPED_VARSTART) | (1L << STATEMENT_ESCAPED_VAREND))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				_localctx = new StatementIntContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 316; Match(STATEMENT_INT);
				}
				break;
			case 6:
				_localctx = new StatementFloatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 317; Match(STATEMENT_FLOAT);
				}
				break;
			case 7:
				_localctx = new StatementInterpolateContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 318; Match(STATEMENT_COLON);
				State = 319; Match(STATEMENT_WORD);
				}
				break;
			case 8:
				_localctx = new StatementColonContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 320; Match(STATEMENT_COLON);
				}
				break;
			case 9:
				_localctx = new StatementWordContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 321; Match(STATEMENT_WORD);
				}
				break;
			case 10:
				_localctx = new StatementVarUnmatchedContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 322;
				_la = TokenStream.LA(1);
				if ( !(_la==STATEMENT_VAR_START || _la==STATEMENT_VAR_STOP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new StatementBlockWsContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 323; Match(STATEMENT_WS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementVariableNameContext : ParserRuleContext {
		public StatementVarPhraseContext[] statementVarPhrase() {
			return GetRuleContexts<StatementVarPhraseContext>();
		}
		public StatementVarPhraseContext statementVarPhrase(int i) {
			return GetRuleContext<StatementVarPhraseContext>(i);
		}
		public ITerminalNode[] STATEMENT_WS() { return GetTokens(AutoStepParser.STATEMENT_WS); }
		public ITerminalNode STATEMENT_WS(int i) {
			return GetToken(AutoStepParser.STATEMENT_WS, i);
		}
		public StatementVariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementVariableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementVariableNameContext statementVariableName() {
		StatementVariableNameContext _localctx = new StatementVariableNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_statementVariableName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; statementVarPhrase();
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STATEMENT_WS) {
				{
				{
				State = 327; Match(STATEMENT_WS);
				State = 328; statementVarPhrase();
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementVarPhraseContext : ParserRuleContext {
		public ITerminalNode[] STATEMENT_WORD() { return GetTokens(AutoStepParser.STATEMENT_WORD); }
		public ITerminalNode STATEMENT_WORD(int i) {
			return GetToken(AutoStepParser.STATEMENT_WORD, i);
		}
		public ITerminalNode[] STATEMENT_INT() { return GetTokens(AutoStepParser.STATEMENT_INT); }
		public ITerminalNode STATEMENT_INT(int i) {
			return GetToken(AutoStepParser.STATEMENT_INT, i);
		}
		public StatementVarPhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementVarPhrase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementVarPhrase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementVarPhrase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementVarPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementVarPhraseContext statementVarPhrase() {
		StatementVarPhraseContext _localctx = new StatementVarPhraseContext(Context, State);
		EnterRule(_localctx, 58, RULE_statementVarPhrase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 334;
				_la = TokenStream.LA(1);
				if ( !(_la==STATEMENT_INT || _la==STATEMENT_WORD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STATEMENT_INT || _la==STATEMENT_WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExamplesContext : ParserRuleContext {
		public ExampleBlockContext[] exampleBlock() {
			return GetRuleContexts<ExampleBlockContext>();
		}
		public ExampleBlockContext exampleBlock(int i) {
			return GetRuleContext<ExampleBlockContext>(i);
		}
		public ExamplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_examples; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterExamples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitExamples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExamples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExamplesContext examples() {
		ExamplesContext _localctx = new ExamplesContext(Context, State);
		EnterRule(_localctx, 60, RULE_examples);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 339; exampleBlock();
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExampleBlockContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public ITerminalNode EXAMPLES() { return GetToken(AutoStepParser.EXAMPLES, 0); }
		public TableBlockContext tableBlock() {
			return GetRuleContext<TableBlockContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public ExampleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exampleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterExampleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitExampleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExampleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExampleBlockContext exampleBlock() {
		ExampleBlockContext _localctx = new ExampleBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_exampleBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; annotations();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 346; Match(WS);
				}
			}

			State = 349; Match(EXAMPLES);
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 350; Match(NEWLINE);
				}
				}
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NEWLINE );
			State = 355; tableBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableBlockContext : ParserRuleContext {
		public TableHeaderContext tableHeader() {
			return GetRuleContext<TableHeaderContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TableRowContext[] tableRow() {
			return GetRuleContexts<TableRowContext>();
		}
		public TableRowContext tableRow(int i) {
			return GetRuleContext<TableRowContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public TableBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableBlockContext tableBlock() {
		TableBlockContext _localctx = new TableBlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_tableBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 357; Match(WS);
				}
			}

			State = 360; tableHeader();
			State = 368;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 366;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
					case TABLE_START:
					case CELL_DELIMITER:
						{
						State = 362;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 361; Match(WS);
							}
						}

						State = 364; tableRow();
						}
						break;
					case NEWLINE:
						{
						State = 365; Match(NEWLINE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 370;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableHeaderContext : ParserRuleContext {
		public ITerminalNode CELL_DELIMITER() { return GetToken(AutoStepParser.CELL_DELIMITER, 0); }
		public ITerminalNode ROW_NL() { return GetToken(AutoStepParser.ROW_NL, 0); }
		public TableHeaderCellContext[] tableHeaderCell() {
			return GetRuleContexts<TableHeaderCellContext>();
		}
		public TableHeaderCellContext tableHeaderCell(int i) {
			return GetRuleContext<TableHeaderCellContext>(i);
		}
		public TableHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableHeaderContext tableHeader() {
		TableHeaderContext _localctx = new TableHeaderContext(Context, State);
		EnterRule(_localctx, 66, RULE_tableHeader);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 371; tableHeaderCell();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 374;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 376; Match(CELL_DELIMITER);
			State = 377; Match(ROW_NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableHeaderCellContext : ParserRuleContext {
		public ITerminalNode TABLE_START() { return GetToken(AutoStepParser.TABLE_START, 0); }
		public ITerminalNode CELL_DELIMITER() { return GetToken(AutoStepParser.CELL_DELIMITER, 0); }
		public ITerminalNode[] CELL_WS() { return GetTokens(AutoStepParser.CELL_WS); }
		public ITerminalNode CELL_WS(int i) {
			return GetToken(AutoStepParser.CELL_WS, i);
		}
		public CellVariableNameContext cellVariableName() {
			return GetRuleContext<CellVariableNameContext>(0);
		}
		public TableHeaderCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableHeaderCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableHeaderCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableHeaderCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableHeaderCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableHeaderCellContext tableHeaderCell() {
		TableHeaderCellContext _localctx = new TableHeaderCellContext(Context, State);
		EnterRule(_localctx, 68, RULE_tableHeaderCell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE_START || _la==CELL_DELIMITER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 380; Match(CELL_WS);
				}
				break;
			}
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CELL_WORD || _la==CELL_INT) {
				{
				State = 383; cellVariableName();
				}
			}

			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CELL_WS) {
				{
				State = 386; Match(CELL_WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableRowContext : ParserRuleContext {
		public ITerminalNode CELL_DELIMITER() { return GetToken(AutoStepParser.CELL_DELIMITER, 0); }
		public ITerminalNode ROW_NL() { return GetToken(AutoStepParser.ROW_NL, 0); }
		public TableRowCellContext[] tableRowCell() {
			return GetRuleContexts<TableRowCellContext>();
		}
		public TableRowCellContext tableRowCell(int i) {
			return GetRuleContext<TableRowCellContext>(i);
		}
		public TableRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRow; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowContext tableRow() {
		TableRowContext _localctx = new TableRowContext(Context, State);
		EnterRule(_localctx, 70, RULE_tableRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 389; tableRowCell();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 394; Match(CELL_DELIMITER);
			State = 395; Match(ROW_NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableRowCellContext : ParserRuleContext {
		public ITerminalNode TABLE_START() { return GetToken(AutoStepParser.TABLE_START, 0); }
		public ITerminalNode CELL_DELIMITER() { return GetToken(AutoStepParser.CELL_DELIMITER, 0); }
		public ITerminalNode[] CELL_WS() { return GetTokens(AutoStepParser.CELL_WS); }
		public ITerminalNode CELL_WS(int i) {
			return GetToken(AutoStepParser.CELL_WS, i);
		}
		public TableRowCellContentContext tableRowCellContent() {
			return GetRuleContext<TableRowCellContentContext>(0);
		}
		public TableRowCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableRowCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableRowCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowCellContext tableRowCell() {
		TableRowCellContext _localctx = new TableRowCellContext(Context, State);
		EnterRule(_localctx, 72, RULE_tableRowCell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE_START || _la==CELL_DELIMITER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 398; Match(CELL_WS);
				}
				break;
			}
			State = 402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 401; tableRowCellContent();
				}
				break;
			}
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CELL_WS) {
				{
				State = 404; Match(CELL_WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableRowCellContentContext : ParserRuleContext {
		public CellContentBlockContext[] cellContentBlock() {
			return GetRuleContexts<CellContentBlockContext>();
		}
		public CellContentBlockContext cellContentBlock(int i) {
			return GetRuleContext<CellContentBlockContext>(i);
		}
		public ITerminalNode[] CELL_WS() { return GetTokens(AutoStepParser.CELL_WS); }
		public ITerminalNode CELL_WS(int i) {
			return GetToken(AutoStepParser.CELL_WS, i);
		}
		public TableRowCellContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowCellContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableRowCellContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableRowCellContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowCellContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowCellContentContext tableRowCellContent() {
		TableRowCellContentContext _localctx = new TableRowCellContentContext(Context, State);
		EnterRule(_localctx, 74, RULE_tableRowCellContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CELL_WS) {
						{
						State = 407; Match(CELL_WS);
						}
					}

					State = 410; cellContentBlock();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 413;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class CellContentBlockContext : ParserRuleContext {
		public CellContentBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellContentBlock; } }
	 
		public CellContentBlockContext() { }
		public virtual void CopyFrom(CellContentBlockContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class CellColonContext : CellContentBlockContext {
		public ITerminalNode CELL_COLON() { return GetToken(AutoStepParser.CELL_COLON, 0); }
		public CellColonContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellColon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellColon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellColon(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellEscapedCharContext : CellContentBlockContext {
		public ITerminalNode CELL_ESCAPED_DELIMITER() { return GetToken(AutoStepParser.CELL_ESCAPED_DELIMITER, 0); }
		public ITerminalNode CELL_ESCAPED_VARSTART() { return GetToken(AutoStepParser.CELL_ESCAPED_VARSTART, 0); }
		public ITerminalNode CELL_ESCAPED_VAREND() { return GetToken(AutoStepParser.CELL_ESCAPED_VAREND, 0); }
		public CellEscapedCharContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellEscapedChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellEscapedChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellEscapedChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellVariableContext : CellContentBlockContext {
		public ITerminalNode CELL_VAR_START() { return GetToken(AutoStepParser.CELL_VAR_START, 0); }
		public CellVariableNameContext cellVariableName() {
			return GetRuleContext<CellVariableNameContext>(0);
		}
		public ITerminalNode CELL_VAR_STOP() { return GetToken(AutoStepParser.CELL_VAR_STOP, 0); }
		public CellVariableContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellInterpolateContext : CellContentBlockContext {
		public ITerminalNode CELL_COLON() { return GetToken(AutoStepParser.CELL_COLON, 0); }
		public ITerminalNode CELL_WORD() { return GetToken(AutoStepParser.CELL_WORD, 0); }
		public CellInterpolateContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellInterpolate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellInterpolate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellInterpolate(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellIntContext : CellContentBlockContext {
		public ITerminalNode CELL_INT() { return GetToken(AutoStepParser.CELL_INT, 0); }
		public CellIntContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellWordContext : CellContentBlockContext {
		public ITerminalNode CELL_WORD() { return GetToken(AutoStepParser.CELL_WORD, 0); }
		public CellWordContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellWord(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellFloatContext : CellContentBlockContext {
		public ITerminalNode CELL_FLOAT() { return GetToken(AutoStepParser.CELL_FLOAT, 0); }
		public CellFloatContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellContentBlockContext cellContentBlock() {
		CellContentBlockContext _localctx = new CellContentBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_cellContentBlock);
		int _la;
		try {
			State = 426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				_localctx = new CellEscapedCharContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 415;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CELL_ESCAPED_VARSTART) | (1L << CELL_ESCAPED_VAREND) | (1L << CELL_ESCAPED_DELIMITER))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				_localctx = new CellVariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; Match(CELL_VAR_START);
				State = 417; cellVariableName();
				State = 418; Match(CELL_VAR_STOP);
				}
				break;
			case 3:
				_localctx = new CellIntContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 420; Match(CELL_INT);
				}
				break;
			case 4:
				_localctx = new CellFloatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 421; Match(CELL_FLOAT);
				}
				break;
			case 5:
				_localctx = new CellInterpolateContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 422; Match(CELL_COLON);
				State = 423; Match(CELL_WORD);
				}
				break;
			case 6:
				_localctx = new CellColonContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 424; Match(CELL_COLON);
				}
				break;
			case 7:
				_localctx = new CellWordContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 425; Match(CELL_WORD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class CellVariableNameContext : ParserRuleContext {
		public CellVarPhraseContext[] cellVarPhrase() {
			return GetRuleContexts<CellVarPhraseContext>();
		}
		public CellVarPhraseContext cellVarPhrase(int i) {
			return GetRuleContext<CellVarPhraseContext>(i);
		}
		public ITerminalNode[] CELL_WS() { return GetTokens(AutoStepParser.CELL_WS); }
		public ITerminalNode CELL_WS(int i) {
			return GetToken(AutoStepParser.CELL_WS, i);
		}
		public CellVariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellVariableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellVariableNameContext cellVariableName() {
		CellVariableNameContext _localctx = new CellVariableNameContext(Context, State);
		EnterRule(_localctx, 78, RULE_cellVariableName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; cellVarPhrase();
			State = 433;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 429; Match(CELL_WS);
					State = 430; cellVarPhrase();
					}
					} 
				}
				State = 435;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class CellVarPhraseContext : ParserRuleContext {
		public ITerminalNode[] CELL_WORD() { return GetTokens(AutoStepParser.CELL_WORD); }
		public ITerminalNode CELL_WORD(int i) {
			return GetToken(AutoStepParser.CELL_WORD, i);
		}
		public ITerminalNode[] CELL_INT() { return GetTokens(AutoStepParser.CELL_INT); }
		public ITerminalNode CELL_INT(int i) {
			return GetToken(AutoStepParser.CELL_INT, i);
		}
		public CellVarPhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellVarPhrase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellVarPhrase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellVarPhrase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellVarPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellVarPhraseContext cellVarPhrase() {
		CellVarPhraseContext _localctx = new CellVarPhraseContext(Context, State);
		EnterRule(_localctx, 80, RULE_cellVarPhrase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 436;
				_la = TokenStream.LA(1);
				if ( !(_la==CELL_WORD || _la==CELL_INT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CELL_WORD || _la==CELL_INT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TextContext : ParserRuleContext {
		public ITerminalNode[] WORD() { return GetTokens(AutoStepParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AutoStepParser.WORD, i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 82, RULE_text);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 441; Match(WS);
						}
					}

					State = 444; Match(WORD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LineContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 84, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 449; Match(WS);
				}
				break;
			}
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORD || _la==WS) {
				{
				State = 452; text();
				}
			}

			State = 455; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class DescriptionContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 86, RULE_description);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 457; Match(NEWLINE);
					}
					} 
				}
				State = 462;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			State = 464;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 463; line();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 466;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 471;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 468; Match(NEWLINE);
					}
					} 
				}
				State = 473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class OnlyLineContext : ParserRuleContext {
		public OnlyLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onlyLine; } }
	 
		public OnlyLineContext() { }
		public virtual void CopyFrom(OnlyLineContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class LineTableRowContext : OnlyLineContext {
		public ITerminalNode CELL_DELIMITER() { return GetToken(AutoStepParser.CELL_DELIMITER, 0); }
		public ITerminalNode ROW_NL() { return GetToken(AutoStepParser.ROW_NL, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public TableRowCellContext[] tableRowCell() {
			return GetRuleContexts<TableRowCellContext>();
		}
		public TableRowCellContext tableRowCell(int i) {
			return GetRuleContext<TableRowCellContext>(i);
		}
		public LineTableRowContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineTableRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineTableRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTableRow(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineThenContext : OnlyLineContext {
		public ITerminalNode THEN() { return GetToken(AutoStepParser.THEN, 0); }
		public ITerminalNode STATEMENT_NEWLINE() { return GetToken(AutoStepParser.STATEMENT_NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public LineThenContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineScenarioContext : OnlyLineContext {
		public ITerminalNode SCENARIO() { return GetToken(AutoStepParser.SCENARIO, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineScenarioContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineScenario(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineScenario(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineScenario(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineAndContext : OnlyLineContext {
		public ITerminalNode AND() { return GetToken(AutoStepParser.AND, 0); }
		public ITerminalNode STATEMENT_NEWLINE() { return GetToken(AutoStepParser.STATEMENT_NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public LineAndContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineBackgroundContext : OnlyLineContext {
		public ITerminalNode BACKGROUND() { return GetToken(AutoStepParser.BACKGROUND, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public LineBackgroundContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineBackground(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineBackground(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineBackground(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineTagContext : OnlyLineContext {
		public ITerminalNode TAG() { return GetToken(AutoStepParser.TAG, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public LineTagContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTag(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineStepDefineContext : OnlyLineContext {
		public ITerminalNode STEP_DEFINE() { return GetToken(AutoStepParser.STEP_DEFINE, 0); }
		public StepDeclarationContext stepDeclaration() {
			return GetRuleContext<StepDeclarationContext>(0);
		}
		public ITerminalNode DEF_NEWLINE() { return GetToken(AutoStepParser.DEF_NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public ITerminalNode DEF_WS() { return GetToken(AutoStepParser.DEF_WS, 0); }
		public LineStepDefineContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineStepDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineStepDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStepDefine(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineGivenContext : OnlyLineContext {
		public ITerminalNode GIVEN() { return GetToken(AutoStepParser.GIVEN, 0); }
		public ITerminalNode STATEMENT_NEWLINE() { return GetToken(AutoStepParser.STATEMENT_NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public LineGivenContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineGiven(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineGiven(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineGiven(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineOptContext : OnlyLineContext {
		public ITerminalNode OPTION() { return GetToken(AutoStepParser.OPTION, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public LineOptContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineOpt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineOpt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineOpt(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineWhenContext : OnlyLineContext {
		public ITerminalNode WHEN() { return GetToken(AutoStepParser.WHEN, 0); }
		public ITerminalNode STATEMENT_NEWLINE() { return GetToken(AutoStepParser.STATEMENT_NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public LineWhenContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWhen(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineFeatureContext : OnlyLineContext {
		public ITerminalNode FEATURE() { return GetToken(AutoStepParser.FEATURE, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineFeatureContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineFeature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineFeature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFeature(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineScenarioOutlineContext : OnlyLineContext {
		public ITerminalNode SCENARIO_OUTLINE() { return GetToken(AutoStepParser.SCENARIO_OUTLINE, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineScenarioOutlineContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineScenarioOutline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineScenarioOutline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineScenarioOutline(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineTextContext : OnlyLineContext {
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineTextContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineText(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineExamplesContext : OnlyLineContext {
		public ITerminalNode EXAMPLES() { return GetToken(AutoStepParser.EXAMPLES, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public LineExamplesContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineExamples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineExamples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineExamples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnlyLineContext onlyLine() {
		OnlyLineContext _localctx = new OnlyLineContext(Context, State);
		EnterRule(_localctx, 88, RULE_onlyLine);
		int _la;
		try {
			int _alt;
			State = 588;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				_localctx = new LineTagContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 474; Match(WS);
					}
				}

				State = 477; Match(TAG);
				State = 478; lineTerm();
				}
				break;
			case 2:
				_localctx = new LineOptContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 479; Match(WS);
					}
				}

				State = 482; Match(OPTION);
				State = 483; lineTerm();
				}
				break;
			case 3:
				_localctx = new LineStepDefineContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 484; Match(WS);
					}
				}

				State = 487; Match(STEP_DEFINE);
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEF_WS) {
					{
					State = 488; Match(DEF_WS);
					}
				}

				State = 491; stepDeclaration();
				State = 492; Match(DEF_NEWLINE);
				}
				break;
			case 4:
				_localctx = new LineFeatureContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 494; Match(WS);
					}
				}

				State = 497; Match(FEATURE);
				State = 499;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 498; Match(WS);
					}
					break;
				}
				State = 502;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 501; text();
					}
					break;
				}
				State = 504; lineTerm();
				}
				break;
			case 5:
				_localctx = new LineBackgroundContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 505; Match(WS);
					}
				}

				State = 508; Match(BACKGROUND);
				State = 509; lineTerm();
				}
				break;
			case 6:
				_localctx = new LineScenarioContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 510; Match(WS);
					}
				}

				State = 513; Match(SCENARIO);
				State = 515;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 514; Match(WS);
					}
					break;
				}
				State = 518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 517; text();
					}
					break;
				}
				State = 520; lineTerm();
				}
				break;
			case 7:
				_localctx = new LineScenarioOutlineContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 521; Match(WS);
					}
				}

				State = 524; Match(SCENARIO_OUTLINE);
				State = 526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 525; Match(WS);
					}
					break;
				}
				State = 529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
				case 1:
					{
					State = 528; text();
					}
					break;
				}
				State = 531; lineTerm();
				}
				break;
			case 8:
				_localctx = new LineExamplesContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 532; Match(WS);
					}
				}

				State = 535; Match(EXAMPLES);
				State = 536; Match(NEWLINE);
				State = 537; lineTerm();
				}
				break;
			case 9:
				_localctx = new LineTableRowContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 538; Match(WS);
					}
				}

				State = 542;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 541; tableRowCell();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 544;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 546; Match(CELL_DELIMITER);
				State = 547; Match(ROW_NL);
				}
				break;
			case 10:
				_localctx = new LineGivenContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 549; Match(WS);
					}
				}

				State = 552; Match(GIVEN);
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STATEMENT_ESCAPED_QUOTE) | (1L << STATEMENT_ESCAPED_DBLQUOTE) | (1L << STATEMENT_ESCAPED_VARSTART) | (1L << STATEMENT_ESCAPED_VAREND) | (1L << STATEMENT_VAR_START) | (1L << STATEMENT_VAR_STOP) | (1L << STATEMENT_QUOTE) | (1L << STATEMENT_DOUBLE_QUOTE) | (1L << STATEMENT_FLOAT) | (1L << STATEMENT_INT) | (1L << STATEMENT_COLON) | (1L << STATEMENT_WS) | (1L << STATEMENT_WORD))) != 0)) {
					{
					State = 553; statementBody();
					}
				}

				State = 556; Match(STATEMENT_NEWLINE);
				}
				break;
			case 11:
				_localctx = new LineWhenContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 557; Match(WS);
					}
				}

				State = 560; Match(WHEN);
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STATEMENT_ESCAPED_QUOTE) | (1L << STATEMENT_ESCAPED_DBLQUOTE) | (1L << STATEMENT_ESCAPED_VARSTART) | (1L << STATEMENT_ESCAPED_VAREND) | (1L << STATEMENT_VAR_START) | (1L << STATEMENT_VAR_STOP) | (1L << STATEMENT_QUOTE) | (1L << STATEMENT_DOUBLE_QUOTE) | (1L << STATEMENT_FLOAT) | (1L << STATEMENT_INT) | (1L << STATEMENT_COLON) | (1L << STATEMENT_WS) | (1L << STATEMENT_WORD))) != 0)) {
					{
					State = 561; statementBody();
					}
				}

				State = 564; Match(STATEMENT_NEWLINE);
				}
				break;
			case 12:
				_localctx = new LineThenContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 565; Match(WS);
					}
				}

				State = 568; Match(THEN);
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STATEMENT_ESCAPED_QUOTE) | (1L << STATEMENT_ESCAPED_DBLQUOTE) | (1L << STATEMENT_ESCAPED_VARSTART) | (1L << STATEMENT_ESCAPED_VAREND) | (1L << STATEMENT_VAR_START) | (1L << STATEMENT_VAR_STOP) | (1L << STATEMENT_QUOTE) | (1L << STATEMENT_DOUBLE_QUOTE) | (1L << STATEMENT_FLOAT) | (1L << STATEMENT_INT) | (1L << STATEMENT_COLON) | (1L << STATEMENT_WS) | (1L << STATEMENT_WORD))) != 0)) {
					{
					State = 569; statementBody();
					}
				}

				State = 572; Match(STATEMENT_NEWLINE);
				}
				break;
			case 13:
				_localctx = new LineAndContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 573; Match(WS);
					}
				}

				State = 576; Match(AND);
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STATEMENT_ESCAPED_QUOTE) | (1L << STATEMENT_ESCAPED_DBLQUOTE) | (1L << STATEMENT_ESCAPED_VARSTART) | (1L << STATEMENT_ESCAPED_VAREND) | (1L << STATEMENT_VAR_START) | (1L << STATEMENT_VAR_STOP) | (1L << STATEMENT_QUOTE) | (1L << STATEMENT_DOUBLE_QUOTE) | (1L << STATEMENT_FLOAT) | (1L << STATEMENT_INT) | (1L << STATEMENT_COLON) | (1L << STATEMENT_WS) | (1L << STATEMENT_WORD))) != 0)) {
					{
					State = 577; statementBody();
					}
				}

				State = 580; Match(STATEMENT_NEWLINE);
				}
				break;
			case 14:
				_localctx = new LineTextContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 582;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 581; Match(WS);
					}
					break;
				}
				State = 585;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 584; text();
					}
					break;
				}
				State = 587; lineTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LineTermContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineTermContext lineTerm() {
		LineTermContext _localctx = new LineTermContext(Context, State);
		EnterRule(_localctx, 90, RULE_lineTerm);
		int _la;
		try {
			State = 595;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 590; Match(NEWLINE);
				}
				break;
			case Eof:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 591; Match(WS);
					}
				}

				State = 594; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '<', '\x258', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x3', '\x2', '\a', '\x2', '`', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x63', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', 'g', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', 'h', '\x3', '\x2', '\x5', '\x2', 'l', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x5', '\x4', 'u', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', 'y', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '~', '\n', '\x4', '\x3', '\x5', '\a', 
		'\x5', '\x81', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x84', '\v', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x8C', '\n', '\x6', '\x3', '\a', '\x6', '\a', 
		'\x8F', '\n', '\a', '\r', '\a', '\xE', '\a', '\x90', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x98', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x9D', '\n', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xA7', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xAC', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\a', '\xE', '\xB1', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xB4', '\v', '\xE', '\x3', '\xF', '\x5', '\xF', 
		'\xB7', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xBC', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\xC1', '\n', '\xF', '\x3', '\x10', '\x5', '\x10', '\xC4', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xC9', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xCD', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\a', '\x12', 
		'\xD2', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xD5', '\v', '\x12', 
		'\x3', '\x13', '\x5', '\x13', '\xD8', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\a', '\x14', '\xDF', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xE2', '\v', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x5', '\x16', '\xEA', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\xEF', '\n', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\xF3', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\xF8', '\n', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\xFB', '\n', '\x17', '\x3', '\x18', '\a', '\x18', '\xFE', '\n', 
		'\x18', '\f', '\x18', '\xE', '\x18', '\x101', '\v', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x105', '\n', '\x19', '\x3', '\x1A', '\x5', 
		'\x1A', '\x108', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\a', '\x1A', '\x10D', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x110', 
		'\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x115', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x11B', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x11F', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x123', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x131', '\n', '\x1B', '\x3', '\x1C', '\x6', '\x1C', '\x134', '\n', '\x1C', 
		'\r', '\x1C', '\xE', '\x1C', '\x135', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x147', '\n', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x14C', '\n', 
		'\x1E', '\f', '\x1E', '\xE', '\x1E', '\x14F', '\v', '\x1E', '\x3', '\x1F', 
		'\x6', '\x1F', '\x152', '\n', '\x1F', '\r', '\x1F', '\xE', '\x1F', '\x153', 
		'\x3', ' ', '\a', ' ', '\x157', '\n', ' ', '\f', ' ', '\xE', ' ', '\x15A', 
		'\v', ' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x15E', '\n', '!', '\x3', 
		'!', '\x3', '!', '\x6', '!', '\x162', '\n', '!', '\r', '!', '\xE', '!', 
		'\x163', '\x3', '!', '\x3', '!', '\x3', '\"', '\x5', '\"', '\x169', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x16D', '\n', '\"', '\x3', 
		'\"', '\x3', '\"', '\a', '\"', '\x171', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x174', '\v', '\"', '\x3', '#', '\x6', '#', '\x177', '\n', '#', 
		'\r', '#', '\xE', '#', '\x178', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'$', '\x3', '$', '\x5', '$', '\x180', '\n', '$', '\x3', '$', '\x5', '$', 
		'\x183', '\n', '$', '\x3', '$', '\x5', '$', '\x186', '\n', '$', '\x3', 
		'%', '\x6', '%', '\x189', '\n', '%', '\r', '%', '\xE', '%', '\x18A', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x5', '&', '\x192', 
		'\n', '&', '\x3', '&', '\x5', '&', '\x195', '\n', '&', '\x3', '&', '\x5', 
		'&', '\x198', '\n', '&', '\x3', '\'', '\x5', '\'', '\x19B', '\n', '\'', 
		'\x3', '\'', '\x6', '\'', '\x19E', '\n', '\'', '\r', '\'', '\xE', '\'', 
		'\x19F', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', 
		'(', '\x1AD', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\a', ')', 
		'\x1B2', '\n', ')', '\f', ')', '\xE', ')', '\x1B5', '\v', ')', '\x3', 
		'*', '\x6', '*', '\x1B8', '\n', '*', '\r', '*', '\xE', '*', '\x1B9', '\x3', 
		'+', '\x5', '+', '\x1BD', '\n', '+', '\x3', '+', '\x6', '+', '\x1C0', 
		'\n', '+', '\r', '+', '\xE', '+', '\x1C1', '\x3', ',', '\x5', ',', '\x1C5', 
		'\n', ',', '\x3', ',', '\x5', ',', '\x1C8', '\n', ',', '\x3', ',', '\x3', 
		',', '\x3', '-', '\a', '-', '\x1CD', '\n', '-', '\f', '-', '\xE', '-', 
		'\x1D0', '\v', '-', '\x3', '-', '\x6', '-', '\x1D3', '\n', '-', '\r', 
		'-', '\xE', '-', '\x1D4', '\x3', '-', '\a', '-', '\x1D8', '\n', '-', '\f', 
		'-', '\xE', '-', '\x1DB', '\v', '-', '\x3', '.', '\x5', '.', '\x1DE', 
		'\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x1E3', '\n', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x1E8', '\n', '.', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x1EC', '\n', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x1F2', '\n', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x1F6', '\n', '.', '\x3', '.', '\x5', '.', '\x1F9', 
		'\n', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x1FD', '\n', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x202', '\n', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x206', '\n', '.', '\x3', '.', '\x5', '.', '\x209', 
		'\n', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x20D', '\n', '.', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x211', '\n', '.', '\x3', '.', '\x5', '.', 
		'\x214', '\n', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x218', '\n', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x21E', 
		'\n', '.', '\x3', '.', '\x6', '.', '\x221', '\n', '.', '\r', '.', '\xE', 
		'.', '\x222', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', 
		'\x229', '\n', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x22D', '\n', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x231', '\n', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x235', '\n', '.', '\x3', '.', '\x3', '.', '\x5', 
		'.', '\x239', '\n', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x23D', 
		'\n', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x241', '\n', '.', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x245', '\n', '.', '\x3', '.', '\x3', '.', 
		'\x5', '.', '\x249', '\n', '.', '\x3', '.', '\x5', '.', '\x24C', '\n', 
		'.', '\x3', '.', '\x5', '.', '\x24F', '\n', '.', '\x3', '/', '\x3', '/', 
		'\x5', '/', '\x253', '\n', '/', '\x3', '/', '\x5', '/', '\x256', '\n', 
		'/', '\x3', '/', '\x2', '\x2', '\x30', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '\x2', '\t', '\x3', '\x2', '\'', '(', 
		'\x3', '\x2', '\x15', '\x18', '\x3', '\x2', '\x19', '\x1A', '\x4', '\x2', 
		'\x1F', '\x1F', '\"', '\"', '\x4', '\x2', '\x14', '\x14', '\x39', '\x39', 
		'\x4', '\x2', '\x30', '\x31', '\x38', '\x38', '\x4', '\x2', '\x34', '\x34', 
		'\x36', '\x36', '\x2', '\x2AD', '\x2', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'o', '\x3', '\x2', '\x2', '\x2', '\x6', 't', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x82', '\x3', '\x2', '\x2', '\x2', '\n', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x8E', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x10', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xC0', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xCA', '\x3', '\x2', '\x2', '\x2', '\"', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xD7', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '(', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xE9', '\x3', '\x2', '\x2', '\x2', ',', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x30', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x130', '\x3', '\x2', '\x2', '\x2', '\x36', '\x133', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x146', '\x3', '\x2', '\x2', '\x2', ':', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x158', '\x3', '\x2', '\x2', '\x2', '@', '\x15B', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x168', '\x3', '\x2', '\x2', '\x2', '\x44', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x188', '\x3', '\x2', '\x2', '\x2', 'J', '\x18F', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x19D', '\x3', '\x2', '\x2', '\x2', 'N', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1B7', '\x3', '\x2', '\x2', '\x2', 'T', '\x1BF', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1C4', '\x3', '\x2', '\x2', '\x2', 'X', '\x1CE', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x24E', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x255', '\x3', '\x2', '\x2', '\x2', '^', '`', '\a', '\xF', '\x2', 
		'\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x5', '\x18', 
		'\r', '\x2', '\x65', 'g', '\x5', '\x4', '\x3', '\x2', '\x66', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'l', '\a', '\x11', '\x2', '\x2', 'k', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', '\x2', '\x2', '\x3', 'n', '\x3', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\x5', '\x1A', '\xE', '\x2', 'p', 'q', '\x5', 
		'\x6', '\x4', '\x2', 'q', 'r', '\x5', '\b', '\x5', '\x2', 'r', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 's', 'u', '\a', '\x11', '\x2', '\x2', 't', 
		's', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\a', '\a', '\x2', '\x2', 
		'w', 'y', '\a', ',', '\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x5', '\n', '\x6', '\x2', '{', '}', '\a', '+', '\x2', '\x2', 
		'|', '~', '\x5', 'X', '-', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', 
		'}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x81', '\x5', '\x30', '\x19', '\x2', '\x80', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\t', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x86', '\a', '$', '\x2', '\x2', '\x86', 
		'\x8C', '\x5', '\f', '\a', '\x2', '\x87', '\x88', '\a', '%', '\x2', '\x2', 
		'\x88', '\x8C', '\x5', '\f', '\a', '\x2', '\x89', '\x8A', '\a', '&', '\x2', 
		'\x2', '\x8A', '\x8C', '\x5', '\f', '\a', '\x2', '\x8B', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8F', '\x5', '\xE', '\b', '\x2', '\x8E', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\r', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', 
		')', '\x2', '\x2', '\x93', '\x94', '\x5', '\x10', '\t', '\x2', '\x94', 
		'\x95', '\a', '*', '\x2', '\x2', '\x95', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x98', '\x5', '\x16', '\f', '\x2', '\x97', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\x5', '\x12', '\n', 
		'\x2', '\x9A', '\x9B', '\a', '-', '\x2', '\x2', '\x9B', '\x9D', '\x5', 
		'\x14', '\v', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '.', '\x2', '\x2', '\x9F', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '.', '\x2', '\x2', '\xA1', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA7', '\a', '.', '\x2', 
		'\x2', '\xA3', '\xA7', '\t', '\x2', '\x2', '\x2', '\xA4', '\xA7', '\a', 
		',', '\x2', '\x2', '\xA5', '\xA7', '\a', '-', '\x2', '\x2', '\xA6', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', 
		'\x5', '\x1A', '\xE', '\x2', '\xA9', '\xAB', '\x5', '\x1E', '\x10', '\x2', 
		'\xAA', '\xAC', '\x5', '$', '\x13', '\x2', '\xAB', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\"', '\x12', '\x2', 
		'\xAE', '\x19', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\x5', '\x1C', 
		'\xF', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB7', 
		'\a', '\x11', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB9', '\a', '\t', '\x2', '\x2', '\xB9', '\xC1', 
		'\a', '\xF', '\x2', '\x2', '\xBA', '\xBC', '\a', '\x11', '\x2', '\x2', 
		'\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\a', '\n', '\x2', '\x2', '\xBE', '\xC1', '\a', '\xF', '\x2', '\x2', '\xBF', 
		'\xC1', '\a', '\xF', '\x2', '\x2', '\xC0', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC4', '\a', '\x11', '\x2', '\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC6', '\x5', ' ', '\x11', '\x2', '\xC6', 
		'\xC8', '\a', '\xF', '\x2', '\x2', '\xC7', '\xC9', '\x5', 'X', '-', '\x2', 
		'\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', 
		'\a', '\x3', '\x2', '\x2', '\xCB', '\xCD', '\a', '\x11', '\x2', '\x2', 
		'\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', 
		'\x5', 'T', '+', '\x2', '\xCF', '!', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD2', '\x5', '(', '\x15', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD8', '\a', '\x11', '\x2', '\x2', '\xD7', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', '\b', '\x2', 
		'\x2', '\xDA', '\xDB', '\a', '\xF', '\x2', '\x2', '\xDB', '\xDC', '\x5', 
		'&', '\x14', '\x2', '\xDC', '%', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDF', 
		'\x5', '\x30', '\x19', '\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xE4', '\x5', '\x1A', '\xE', '\x2', '\xE4', '\xE5', '\x5', '*', 
		'\x16', '\x2', '\xE5', '\xE6', '\x5', '.', '\x18', '\x2', '\xE6', '\xE7', 
		'\x5', '>', ' ', '\x2', '\xE7', ')', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xEA', '\a', '\x11', '\x2', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEC', '\x5', ',', '\x17', '\x2', '\xEC', 
		'\xEE', '\a', '\xF', '\x2', '\x2', '\xED', '\xEF', '\x5', 'X', '-', '\x2', 
		'\xEE', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '+', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF2', 
		'\a', '\x4', '\x2', '\x2', '\xF1', '\xF3', '\a', '\x11', '\x2', '\x2', 
		'\xF2', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xFB', 
		'\x5', 'T', '+', '\x2', '\xF5', '\xF7', '\a', '\x5', '\x2', '\x2', '\xF6', 
		'\xF8', '\a', '\x11', '\x2', '\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFB', '\x5', 'T', '+', '\x2', '\xFA', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '-', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\x5', '\x30', 
		'\x19', '\x2', '\xFD', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x105', 
		'\x5', '\x32', '\x1A', '\x2', '\x103', '\x105', '\a', '\xF', '\x2', '\x2', 
		'\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x31', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x108', '\a', '\x11', '\x2', '\x2', '\x107', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x5', '\x34', '\x1B', '\x2', 
		'\x10A', '\x10E', '\a', '\x1D', '\x2', '\x2', '\x10B', '\x10D', '\a', 
		'\xF', '\x2', '\x2', '\x10C', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\x5', '\x42', '\"', '\x2', '\x112', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x115', '\a', '\x11', '\x2', '\x2', '\x114', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x116', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', 
		'\x5', '\x34', '\x1B', '\x2', '\x117', '\x118', '\a', '\x1D', '\x2', '\x2', 
		'\x118', '\x123', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11B', '\a', 
		'\x11', '\x2', '\x2', '\x11A', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x11E', '\x5', '\x34', '\x1B', '\x2', '\x11D', '\x11F', 
		'\a', '\x11', '\x2', '\x2', '\x11E', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x121', '\a', '\x2', '\x2', '\x3', '\x121', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x122', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '\x114', '\x3', '\x2', '\x2', '\x2', '\x122', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x125', '\a', '\v', '\x2', '\x2', '\x125', '\x126', '\a', '!', 
		'\x2', '\x2', '\x126', '\x131', '\x5', '\x36', '\x1C', '\x2', '\x127', 
		'\x128', '\a', '\f', '\x2', '\x2', '\x128', '\x129', '\a', '!', '\x2', 
		'\x2', '\x129', '\x131', '\x5', '\x36', '\x1C', '\x2', '\x12A', '\x12B', 
		'\a', '\r', '\x2', '\x2', '\x12B', '\x12C', '\a', '!', '\x2', '\x2', '\x12C', 
		'\x131', '\x5', '\x36', '\x1C', '\x2', '\x12D', '\x12E', '\a', '\xE', 
		'\x2', '\x2', '\x12E', '\x12F', '\a', '!', '\x2', '\x2', '\x12F', '\x131', 
		'\x5', '\x36', '\x1C', '\x2', '\x130', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x127', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x132', '\x134', '\x5', '\x38', '\x1D', 
		'\x2', '\x133', '\x132', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x147', '\a', '\x1B', '\x2', '\x2', '\x138', 
		'\x147', '\a', '\x1C', '\x2', '\x2', '\x139', '\x13A', '\a', '\x19', '\x2', 
		'\x2', '\x13A', '\x13B', '\x5', ':', '\x1E', '\x2', '\x13B', '\x13C', 
		'\a', '\x1A', '\x2', '\x2', '\x13C', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x147', '\t', '\x3', '\x2', '\x2', '\x13E', '\x147', '\a', '\x1F', 
		'\x2', '\x2', '\x13F', '\x147', '\a', '\x1E', '\x2', '\x2', '\x140', '\x141', 
		'\a', ' ', '\x2', '\x2', '\x141', '\x147', '\a', '\"', '\x2', '\x2', '\x142', 
		'\x147', '\a', ' ', '\x2', '\x2', '\x143', '\x147', '\a', '\"', '\x2', 
		'\x2', '\x144', '\x147', '\t', '\x4', '\x2', '\x2', '\x145', '\x147', 
		'\a', '!', '\x2', '\x2', '\x146', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x138', '\x3', '\x2', '\x2', '\x2', '\x146', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '\x146', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x140', '\x3', '\x2', '\x2', '\x2', '\x146', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x39', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x14D', '\x5', '<', '\x1F', '\x2', '\x149', '\x14A', '\a', '!', '\x2', 
		'\x2', '\x14A', '\x14C', '\x5', '<', '\x1F', '\x2', '\x14B', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x14E', ';', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x150', '\x152', '\t', '\x5', '\x2', 
		'\x2', '\x151', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x153', '\x154', '\x3', '\x2', '\x2', '\x2', '\x154', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x155', '\x157', '\x5', '@', '!', '\x2', '\x156', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x158', '\x156', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '?', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x158', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15D', '\x5', '\x1A', 
		'\xE', '\x2', '\x15C', '\x15E', '\a', '\x11', '\x2', '\x2', '\x15D', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x161', '\a', 
		'\x6', '\x2', '\x2', '\x160', '\x162', '\a', '\xF', '\x2', '\x2', '\x161', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x161', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x166', '\x5', '\x42', '\"', '\x2', '\x166', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x169', '\a', '\x11', '\x2', '\x2', '\x168', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x172', 
		'\x5', '\x44', '#', '\x2', '\x16B', '\x16D', '\a', '\x11', '\x2', '\x2', 
		'\x16C', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x171', '\x5', 'H', '%', '\x2', '\x16F', '\x171', '\a', '\xF', '\x2', 
		'\x2', '\x170', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x170', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x43', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x175', '\x177', '\x5', '\x46', 
		'$', '\x2', '\x176', '\x175', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x179', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x17B', '\a', '\x39', '\x2', '\x2', '\x17B', 
		'\x17C', '\a', '<', '\x2', '\x2', '\x17C', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x17F', '\t', '\x6', '\x2', '\x2', '\x17E', '\x180', 
		'\a', ':', '\x2', '\x2', '\x17F', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x180', '\x3', '\x2', '\x2', '\x2', '\x180', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x183', '\x5', 'P', ')', '\x2', '\x182', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x185', '\x3', '\x2', '\x2', '\x2', '\x184', '\x186', 
		'\a', ':', '\x2', '\x2', '\x185', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x186', '\x3', '\x2', '\x2', '\x2', '\x186', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x187', '\x189', '\x5', 'J', '&', '\x2', '\x188', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', 
		'\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x18D', '\a', '\x39', '\x2', '\x2', '\x18D', '\x18E', '\a', '<', '\x2', 
		'\x2', '\x18E', 'I', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x191', '\t', 
		'\x6', '\x2', '\x2', '\x190', '\x192', '\a', ':', '\x2', '\x2', '\x191', 
		'\x190', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x194', '\x3', '\x2', '\x2', '\x2', '\x193', '\x195', 
		'\x5', 'L', '\'', '\x2', '\x194', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x195', '\x3', '\x2', '\x2', '\x2', '\x195', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x198', '\a', ':', '\x2', '\x2', '\x197', 
		'\x196', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x198', 'K', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19B', '\a', 
		':', '\x2', '\x2', '\x19A', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x19E', '\x5', 'N', '(', '\x2', '\x19D', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', 'M', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1AD', '\t', 
		'\a', '\x2', '\x2', '\x1A2', '\x1A3', '\a', '\x32', '\x2', '\x2', '\x1A3', 
		'\x1A4', '\x5', 'P', ')', '\x2', '\x1A4', '\x1A5', '\a', '\x33', '\x2', 
		'\x2', '\x1A5', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1AD', 
		'\a', '\x36', '\x2', '\x2', '\x1A7', '\x1AD', '\a', '\x35', '\x2', '\x2', 
		'\x1A8', '\x1A9', '\a', '\x37', '\x2', '\x2', '\x1A9', '\x1AD', '\a', 
		'\x34', '\x2', '\x2', '\x1AA', '\x1AD', '\a', '\x37', '\x2', '\x2', '\x1AB', 
		'\x1AD', '\a', '\x34', '\x2', '\x2', '\x1AC', '\x1A1', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1AC', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AA', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1B3', '\x5', 'R', '*', '\x2', 
		'\x1AF', '\x1B0', '\a', ':', '\x2', '\x2', '\x1B0', '\x1B2', '\x5', 'R', 
		'*', '\x2', '\x1B1', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B4', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B8', 
		'\t', '\b', '\x2', '\x2', '\x1B7', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BD', '\a', '\x11', '\x2', 
		'\x2', '\x1BC', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1C0', '\a', '\x10', '\x2', '\x2', '\x1BF', '\x1BC', '\x3', 
		'\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C1', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', 'U', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C5', '\a', 
		'\x11', '\x2', '\x2', '\x1C4', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1C6', '\x1C8', '\x5', 'T', '+', '\x2', '\x1C7', '\x1C6', '\x3', 
		'\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C8', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\a', '\xF', '\x2', 
		'\x2', '\x1CA', 'W', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CD', '\a', 
		'\xF', '\x2', '\x2', '\x1CC', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CD', 
		'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CC', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1D3', '\x5', 'V', ',', '\x2', '\x1D2', '\x1D1', '\x3', '\x2', 
		'\x2', '\x2', '\x1D3', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D8', '\a', 
		'\xF', '\x2', '\x2', '\x1D7', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D8', 
		'\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D7', '\x3', '\x2', '\x2', 
		'\x2', '\x1D9', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DA', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x1DB', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x1DE', '\a', '\x11', '\x2', '\x2', '\x1DD', '\x1DC', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\a', '\t', '\x2', '\x2', 
		'\x1E0', '\x24F', '\x5', '\\', '/', '\x2', '\x1E1', '\x1E3', '\a', '\x11', 
		'\x2', '\x2', '\x1E2', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4', '\x1E5', '\a', '\n', '\x2', '\x2', '\x1E5', '\x24F', '\x5', '\\', 
		'/', '\x2', '\x1E6', '\x1E8', '\a', '\x11', '\x2', '\x2', '\x1E7', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EB', '\a', 
		'\a', '\x2', '\x2', '\x1EA', '\x1EC', '\a', ',', '\x2', '\x2', '\x1EB', 
		'\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', 
		'\x5', '\n', '\x6', '\x2', '\x1EE', '\x1EF', '\a', '+', '\x2', '\x2', 
		'\x1EF', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F2', '\a', 
		'\x11', '\x2', '\x2', '\x1F1', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', 
		'\x2', '\x1F3', '\x1F5', '\a', '\x3', '\x2', '\x2', '\x1F4', '\x1F6', 
		'\a', '\x11', '\x2', '\x2', '\x1F5', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F8', '\x3', 
		'\x2', '\x2', '\x2', '\x1F7', '\x1F9', '\x5', 'T', '+', '\x2', '\x1F8', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\x3', '\x2', '\x2', 
		'\x2', '\x1F9', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x24F', 
		'\x5', '\\', '/', '\x2', '\x1FB', '\x1FD', '\a', '\x11', '\x2', '\x2', 
		'\x1FC', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FD', '\x3', 
		'\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
		'\x1FF', '\a', '\b', '\x2', '\x2', '\x1FF', '\x24F', '\x5', '\\', '/', 
		'\x2', '\x200', '\x202', '\a', '\x11', '\x2', '\x2', '\x201', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'\x202', '\x203', '\x3', '\x2', '\x2', '\x2', '\x203', '\x205', '\a', 
		'\x4', '\x2', '\x2', '\x204', '\x206', '\a', '\x11', '\x2', '\x2', '\x205', 
		'\x204', '\x3', '\x2', '\x2', '\x2', '\x205', '\x206', '\x3', '\x2', '\x2', 
		'\x2', '\x206', '\x208', '\x3', '\x2', '\x2', '\x2', '\x207', '\x209', 
		'\x5', 'T', '+', '\x2', '\x208', '\x207', '\x3', '\x2', '\x2', '\x2', 
		'\x208', '\x209', '\x3', '\x2', '\x2', '\x2', '\x209', '\x20A', '\x3', 
		'\x2', '\x2', '\x2', '\x20A', '\x24F', '\x5', '\\', '/', '\x2', '\x20B', 
		'\x20D', '\a', '\x11', '\x2', '\x2', '\x20C', '\x20B', '\x3', '\x2', '\x2', 
		'\x2', '\x20C', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', 
		'\x3', '\x2', '\x2', '\x2', '\x20E', '\x210', '\a', '\x5', '\x2', '\x2', 
		'\x20F', '\x211', '\a', '\x11', '\x2', '\x2', '\x210', '\x20F', '\x3', 
		'\x2', '\x2', '\x2', '\x210', '\x211', '\x3', '\x2', '\x2', '\x2', '\x211', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x212', '\x214', '\x5', 'T', '+', 
		'\x2', '\x213', '\x212', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x214', '\x215', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x24F', '\x5', '\\', '/', '\x2', '\x216', '\x218', '\a', '\x11', 
		'\x2', '\x2', '\x217', '\x216', '\x3', '\x2', '\x2', '\x2', '\x217', '\x218', 
		'\x3', '\x2', '\x2', '\x2', '\x218', '\x219', '\x3', '\x2', '\x2', '\x2', 
		'\x219', '\x21A', '\a', '\x6', '\x2', '\x2', '\x21A', '\x21B', '\a', '\xF', 
		'\x2', '\x2', '\x21B', '\x24F', '\x5', '\\', '/', '\x2', '\x21C', '\x21E', 
		'\a', '\x11', '\x2', '\x2', '\x21D', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x220', '\x3', 
		'\x2', '\x2', '\x2', '\x21F', '\x221', '\x5', 'J', '&', '\x2', '\x220', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x3', '\x2', '\x2', 
		'\x2', '\x222', '\x220', '\x3', '\x2', '\x2', '\x2', '\x222', '\x223', 
		'\x3', '\x2', '\x2', '\x2', '\x223', '\x224', '\x3', '\x2', '\x2', '\x2', 
		'\x224', '\x225', '\a', '\x39', '\x2', '\x2', '\x225', '\x226', '\a', 
		'<', '\x2', '\x2', '\x226', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x227', 
		'\x229', '\a', '\x11', '\x2', '\x2', '\x228', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\x228', '\x229', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', 
		'\x3', '\x2', '\x2', '\x2', '\x22A', '\x22C', '\a', '\v', '\x2', '\x2', 
		'\x22B', '\x22D', '\x5', '\x36', '\x1C', '\x2', '\x22C', '\x22B', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22D', 
		'\x22E', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x24F', '\a', '\x1D', '\x2', 
		'\x2', '\x22F', '\x231', '\a', '\x11', '\x2', '\x2', '\x230', '\x22F', 
		'\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\x3', '\x2', '\x2', '\x2', 
		'\x231', '\x232', '\x3', '\x2', '\x2', '\x2', '\x232', '\x234', '\a', 
		'\f', '\x2', '\x2', '\x233', '\x235', '\x5', '\x36', '\x1C', '\x2', '\x234', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x236', '\x3', '\x2', '\x2', '\x2', '\x236', '\x24F', 
		'\a', '\x1D', '\x2', '\x2', '\x237', '\x239', '\a', '\x11', '\x2', '\x2', 
		'\x238', '\x237', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'\x23C', '\a', '\r', '\x2', '\x2', '\x23B', '\x23D', '\x5', '\x36', '\x1C', 
		'\x2', '\x23C', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', 
		'\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '\x24F', '\a', '\x1D', '\x2', '\x2', '\x23F', '\x241', '\a', 
		'\x11', '\x2', '\x2', '\x240', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x241', '\x242', '\x3', '\x2', '\x2', 
		'\x2', '\x242', '\x244', '\a', '\xE', '\x2', '\x2', '\x243', '\x245', 
		'\x5', '\x36', '\x1C', '\x2', '\x244', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x245', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', '\x3', 
		'\x2', '\x2', '\x2', '\x246', '\x24F', '\a', '\x1D', '\x2', '\x2', '\x247', 
		'\x249', '\a', '\x11', '\x2', '\x2', '\x248', '\x247', '\x3', '\x2', '\x2', 
		'\x2', '\x248', '\x249', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x24A', '\x24C', '\x5', 'T', '+', '\x2', 
		'\x24B', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', '\x3', 
		'\x2', '\x2', '\x2', '\x24C', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x24D', 
		'\x24F', '\x5', '\\', '/', '\x2', '\x24E', '\x1DD', '\x3', '\x2', '\x2', 
		'\x2', '\x24E', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x24E', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'\x24E', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x24E', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x21D', '\x3', '\x2', '\x2', 
		'\x2', '\x24E', '\x228', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x230', 
		'\x3', '\x2', '\x2', '\x2', '\x24E', '\x238', '\x3', '\x2', '\x2', '\x2', 
		'\x24E', '\x240', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x248', '\x3', 
		'\x2', '\x2', '\x2', '\x24F', '[', '\x3', '\x2', '\x2', '\x2', '\x250', 
		'\x256', '\a', '\xF', '\x2', '\x2', '\x251', '\x253', '\a', '\x11', '\x2', 
		'\x2', '\x252', '\x251', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x256', '\a', '\x2', '\x2', '\x3', '\x255', '\x250', '\x3', 
		'\x2', '\x2', '\x2', '\x255', '\x252', '\x3', '\x2', '\x2', '\x2', '\x256', 
		']', '\x3', '\x2', '\x2', '\x2', '\x65', '\x61', '\x66', 'h', 'k', 't', 
		'x', '}', '\x82', '\x8B', '\x90', '\x97', '\x9C', '\xA6', '\xAB', '\xB2', 
		'\xB6', '\xBB', '\xC0', '\xC3', '\xC8', '\xCC', '\xD3', '\xD7', '\xE0', 
		'\xE9', '\xEE', '\xF2', '\xF7', '\xFA', '\xFF', '\x104', '\x107', '\x10E', 
		'\x114', '\x11A', '\x11E', '\x122', '\x130', '\x135', '\x146', '\x14D', 
		'\x153', '\x158', '\x15D', '\x163', '\x168', '\x16C', '\x170', '\x172', 
		'\x178', '\x17F', '\x182', '\x185', '\x18A', '\x191', '\x194', '\x197', 
		'\x19A', '\x19F', '\x1AC', '\x1B3', '\x1B9', '\x1BC', '\x1C1', '\x1C4', 
		'\x1C7', '\x1CE', '\x1D4', '\x1D9', '\x1DD', '\x1E2', '\x1E7', '\x1EB', 
		'\x1F1', '\x1F5', '\x1F8', '\x1FC', '\x201', '\x205', '\x208', '\x20C', 
		'\x210', '\x213', '\x217', '\x21D', '\x222', '\x228', '\x22C', '\x230', 
		'\x234', '\x238', '\x23C', '\x240', '\x244', '\x248', '\x24B', '\x24E', 
		'\x252', '\x255',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AutoStep.Compiler.Parser

