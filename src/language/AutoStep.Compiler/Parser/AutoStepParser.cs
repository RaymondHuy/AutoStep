//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\AutoStepParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AutoStep.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class AutoStepParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FEATURE=1, SCENARIO=2, BACKGROUND=3, TAG=4, OPTION=5, NEWLINE=6, WORD=7, 
		WS=8, TEXT_COMMENT=9, GIVEN=10, WHEN=11, THEN=12, AND=13;
	public const int
		RULE_file = 0, RULE_featureBlock = 1, RULE_annotations = 2, RULE_featureDefinition = 3, 
		RULE_featureBody = 4, RULE_backgroundBlock = 5, RULE_backgroundBody = 6, 
		RULE_scenarioBlock = 7, RULE_scenarioDefinition = 8, RULE_scenarioBody = 9, 
		RULE_statement = 10, RULE_statementBody = 11, RULE_name = 12, RULE_line = 13, 
		RULE_description = 14, RULE_annotation = 15;
	public static readonly string[] ruleNames = {
		"file", "featureBlock", "annotations", "featureDefinition", "featureBody", 
		"backgroundBlock", "backgroundBody", "scenarioBlock", "scenarioDefinition", 
		"scenarioBody", "statement", "statementBody", "name", "line", "description", 
		"annotation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Feature:'", "'Scenario:'", "'Background:'", null, null, null, 
		null, null, null, "'Given '", "'When '", "'Then '", "'And '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FEATURE", "SCENARIO", "BACKGROUND", "TAG", "OPTION", "NEWLINE", 
		"WORD", "WS", "TEXT_COMMENT", "GIVEN", "WHEN", "THEN", "AND"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AutoStepParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AutoStepParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AutoStepParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AutoStepParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public FeatureBlockContext featureBlock() {
			return GetRuleContext<FeatureBlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; featureBlock();
			State = 33; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureBlockContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public FeatureDefinitionContext featureDefinition() {
			return GetRuleContext<FeatureDefinitionContext>(0);
		}
		public FeatureBodyContext featureBody() {
			return GetRuleContext<FeatureBodyContext>(0);
		}
		public BackgroundBlockContext backgroundBlock() {
			return GetRuleContext<BackgroundBlockContext>(0);
		}
		public FeatureBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureBlock(this);
		}
	}

	[RuleVersion(0)]
	public FeatureBlockContext featureBlock() {
		FeatureBlockContext _localctx = new FeatureBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_featureBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; annotations();
			State = 36; featureDefinition();
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 37; backgroundBlock();
				}
				break;
			}
			State = 40; featureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationsContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterAnnotations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitAnnotations(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationsContext annotations() {
		AnnotationsContext _localctx = new AnnotationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_annotations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG || _la==OPTION) {
				{
				{
				State = 42; annotation();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureDefinitionContext : ParserRuleContext {
		public ITerminalNode FEATURE() { return GetToken(AutoStepParser.FEATURE, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public FeatureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FeatureDefinitionContext featureDefinition() {
		FeatureDefinitionContext _localctx = new FeatureDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_featureDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 48; Match(WS);
				}
			}

			State = 51; Match(FEATURE);
			State = 52; name();
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 53; description();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureBodyContext : ParserRuleContext {
		public ScenarioBlockContext[] scenarioBlock() {
			return GetRuleContexts<ScenarioBlockContext>();
		}
		public ScenarioBlockContext scenarioBlock(int i) {
			return GetRuleContext<ScenarioBlockContext>(i);
		}
		public FeatureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureBody(this);
		}
	}

	[RuleVersion(0)]
	public FeatureBodyContext featureBody() {
		FeatureBodyContext _localctx = new FeatureBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_featureBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCENARIO) | (1L << TAG) | (1L << OPTION) | (1L << WS))) != 0)) {
				{
				{
				State = 56; scenarioBlock();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackgroundBlockContext : ParserRuleContext {
		public ITerminalNode BACKGROUND() { return GetToken(AutoStepParser.BACKGROUND, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public BackgroundBodyContext backgroundBody() {
			return GetRuleContext<BackgroundBodyContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public BackgroundBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backgroundBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBackgroundBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBackgroundBlock(this);
		}
	}

	[RuleVersion(0)]
	public BackgroundBlockContext backgroundBlock() {
		BackgroundBlockContext _localctx = new BackgroundBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_backgroundBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 62; Match(WS);
				}
			}

			State = 65; Match(BACKGROUND);
			State = 66; Match(NEWLINE);
			State = 67; backgroundBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackgroundBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BackgroundBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backgroundBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBackgroundBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBackgroundBody(this);
		}
	}

	[RuleVersion(0)]
	public BackgroundBodyContext backgroundBody() {
		BackgroundBodyContext _localctx = new BackgroundBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_backgroundBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 69; statement();
					}
					} 
				}
				State = 74;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioBlockContext : ParserRuleContext {
		public ScenarioDefinitionContext scenarioDefinition() {
			return GetRuleContext<ScenarioDefinitionContext>(0);
		}
		public ScenarioBodyContext scenarioBody() {
			return GetRuleContext<ScenarioBodyContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ScenarioBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioBlock(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioBlockContext scenarioBlock() {
		ScenarioBlockContext _localctx = new ScenarioBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_scenarioBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG || _la==OPTION) {
				{
				{
				State = 75; annotation();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81; scenarioDefinition();
			State = 82; scenarioBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioDefinitionContext : ParserRuleContext {
		public ITerminalNode SCENARIO() { return GetToken(AutoStepParser.SCENARIO, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ScenarioDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioDefinitionContext scenarioDefinition() {
		ScenarioDefinitionContext _localctx = new ScenarioDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_scenarioDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 84; Match(WS);
				}
			}

			State = 87; Match(SCENARIO);
			State = 88; name();
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 89; description();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScenarioBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioBody(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioBodyContext scenarioBody() {
		ScenarioBodyContext _localctx = new ScenarioBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_scenarioBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 92; statement();
					}
					} 
				}
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode GIVEN() { return GetToken(AutoStepParser.GIVEN, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public ITerminalNode WHEN() { return GetToken(AutoStepParser.WHEN, 0); }
		public ITerminalNode THEN() { return GetToken(AutoStepParser.THEN, 0); }
		public ITerminalNode AND() { return GetToken(AutoStepParser.AND, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		int _la;
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 98; Match(WS);
					}
				}

				State = 101; Match(GIVEN);
				State = 102; statementBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 103; Match(WS);
					}
				}

				State = 106; Match(WHEN);
				State = 107; statementBody();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 108; Match(WS);
					}
				}

				State = 111; Match(THEN);
				State = 112; statementBody();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 113; Match(WS);
					}
				}

				State = 116; Match(AND);
				State = 117; statementBody();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 118; Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBodyContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public ITerminalNode[] WORD() { return GetTokens(AutoStepParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AutoStepParser.WORD, i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public StatementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementBody(this);
		}
	}

	[RuleVersion(0)]
	public StatementBodyContext statementBody() {
		StatementBodyContext _localctx = new StatementBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_statementBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 121; Match(WS);
					}
				}

				State = 124; Match(WORD);
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WORD || _la==WS );
			State = 129;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public ITerminalNode[] WORD() { return GetTokens(AutoStepParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AutoStepParser.WORD, i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 24, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 131; Match(WS);
					}
				}

				State = 134; Match(WORD);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WORD || _la==WS );
			State = 139;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode[] WORD() { return GetTokens(AutoStepParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AutoStepParser.WORD, i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 26, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WORD || _la==WS) {
				{
				{
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 141; Match(WS);
					}
				}

				State = 144; Match(WORD);
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 150; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 28, RULE_description);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 152; line();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
	 
		public AnnotationContext() { }
		public virtual void CopyFrom(AnnotationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TagContext : AnnotationContext {
		public ITerminalNode TAG() { return GetToken(AutoStepParser.TAG, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public TagContext(AnnotationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
	}
	public partial class OptionContext : AnnotationContext {
		public ITerminalNode OPTION() { return GetToken(AutoStepParser.OPTION, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public OptionContext(AnnotationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 30, RULE_annotation);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TAG:
				_localctx = new TagContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; Match(TAG);
				State = 158; Match(NEWLINE);
				}
				break;
			case OPTION:
				_localctx = new OptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; Match(OPTION);
				State = 160; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '\xA6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\a', '\x4', '.', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '\x31', '\v', '\x4', '\x3', '\x5', '\x5', '\x5', 
		'\x34', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x39', '\n', '\x5', '\x3', '\x6', '\a', '\x6', '<', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '?', '\v', '\x6', '\x3', '\a', '\x5', '\a', 
		'\x42', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\a', '\b', 'I', '\n', '\b', '\f', '\b', '\xE', '\b', 'L', 
		'\v', '\b', '\x3', '\t', '\a', '\t', 'O', '\n', '\t', '\f', '\t', '\xE', 
		'\t', 'R', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x5', '\n', 'X', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', ']', '\n', '\n', '\x3', '\v', '\a', '\v', '`', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x63', '\v', '\v', '\x3', '\f', '\x5', '\f', '\x66', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'k', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'p', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'u', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'z', '\n', '\f', '\x3', '\r', 
		'\x5', '\r', '}', '\n', '\r', '\x3', '\r', '\x6', '\r', '\x80', '\n', 
		'\r', '\r', '\r', '\xE', '\r', '\x81', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x5', '\xE', '\x87', '\n', '\xE', '\x3', '\xE', '\x6', '\xE', 
		'\x8A', '\n', '\xE', '\r', '\xE', '\xE', '\xE', '\x8B', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x5', '\xF', '\x91', '\n', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\x94', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x97', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x6', '\x10', 
		'\x9C', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\x9D', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xA4', '\n', 
		'\x11', '\x3', '\x11', '\x2', '\x2', '\x12', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\x2', '\x3', '\x3', '\x3', '\b', '\b', '\x2', '\xB0', '\x2', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\x4', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '/', '\x3', '\x2', '\x2', '\x2', '\b', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\n', '=', '\x3', '\x2', '\x2', '\x2', '\f', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'J', '\x3', '\x2', '\x2', '\x2', '\x10', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'W', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x16', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x95', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', ' ', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\"', '#', '\x5', '\x4', '\x3', '\x2', '#', '$', '\a', '\x2', '\x2', 
		'\x3', '$', '\x3', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x5', '\x6', 
		'\x4', '\x2', '&', '(', '\x5', '\b', '\x5', '\x2', '\'', ')', '\x5', '\f', 
		'\a', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x5', '\n', 
		'\x6', '\x2', '+', '\x5', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x5', 
		' ', '\x11', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\a', 
		'\n', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\a', '\x3', '\x2', '\x2', '\x36', '\x38', '\x5', 
		'\x1A', '\xE', '\x2', '\x37', '\x39', '\x5', '\x1E', '\x10', '\x2', '\x38', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '\t', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x5', '\x10', 
		'\t', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', 
		'\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', 
		'\x2', '\x2', '>', '\v', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x42', '\a', '\n', '\x2', '\x2', '\x41', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x5', 
		'\x2', '\x2', '\x44', '\x45', '\a', '\b', '\x2', '\x2', '\x45', '\x46', 
		'\x5', '\xE', '\b', '\x2', '\x46', '\r', '\x3', '\x2', '\x2', '\x2', 'G', 
		'I', '\x5', '\x16', '\f', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\x5', ' ', '\x11', 
		'\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x5', '\x12', '\n', '\x2', 'T', 'U', '\x5', '\x14', 
		'\v', '\x2', 'U', '\x11', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\a', 
		'\n', '\x2', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', 
		'\x4', '\x2', '\x2', 'Z', '\\', '\x5', '\x1A', '\xE', '\x2', '[', ']', 
		'\x5', '\x1E', '\x10', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', '\\', 
		']', '\x3', '\x2', '\x2', '\x2', ']', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'^', '`', '\x5', '\x16', '\f', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x66', '\a', '\n', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\a', '\f', '\x2', '\x2', 'h', 'z', '\x5', 
		'\x18', '\r', '\x2', 'i', 'k', '\a', '\n', '\x2', '\x2', 'j', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\a', '\r', '\x2', '\x2', 'm', 'z', '\x5', 
		'\x18', '\r', '\x2', 'n', 'p', '\a', '\n', '\x2', '\x2', 'o', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\a', '\xE', '\x2', '\x2', 'r', 'z', '\x5', 
		'\x18', '\r', '\x2', 's', 'u', '\a', '\n', '\x2', '\x2', 't', 's', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\a', '\xF', '\x2', '\x2', 'w', 'z', '\x5', 
		'\x18', '\r', '\x2', 'x', 'z', '\a', '\b', '\x2', '\x2', 'y', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'y', 'j', '\x3', '\x2', '\x2', '\x2', 'y', 
		'o', '\x3', '\x2', '\x2', '\x2', 'y', 't', '\x3', '\x2', '\x2', '\x2', 
		'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '{', '}', '\a', '\n', '\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x80', '\a', '\t', '\x2', '\x2', '\x7F', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\t', '\x2', 
		'\x2', '\x2', '\x84', '\x19', '\x3', '\x2', '\x2', '\x2', '\x85', '\x87', 
		'\a', '\n', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x8A', '\a', '\t', '\x2', '\x2', '\x89', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', 
		'\t', '\x2', '\x2', '\x2', '\x8E', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x91', '\a', '\n', '\x2', '\x2', '\x90', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\a', '\t', '\x2', '\x2', 
		'\x93', '\x90', '\x3', '\x2', '\x2', '\x2', '\x94', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\b', 
		'\x2', '\x2', '\x99', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', 
		'\x5', '\x1C', '\xF', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x6', '\x2', '\x2', 
		'\xA0', '\xA4', '\a', '\b', '\x2', '\x2', '\xA1', '\xA2', '\a', '\a', 
		'\x2', '\x2', '\xA2', '\xA4', '\a', '\b', '\x2', '\x2', '\xA3', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '!', '\x3', '\x2', '\x2', '\x2', '\x1A', '(', '/', '\x33', '\x38', 
		'=', '\x41', 'J', 'P', 'W', '\\', '\x61', '\x65', 'j', 'o', 't', 'y', 
		'|', '\x81', '\x86', '\x8B', '\x90', '\x95', '\x9D', '\xA3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AutoStep.Compiler.Parser
