//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\AutoStepParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AutoStep.Language.Test.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
internal partial class AutoStepParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FEATURE=1, SCENARIO=2, SCENARIO_OUTLINE=3, EXAMPLES=4, STEP_DEFINE=5, 
		BACKGROUND=6, TAG=7, OPTION=8, GIVEN=9, WHEN=10, THEN=11, AND=12, NEWLINE=13, 
		WORD=14, WS=15, TEXT_COMMENT=16, ESCAPED_TABLE_DELIMITER=17, TABLE_START=18, 
		ANNOTATION_COMMENT=19, ANNOTATION_TEXT=20, ANNOTATION_ERR_MARKER=21, ANNOTATION_WS=22, 
		ANNOTATION_NEWLINE=23, NAME_COMMENT=24, STATEMENT_ESCAPED_QUOTE=25, STATEMENT_ESCAPED_DBLQUOTE=26, 
		STATEMENT_ESCAPED_VARSTART=27, STATEMENT_ESCAPED_VAREND=28, STATEMENT_VAR_START=29, 
		STATEMENT_VAR_STOP=30, STATEMENT_QUOTE=31, STATEMENT_DOUBLE_QUOTE=32, 
		STATEMENT_FLOAT=33, STATEMENT_INT=34, STATEMENT_COLON=35, STATEMENT_WORD=36, 
		STATEMENT_COMMENT=37, DEF_GIVEN=38, DEF_WHEN=39, DEF_THEN=40, DEF_ESCAPED_LCURLY=41, 
		DEF_ESCAPED_RCURLY=42, DEF_LCURLY=43, DEF_RCURLY=44, DEF_COLON=45, DEF_WORD=46, 
		DEF_COMMENT=47, CELL_ESCAPED_VARSTART=48, CELL_ESCAPED_VAREND=49, CELL_VAR_START=50, 
		CELL_VAR_STOP=51, CELL_WORD=52, CELL_FLOAT=53, CELL_INT=54, CELL_COLON=55, 
		CELL_ESCAPED_DELIMITER=56, CELL_DELIMITER=57, ROW_COMMENT=58;
	public const int
		RULE_file = 0, RULE_fileEntity = 1, RULE_stepDefinitionBlock = 2, RULE_stepDefinition = 3, 
		RULE_stepDefinitionBody = 4, RULE_stepDeclaration = 5, RULE_stepDeclarationBody = 6, 
		RULE_stepDeclarationSection = 7, RULE_stepDeclarationArgument = 8, RULE_stepDeclarationArgumentName = 9, 
		RULE_stepDeclarationTypeHint = 10, RULE_stepDeclarationSectionContent = 11, 
		RULE_featureBlock = 12, RULE_annotations = 13, RULE_annotation = 14, RULE_annotationBody = 15, 
		RULE_featureDefinition = 16, RULE_featureTitle = 17, RULE_featureBody = 18, 
		RULE_backgroundBlock = 19, RULE_backgroundBody = 20, RULE_scenarioBlock = 21, 
		RULE_scenarioDefinition = 22, RULE_scenarioTitle = 23, RULE_scenarioBody = 24, 
		RULE_stepCollectionBodyLine = 25, RULE_statementBlock = 26, RULE_statement = 27, 
		RULE_statementBody = 28, RULE_statementSection = 29, RULE_statementVariableName = 30, 
		RULE_statementVarPhrase = 31, RULE_examples = 32, RULE_exampleBlock = 33, 
		RULE_tableBlock = 34, RULE_tableHeader = 35, RULE_tableHeaderCell = 36, 
		RULE_tableRow = 37, RULE_tableRowCell = 38, RULE_tableRowCellContent = 39, 
		RULE_cellContentBlock = 40, RULE_cellVariableName = 41, RULE_cellVarPhrase = 42, 
		RULE_text = 43, RULE_line = 44, RULE_description = 45, RULE_onlyLine = 46, 
		RULE_lineTerm = 47;
	public static readonly string[] ruleNames = {
		"file", "fileEntity", "stepDefinitionBlock", "stepDefinition", "stepDefinitionBody", 
		"stepDeclaration", "stepDeclarationBody", "stepDeclarationSection", "stepDeclarationArgument", 
		"stepDeclarationArgumentName", "stepDeclarationTypeHint", "stepDeclarationSectionContent", 
		"featureBlock", "annotations", "annotation", "annotationBody", "featureDefinition", 
		"featureTitle", "featureBody", "backgroundBlock", "backgroundBody", "scenarioBlock", 
		"scenarioDefinition", "scenarioTitle", "scenarioBody", "stepCollectionBodyLine", 
		"statementBlock", "statement", "statementBody", "statementSection", "statementVariableName", 
		"statementVarPhrase", "examples", "exampleBlock", "tableBlock", "tableHeader", 
		"tableHeaderCell", "tableRow", "tableRowCell", "tableRowCellContent", 
		"cellContentBlock", "cellVariableName", "cellVarPhrase", "text", "line", 
		"description", "onlyLine", "lineTerm"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'Background:'", "'@'", "'$'", null, 
		null, null, "'And'", null, null, null, null, null, null, null, null, null, 
		null, null, null, "'\\''", "'\\\"'", null, null, null, null, "'''", "'\"'", 
		null, null, null, null, null, null, null, null, "'\\{'", "'\\}'", "'{'", 
		"'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FEATURE", "SCENARIO", "SCENARIO_OUTLINE", "EXAMPLES", "STEP_DEFINE", 
		"BACKGROUND", "TAG", "OPTION", "GIVEN", "WHEN", "THEN", "AND", "NEWLINE", 
		"WORD", "WS", "TEXT_COMMENT", "ESCAPED_TABLE_DELIMITER", "TABLE_START", 
		"ANNOTATION_COMMENT", "ANNOTATION_TEXT", "ANNOTATION_ERR_MARKER", "ANNOTATION_WS", 
		"ANNOTATION_NEWLINE", "NAME_COMMENT", "STATEMENT_ESCAPED_QUOTE", "STATEMENT_ESCAPED_DBLQUOTE", 
		"STATEMENT_ESCAPED_VARSTART", "STATEMENT_ESCAPED_VAREND", "STATEMENT_VAR_START", 
		"STATEMENT_VAR_STOP", "STATEMENT_QUOTE", "STATEMENT_DOUBLE_QUOTE", "STATEMENT_FLOAT", 
		"STATEMENT_INT", "STATEMENT_COLON", "STATEMENT_WORD", "STATEMENT_COMMENT", 
		"DEF_GIVEN", "DEF_WHEN", "DEF_THEN", "DEF_ESCAPED_LCURLY", "DEF_ESCAPED_RCURLY", 
		"DEF_LCURLY", "DEF_RCURLY", "DEF_COLON", "DEF_WORD", "DEF_COMMENT", "CELL_ESCAPED_VARSTART", 
		"CELL_ESCAPED_VAREND", "CELL_VAR_START", "CELL_VAR_STOP", "CELL_WORD", 
		"CELL_FLOAT", "CELL_INT", "CELL_COLON", "CELL_ESCAPED_DELIMITER", "CELL_DELIMITER", 
		"ROW_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AutoStepParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AutoStepParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AutoStepParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AutoStepParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public FileEntityContext[] fileEntity() {
			return GetRuleContexts<FileEntityContext>();
		}
		public FileEntityContext fileEntity(int i) {
			return GetRuleContext<FileEntityContext>(i);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 96; Match(NEWLINE);
					}
					} 
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 103;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 102; fileEntity();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 107; Match(WS);
				}
			}

			State = 110; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FileEntityContext : ParserRuleContext {
		public FeatureBlockContext featureBlock() {
			return GetRuleContext<FeatureBlockContext>(0);
		}
		public StepDefinitionBlockContext stepDefinitionBlock() {
			return GetRuleContext<StepDefinitionBlockContext>(0);
		}
		public FileEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileEntity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFileEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFileEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileEntityContext fileEntity() {
		FileEntityContext _localctx = new FileEntityContext(Context, State);
		EnterRule(_localctx, 2, RULE_fileEntity);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; featureBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; stepDefinitionBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDefinitionBlockContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public StepDefinitionContext stepDefinition() {
			return GetRuleContext<StepDefinitionContext>(0);
		}
		public StepDefinitionBodyContext stepDefinitionBody() {
			return GetRuleContext<StepDefinitionBodyContext>(0);
		}
		public StepDefinitionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDefinitionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDefinitionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDefinitionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDefinitionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDefinitionBlockContext stepDefinitionBlock() {
		StepDefinitionBlockContext _localctx = new StepDefinitionBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_stepDefinitionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; annotations();
			State = 117; stepDefinition();
			State = 118; stepDefinitionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDefinitionContext : ParserRuleContext {
		public ITerminalNode STEP_DEFINE() { return GetToken(AutoStepParser.STEP_DEFINE, 0); }
		public StepDeclarationContext stepDeclaration() {
			return GetRuleContext<StepDeclarationContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public StepDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDefinitionContext stepDefinition() {
		StepDefinitionContext _localctx = new StepDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_stepDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 120; Match(WS);
				}
			}

			State = 123; Match(STEP_DEFINE);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 124; Match(WS);
				}
			}

			State = 127; stepDeclaration();
			State = 128;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 129; description();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDefinitionBodyContext : ParserRuleContext {
		public StepCollectionBodyLineContext[] stepCollectionBodyLine() {
			return GetRuleContexts<StepCollectionBodyLineContext>();
		}
		public StepCollectionBodyLineContext stepCollectionBodyLine(int i) {
			return GetRuleContext<StepCollectionBodyLineContext>(i);
		}
		public StepDefinitionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDefinitionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDefinitionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDefinitionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDefinitionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDefinitionBodyContext stepDefinitionBody() {
		StepDefinitionBodyContext _localctx = new StepDefinitionBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_stepDefinitionBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 132; stepCollectionBodyLine();
					}
					} 
				}
				State = 137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationContext : ParserRuleContext {
		public StepDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclaration; } }
	 
		public StepDeclarationContext() { }
		public virtual void CopyFrom(StepDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclareGivenContext : StepDeclarationContext {
		public ITerminalNode DEF_GIVEN() { return GetToken(AutoStepParser.DEF_GIVEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DeclareGivenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclareGiven(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclareGiven(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareGiven(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclareWhenContext : StepDeclarationContext {
		public ITerminalNode DEF_WHEN() { return GetToken(AutoStepParser.DEF_WHEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DeclareWhenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclareWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclareWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareWhen(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclareThenContext : StepDeclarationContext {
		public ITerminalNode DEF_THEN() { return GetToken(AutoStepParser.DEF_THEN, 0); }
		public StepDeclarationBodyContext stepDeclarationBody() {
			return GetRuleContext<StepDeclarationBodyContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DeclareThenContext(StepDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclareThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclareThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationContext stepDeclaration() {
		StepDeclarationContext _localctx = new StepDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_stepDeclaration);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_GIVEN:
				_localctx = new DeclareGivenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 138; Match(DEF_GIVEN);
				State = 140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 139; Match(WS);
					}
					break;
				}
				State = 142; stepDeclarationBody();
				}
				break;
			case DEF_WHEN:
				_localctx = new DeclareWhenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 143; Match(DEF_WHEN);
				State = 145;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 144; Match(WS);
					}
					break;
				}
				State = 147; stepDeclarationBody();
				}
				break;
			case DEF_THEN:
				_localctx = new DeclareThenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 148; Match(DEF_THEN);
				State = 150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 149; Match(WS);
					}
					break;
				}
				State = 152; stepDeclarationBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationBodyContext : ParserRuleContext {
		public StepDeclarationSectionContext[] stepDeclarationSection() {
			return GetRuleContexts<StepDeclarationSectionContext>();
		}
		public StepDeclarationSectionContext stepDeclarationSection(int i) {
			return GetRuleContext<StepDeclarationSectionContext>(i);
		}
		public StepDeclarationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationBodyContext stepDeclarationBody() {
		StepDeclarationBodyContext _localctx = new StepDeclarationBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_stepDeclarationBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 155; stepDeclarationSection();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationSectionContext : ParserRuleContext {
		public StepDeclarationSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationSection; } }
	 
		public StepDeclarationSectionContext() { }
		public virtual void CopyFrom(StepDeclarationSectionContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclarationSectionContext : StepDeclarationSectionContext {
		public StepDeclarationSectionContentContext stepDeclarationSectionContent() {
			return GetRuleContext<StepDeclarationSectionContentContext>(0);
		}
		public DeclarationSectionContext(StepDeclarationSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSection(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationArgumentContext : StepDeclarationSectionContext {
		public ITerminalNode DEF_LCURLY() { return GetToken(AutoStepParser.DEF_LCURLY, 0); }
		public StepDeclarationArgumentContext stepDeclarationArgument() {
			return GetRuleContext<StepDeclarationArgumentContext>(0);
		}
		public ITerminalNode DEF_RCURLY() { return GetToken(AutoStepParser.DEF_RCURLY, 0); }
		public DeclarationArgumentContext(StepDeclarationSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationSectionContext stepDeclarationSection() {
		StepDeclarationSectionContext _localctx = new StepDeclarationSectionContext(Context, State);
		EnterRule(_localctx, 14, RULE_stepDeclarationSection);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_LCURLY:
				_localctx = new DeclarationArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; Match(DEF_LCURLY);
				State = 161; stepDeclarationArgument();
				State = 162; Match(DEF_RCURLY);
				}
				break;
			case WS:
			case DEF_GIVEN:
			case DEF_WHEN:
			case DEF_THEN:
			case DEF_ESCAPED_LCURLY:
			case DEF_ESCAPED_RCURLY:
			case DEF_COLON:
			case DEF_WORD:
				_localctx = new DeclarationSectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; stepDeclarationSectionContent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationArgumentContext : ParserRuleContext {
		public StepDeclarationArgumentNameContext stepDeclarationArgumentName() {
			return GetRuleContext<StepDeclarationArgumentNameContext>(0);
		}
		public ITerminalNode DEF_COLON() { return GetToken(AutoStepParser.DEF_COLON, 0); }
		public StepDeclarationTypeHintContext stepDeclarationTypeHint() {
			return GetRuleContext<StepDeclarationTypeHintContext>(0);
		}
		public StepDeclarationArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationArgumentContext stepDeclarationArgument() {
		StepDeclarationArgumentContext _localctx = new StepDeclarationArgumentContext(Context, State);
		EnterRule(_localctx, 16, RULE_stepDeclarationArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; stepDeclarationArgumentName();
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEF_COLON) {
				{
				State = 168; Match(DEF_COLON);
				State = 169; stepDeclarationTypeHint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationArgumentNameContext : ParserRuleContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepParser.DEF_WORD, 0); }
		public StepDeclarationArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationArgumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationArgumentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationArgumentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationArgumentNameContext stepDeclarationArgumentName() {
		StepDeclarationArgumentNameContext _localctx = new StepDeclarationArgumentNameContext(Context, State);
		EnterRule(_localctx, 18, RULE_stepDeclarationArgumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(DEF_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationTypeHintContext : ParserRuleContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepParser.DEF_WORD, 0); }
		public StepDeclarationTypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationTypeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepDeclarationTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepDeclarationTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDeclarationTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationTypeHintContext stepDeclarationTypeHint() {
		StepDeclarationTypeHintContext _localctx = new StepDeclarationTypeHintContext(Context, State);
		EnterRule(_localctx, 20, RULE_stepDeclarationTypeHint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(DEF_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepDeclarationSectionContentContext : ParserRuleContext {
		public StepDeclarationSectionContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepDeclarationSectionContent; } }
	 
		public StepDeclarationSectionContentContext() { }
		public virtual void CopyFrom(StepDeclarationSectionContentContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class DeclarationWordContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_WORD() { return GetToken(AutoStepParser.DEF_WORD, 0); }
		public ITerminalNode DEF_GIVEN() { return GetToken(AutoStepParser.DEF_GIVEN, 0); }
		public ITerminalNode DEF_WHEN() { return GetToken(AutoStepParser.DEF_WHEN, 0); }
		public ITerminalNode DEF_THEN() { return GetToken(AutoStepParser.DEF_THEN, 0); }
		public DeclarationWordContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationWord(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationWsContext : StepDeclarationSectionContentContext {
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DeclarationWsContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationWs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationWs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationWs(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationColonContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_COLON() { return GetToken(AutoStepParser.DEF_COLON, 0); }
		public DeclarationColonContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationColon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationColon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationColon(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class DeclarationEscapedContext : StepDeclarationSectionContentContext {
		public ITerminalNode DEF_ESCAPED_LCURLY() { return GetToken(AutoStepParser.DEF_ESCAPED_LCURLY, 0); }
		public ITerminalNode DEF_ESCAPED_RCURLY() { return GetToken(AutoStepParser.DEF_ESCAPED_RCURLY, 0); }
		public DeclarationEscapedContext(StepDeclarationSectionContentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDeclarationEscaped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDeclarationEscaped(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationEscaped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepDeclarationSectionContentContext stepDeclarationSectionContent() {
		StepDeclarationSectionContentContext _localctx = new StepDeclarationSectionContentContext(Context, State);
		EnterRule(_localctx, 22, RULE_stepDeclarationSectionContent);
		int _la;
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF_GIVEN:
			case DEF_WHEN:
			case DEF_THEN:
			case DEF_WORD:
				_localctx = new DeclarationWordContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEF_GIVEN) | (1L << DEF_WHEN) | (1L << DEF_THEN) | (1L << DEF_WORD))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DEF_ESCAPED_LCURLY:
			case DEF_ESCAPED_RCURLY:
				_localctx = new DeclarationEscapedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				_la = TokenStream.LA(1);
				if ( !(_la==DEF_ESCAPED_LCURLY || _la==DEF_ESCAPED_RCURLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case WS:
				_localctx = new DeclarationWsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 178; Match(WS);
				}
				break;
			case DEF_COLON:
				_localctx = new DeclarationColonContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 179; Match(DEF_COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FeatureBlockContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public FeatureDefinitionContext featureDefinition() {
			return GetRuleContext<FeatureDefinitionContext>(0);
		}
		public FeatureBodyContext featureBody() {
			return GetRuleContext<FeatureBodyContext>(0);
		}
		public BackgroundBlockContext backgroundBlock() {
			return GetRuleContext<BackgroundBlockContext>(0);
		}
		public FeatureBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureBlockContext featureBlock() {
		FeatureBlockContext _localctx = new FeatureBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_featureBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; annotations();
			State = 183; featureDefinition();
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 184; backgroundBlock();
				}
				break;
			}
			State = 187; featureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AnnotationsContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterAnnotations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitAnnotations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationsContext annotations() {
		AnnotationsContext _localctx = new AnnotationsContext(Context, State);
		EnterRule(_localctx, 26, RULE_annotations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 189; annotation();
					}
					} 
				}
				State = 194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AnnotationContext : ParserRuleContext {
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
	 
		public AnnotationContext() { }
		public virtual void CopyFrom(AnnotationContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class BlankContext : AnnotationContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public BlankContext(AnnotationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBlank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBlank(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlank(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class AnnotationLineContext : AnnotationContext {
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public ITerminalNode ANNOTATION_NEWLINE() { return GetToken(AutoStepParser.ANNOTATION_NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public AnnotationLineContext(AnnotationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterAnnotationLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitAnnotationLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 28, RULE_annotation);
		int _la;
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TAG:
			case OPTION:
			case WS:
				_localctx = new AnnotationLineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 195; Match(WS);
					}
				}

				State = 198; annotationBody();
				State = 199; Match(ANNOTATION_NEWLINE);
				}
				break;
			case NEWLINE:
				_localctx = new BlankContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 201; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AnnotationBodyContext : ParserRuleContext {
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
	 
		public AnnotationBodyContext() { }
		public virtual void CopyFrom(AnnotationBodyContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class OptionAnnotationContext : AnnotationBodyContext {
		public ITerminalNode OPTION() { return GetToken(AutoStepParser.OPTION, 0); }
		public ITerminalNode ANNOTATION_TEXT() { return GetToken(AutoStepParser.ANNOTATION_TEXT, 0); }
		public OptionAnnotationContext(AnnotationBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterOptionAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitOptionAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class TagAnnotationContext : AnnotationBodyContext {
		public ITerminalNode TAG() { return GetToken(AutoStepParser.TAG, 0); }
		public ITerminalNode ANNOTATION_TEXT() { return GetToken(AutoStepParser.ANNOTATION_TEXT, 0); }
		public TagAnnotationContext(AnnotationBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTagAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTagAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_annotationBody);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TAG:
				_localctx = new TagAnnotationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; Match(TAG);
				State = 205; Match(ANNOTATION_TEXT);
				}
				break;
			case OPTION:
				_localctx = new OptionAnnotationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; Match(OPTION);
				State = 207; Match(ANNOTATION_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FeatureDefinitionContext : ParserRuleContext {
		public FeatureTitleContext featureTitle() {
			return GetRuleContext<FeatureTitleContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public FeatureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureDefinitionContext featureDefinition() {
		FeatureDefinitionContext _localctx = new FeatureDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_featureDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 210; Match(WS);
				}
			}

			State = 213; featureTitle();
			State = 214; Match(NEWLINE);
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 215; description();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FeatureTitleContext : ParserRuleContext {
		public ITerminalNode FEATURE() { return GetToken(AutoStepParser.FEATURE, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public FeatureTitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureTitle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureTitle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureTitleContext featureTitle() {
		FeatureTitleContext _localctx = new FeatureTitleContext(Context, State);
		EnterRule(_localctx, 34, RULE_featureTitle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(FEATURE);
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 219; Match(WS);
				}
				break;
			}
			State = 222; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FeatureBodyContext : ParserRuleContext {
		public ScenarioBlockContext[] scenarioBlock() {
			return GetRuleContexts<ScenarioBlockContext>();
		}
		public ScenarioBlockContext scenarioBlock(int i) {
			return GetRuleContext<ScenarioBlockContext>(i);
		}
		public FeatureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterFeatureBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitFeatureBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureBodyContext featureBody() {
		FeatureBodyContext _localctx = new FeatureBodyContext(Context, State);
		EnterRule(_localctx, 36, RULE_featureBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 224; scenarioBlock();
					}
					} 
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class BackgroundBlockContext : ParserRuleContext {
		public ITerminalNode BACKGROUND() { return GetToken(AutoStepParser.BACKGROUND, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public BackgroundBodyContext backgroundBody() {
			return GetRuleContext<BackgroundBodyContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public BackgroundBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backgroundBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBackgroundBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBackgroundBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackgroundBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackgroundBlockContext backgroundBlock() {
		BackgroundBlockContext _localctx = new BackgroundBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_backgroundBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 230; Match(WS);
				}
			}

			State = 233; Match(BACKGROUND);
			State = 234; Match(NEWLINE);
			State = 235; backgroundBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class BackgroundBodyContext : ParserRuleContext {
		public StepCollectionBodyLineContext[] stepCollectionBodyLine() {
			return GetRuleContexts<StepCollectionBodyLineContext>();
		}
		public StepCollectionBodyLineContext stepCollectionBodyLine(int i) {
			return GetRuleContext<StepCollectionBodyLineContext>(i);
		}
		public BackgroundBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backgroundBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterBackgroundBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitBackgroundBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackgroundBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackgroundBodyContext backgroundBody() {
		BackgroundBodyContext _localctx = new BackgroundBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_backgroundBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 237; stepCollectionBodyLine();
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ScenarioBlockContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public ScenarioDefinitionContext scenarioDefinition() {
			return GetRuleContext<ScenarioDefinitionContext>(0);
		}
		public ScenarioBodyContext scenarioBody() {
			return GetRuleContext<ScenarioBodyContext>(0);
		}
		public ExamplesContext examples() {
			return GetRuleContext<ExamplesContext>(0);
		}
		public ScenarioBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioBlockContext scenarioBlock() {
		ScenarioBlockContext _localctx = new ScenarioBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_scenarioBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; annotations();
			State = 244; scenarioDefinition();
			State = 245; scenarioBody();
			State = 246; examples();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ScenarioDefinitionContext : ParserRuleContext {
		public ScenarioTitleContext scenarioTitle() {
			return GetRuleContext<ScenarioTitleContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ScenarioDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioDefinitionContext scenarioDefinition() {
		ScenarioDefinitionContext _localctx = new ScenarioDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_scenarioDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 248; Match(WS);
				}
			}

			State = 251; scenarioTitle();
			State = 252; Match(NEWLINE);
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 253; description();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ScenarioTitleContext : ParserRuleContext {
		public ScenarioTitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioTitle; } }
	 
		public ScenarioTitleContext() { }
		public virtual void CopyFrom(ScenarioTitleContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class NormalScenarioTitleContext : ScenarioTitleContext {
		public ITerminalNode SCENARIO() { return GetToken(AutoStepParser.SCENARIO, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public NormalScenarioTitleContext(ScenarioTitleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterNormalScenarioTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitNormalScenarioTitle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalScenarioTitle(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ScenarioOutlineTitleContext : ScenarioTitleContext {
		public ITerminalNode SCENARIO_OUTLINE() { return GetToken(AutoStepParser.SCENARIO_OUTLINE, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public ScenarioOutlineTitleContext(ScenarioTitleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioOutlineTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioOutlineTitle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioOutlineTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioTitleContext scenarioTitle() {
		ScenarioTitleContext _localctx = new ScenarioTitleContext(Context, State);
		EnterRule(_localctx, 46, RULE_scenarioTitle);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCENARIO:
				_localctx = new NormalScenarioTitleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; Match(SCENARIO);
				State = 258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 257; Match(WS);
					}
					break;
				}
				State = 260; text();
				}
				break;
			case SCENARIO_OUTLINE:
				_localctx = new ScenarioOutlineTitleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; Match(SCENARIO_OUTLINE);
				State = 263;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 262; Match(WS);
					}
					break;
				}
				State = 265; text();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ScenarioBodyContext : ParserRuleContext {
		public StepCollectionBodyLineContext[] stepCollectionBodyLine() {
			return GetRuleContexts<StepCollectionBodyLineContext>();
		}
		public StepCollectionBodyLineContext stepCollectionBodyLine(int i) {
			return GetRuleContext<StepCollectionBodyLineContext>(i);
		}
		public ScenarioBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarioBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterScenarioBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitScenarioBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarioBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioBodyContext scenarioBody() {
		ScenarioBodyContext _localctx = new ScenarioBodyContext(Context, State);
		EnterRule(_localctx, 48, RULE_scenarioBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 268; stepCollectionBodyLine();
					}
					} 
				}
				State = 273;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StepCollectionBodyLineContext : ParserRuleContext {
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public StepCollectionBodyLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepCollectionBodyLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStepCollectionBodyLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStepCollectionBodyLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepCollectionBodyLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepCollectionBodyLineContext stepCollectionBodyLine() {
		StepCollectionBodyLineContext _localctx = new StepCollectionBodyLineContext(Context, State);
		EnterRule(_localctx, 50, RULE_stepCollectionBodyLine);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GIVEN:
			case WHEN:
			case THEN:
			case AND:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274; statementBlock();
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementBlockContext : ParserRuleContext {
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
	 
		public StatementBlockContext() { }
		public virtual void CopyFrom(StatementBlockContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class StatementEofTerminatedContext : StatementBlockContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public StatementEofTerminatedContext(StatementBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementEofTerminated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementEofTerminated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementEofTerminated(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementLineTerminatedContext : StatementBlockContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementLineTerminatedContext(StatementBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementLineTerminated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementLineTerminated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLineTerminated(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementWithTableContext : StatementBlockContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public TableBlockContext tableBlock() {
			return GetRuleContext<TableBlockContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementWithTableContext(StatementBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementWithTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementWithTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWithTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_statementBlock);
		int _la;
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				_localctx = new StatementWithTableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 278; Match(WS);
					}
				}

				State = 281; statement();
				State = 282; Match(NEWLINE);
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 283; Match(NEWLINE);
					}
					}
					State = 288;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 289; tableBlock();
				}
				break;
			case 2:
				_localctx = new StatementLineTerminatedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 291; Match(WS);
					}
				}

				State = 294; statement();
				State = 295; Match(NEWLINE);
				}
				break;
			case 3:
				_localctx = new StatementEofTerminatedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 297; Match(WS);
					}
				}

				State = 300; statement();
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 301; Match(WS);
					}
				}

				State = 304; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class GivenContext : StatementContext {
		public ITerminalNode GIVEN() { return GetToken(AutoStepParser.GIVEN, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public GivenContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterGiven(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitGiven(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGiven(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class AndContext : StatementContext {
		public ITerminalNode AND() { return GetToken(AutoStepParser.AND, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public AndContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ThenContext : StatementContext {
		public ITerminalNode THEN() { return GetToken(AutoStepParser.THEN, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public ThenContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class WhenContext : StatementContext {
		public ITerminalNode WHEN() { return GetToken(AutoStepParser.WHEN, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public WhenContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_statement);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GIVEN:
				_localctx = new GivenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 308; Match(GIVEN);
				State = 309; Match(WS);
				State = 310; statementBody();
				}
				break;
			case WHEN:
				_localctx = new WhenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 311; Match(WHEN);
				State = 312; Match(WS);
				State = 313; statementBody();
				}
				break;
			case THEN:
				_localctx = new ThenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 314; Match(THEN);
				State = 315; Match(WS);
				State = 316; statementBody();
				}
				break;
			case AND:
				_localctx = new AndContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 317; Match(AND);
				State = 318; Match(WS);
				State = 319; statementBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementBodyContext : ParserRuleContext {
		public StatementSectionContext[] statementSection() {
			return GetRuleContexts<StatementSectionContext>();
		}
		public StatementSectionContext statementSection(int i) {
			return GetRuleContext<StatementSectionContext>(i);
		}
		public StatementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBodyContext statementBody() {
		StatementBodyContext _localctx = new StatementBodyContext(Context, State);
		EnterRule(_localctx, 56, RULE_statementBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 322; statementSection();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementSectionContext : ParserRuleContext {
		public StatementSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSection; } }
	 
		public StatementSectionContext() { }
		public virtual void CopyFrom(StatementSectionContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class StatementVarUnmatchedContext : StatementSectionContext {
		public ITerminalNode STATEMENT_VAR_START() { return GetToken(AutoStepParser.STATEMENT_VAR_START, 0); }
		public ITerminalNode STATEMENT_VAR_STOP() { return GetToken(AutoStepParser.STATEMENT_VAR_STOP, 0); }
		public StatementVarUnmatchedContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementVarUnmatched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementVarUnmatched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementVarUnmatched(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementEscapedCharContext : StatementSectionContext {
		public ITerminalNode STATEMENT_ESCAPED_QUOTE() { return GetToken(AutoStepParser.STATEMENT_ESCAPED_QUOTE, 0); }
		public ITerminalNode STATEMENT_ESCAPED_DBLQUOTE() { return GetToken(AutoStepParser.STATEMENT_ESCAPED_DBLQUOTE, 0); }
		public ITerminalNode STATEMENT_ESCAPED_VARSTART() { return GetToken(AutoStepParser.STATEMENT_ESCAPED_VARSTART, 0); }
		public ITerminalNode STATEMENT_ESCAPED_VAREND() { return GetToken(AutoStepParser.STATEMENT_ESCAPED_VAREND, 0); }
		public StatementEscapedCharContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementEscapedChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementEscapedChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementEscapedChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementVariableContext : StatementSectionContext {
		public ITerminalNode STATEMENT_VAR_START() { return GetToken(AutoStepParser.STATEMENT_VAR_START, 0); }
		public StatementVariableNameContext statementVariableName() {
			return GetRuleContext<StatementVariableNameContext>(0);
		}
		public ITerminalNode STATEMENT_VAR_STOP() { return GetToken(AutoStepParser.STATEMENT_VAR_STOP, 0); }
		public StatementVariableContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementBlockWsContext : StatementSectionContext {
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBlockWsContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementBlockWs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementBlockWs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlockWs(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementDoubleQuoteContext : StatementSectionContext {
		public ITerminalNode STATEMENT_DOUBLE_QUOTE() { return GetToken(AutoStepParser.STATEMENT_DOUBLE_QUOTE, 0); }
		public StatementDoubleQuoteContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementDoubleQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementDoubleQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDoubleQuote(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementColonContext : StatementSectionContext {
		public ITerminalNode STATEMENT_COLON() { return GetToken(AutoStepParser.STATEMENT_COLON, 0); }
		public StatementColonContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementColon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementColon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementColon(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementWordContext : StatementSectionContext {
		public ITerminalNode STATEMENT_WORD() { return GetToken(AutoStepParser.STATEMENT_WORD, 0); }
		public StatementWordContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWord(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementFloatContext : StatementSectionContext {
		public ITerminalNode STATEMENT_FLOAT() { return GetToken(AutoStepParser.STATEMENT_FLOAT, 0); }
		public StatementFloatContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementInterpolateContext : StatementSectionContext {
		public ITerminalNode STATEMENT_COLON() { return GetToken(AutoStepParser.STATEMENT_COLON, 0); }
		public ITerminalNode STATEMENT_WORD() { return GetToken(AutoStepParser.STATEMENT_WORD, 0); }
		public StatementInterpolateContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementInterpolate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementInterpolate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInterpolate(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementQuoteContext : StatementSectionContext {
		public ITerminalNode STATEMENT_QUOTE() { return GetToken(AutoStepParser.STATEMENT_QUOTE, 0); }
		public StatementQuoteContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementQuote(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class StatementIntContext : StatementSectionContext {
		public ITerminalNode STATEMENT_INT() { return GetToken(AutoStepParser.STATEMENT_INT, 0); }
		public StatementIntContext(StatementSectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSectionContext statementSection() {
		StatementSectionContext _localctx = new StatementSectionContext(Context, State);
		EnterRule(_localctx, 58, RULE_statementSection);
		int _la;
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				_localctx = new StatementQuoteContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 327; Match(STATEMENT_QUOTE);
				}
				break;
			case 2:
				_localctx = new StatementDoubleQuoteContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 328; Match(STATEMENT_DOUBLE_QUOTE);
				}
				break;
			case 3:
				_localctx = new StatementVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 329; Match(STATEMENT_VAR_START);
				State = 330; statementVariableName();
				State = 331; Match(STATEMENT_VAR_STOP);
				}
				break;
			case 4:
				_localctx = new StatementEscapedCharContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 333;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STATEMENT_ESCAPED_QUOTE) | (1L << STATEMENT_ESCAPED_DBLQUOTE) | (1L << STATEMENT_ESCAPED_VARSTART) | (1L << STATEMENT_ESCAPED_VAREND))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				_localctx = new StatementIntContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 334; Match(STATEMENT_INT);
				}
				break;
			case 6:
				_localctx = new StatementFloatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 335; Match(STATEMENT_FLOAT);
				}
				break;
			case 7:
				_localctx = new StatementInterpolateContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 336; Match(STATEMENT_COLON);
				State = 337; Match(STATEMENT_WORD);
				}
				break;
			case 8:
				_localctx = new StatementColonContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 338; Match(STATEMENT_COLON);
				}
				break;
			case 9:
				_localctx = new StatementWordContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 339; Match(STATEMENT_WORD);
				}
				break;
			case 10:
				_localctx = new StatementVarUnmatchedContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 340;
				_la = TokenStream.LA(1);
				if ( !(_la==STATEMENT_VAR_START || _la==STATEMENT_VAR_STOP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new StatementBlockWsContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 341; Match(WS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementVariableNameContext : ParserRuleContext {
		public StatementVarPhraseContext[] statementVarPhrase() {
			return GetRuleContexts<StatementVarPhraseContext>();
		}
		public StatementVarPhraseContext statementVarPhrase(int i) {
			return GetRuleContext<StatementVarPhraseContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public StatementVariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementVariableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementVariableNameContext statementVariableName() {
		StatementVariableNameContext _localctx = new StatementVariableNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_statementVariableName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; statementVarPhrase();
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 345; Match(WS);
				State = 346; statementVarPhrase();
				}
				}
				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementVarPhraseContext : ParserRuleContext {
		public ITerminalNode[] STATEMENT_WORD() { return GetTokens(AutoStepParser.STATEMENT_WORD); }
		public ITerminalNode STATEMENT_WORD(int i) {
			return GetToken(AutoStepParser.STATEMENT_WORD, i);
		}
		public ITerminalNode[] STATEMENT_INT() { return GetTokens(AutoStepParser.STATEMENT_INT); }
		public ITerminalNode STATEMENT_INT(int i) {
			return GetToken(AutoStepParser.STATEMENT_INT, i);
		}
		public StatementVarPhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementVarPhrase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterStatementVarPhrase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitStatementVarPhrase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementVarPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementVarPhraseContext statementVarPhrase() {
		StatementVarPhraseContext _localctx = new StatementVarPhraseContext(Context, State);
		EnterRule(_localctx, 62, RULE_statementVarPhrase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 352;
				_la = TokenStream.LA(1);
				if ( !(_la==STATEMENT_INT || _la==STATEMENT_WORD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STATEMENT_INT || _la==STATEMENT_WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExamplesContext : ParserRuleContext {
		public ExampleBlockContext[] exampleBlock() {
			return GetRuleContexts<ExampleBlockContext>();
		}
		public ExampleBlockContext exampleBlock(int i) {
			return GetRuleContext<ExampleBlockContext>(i);
		}
		public ExamplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_examples; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterExamples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitExamples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExamples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExamplesContext examples() {
		ExamplesContext _localctx = new ExamplesContext(Context, State);
		EnterRule(_localctx, 64, RULE_examples);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 357; exampleBlock();
					}
					} 
				}
				State = 362;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExampleBlockContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public ITerminalNode EXAMPLES() { return GetToken(AutoStepParser.EXAMPLES, 0); }
		public TableBlockContext tableBlock() {
			return GetRuleContext<TableBlockContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public ExampleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exampleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterExampleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitExampleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExampleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExampleBlockContext exampleBlock() {
		ExampleBlockContext _localctx = new ExampleBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_exampleBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; annotations();
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 364; Match(WS);
				}
			}

			State = 367; Match(EXAMPLES);
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 368; Match(NEWLINE);
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NEWLINE );
			State = 373; tableBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableBlockContext : ParserRuleContext {
		public TableHeaderContext tableHeader() {
			return GetRuleContext<TableHeaderContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TableRowContext[] tableRow() {
			return GetRuleContexts<TableRowContext>();
		}
		public TableRowContext tableRow(int i) {
			return GetRuleContext<TableRowContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public TableBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableBlockContext tableBlock() {
		TableBlockContext _localctx = new TableBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_tableBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 375; Match(WS);
				}
			}

			State = 378; tableHeader();
			State = 386;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 384;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
					case TABLE_START:
					case CELL_DELIMITER:
						{
						State = 380;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 379; Match(WS);
							}
						}

						State = 382; tableRow();
						}
						break;
					case NEWLINE:
						{
						State = 383; Match(NEWLINE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableHeaderContext : ParserRuleContext {
		public ITerminalNode CELL_DELIMITER() { return GetToken(AutoStepParser.CELL_DELIMITER, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public TableHeaderCellContext[] tableHeaderCell() {
			return GetRuleContexts<TableHeaderCellContext>();
		}
		public TableHeaderCellContext tableHeaderCell(int i) {
			return GetRuleContext<TableHeaderCellContext>(i);
		}
		public TableHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableHeaderContext tableHeader() {
		TableHeaderContext _localctx = new TableHeaderContext(Context, State);
		EnterRule(_localctx, 70, RULE_tableHeader);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 389; tableHeaderCell();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 394; Match(CELL_DELIMITER);
			State = 395;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableHeaderCellContext : ParserRuleContext {
		public ITerminalNode TABLE_START() { return GetToken(AutoStepParser.TABLE_START, 0); }
		public ITerminalNode CELL_DELIMITER() { return GetToken(AutoStepParser.CELL_DELIMITER, 0); }
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public CellVariableNameContext cellVariableName() {
			return GetRuleContext<CellVariableNameContext>(0);
		}
		public TableHeaderCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableHeaderCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableHeaderCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableHeaderCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableHeaderCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableHeaderCellContext tableHeaderCell() {
		TableHeaderCellContext _localctx = new TableHeaderCellContext(Context, State);
		EnterRule(_localctx, 72, RULE_tableHeaderCell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE_START || _la==CELL_DELIMITER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 398; Match(WS);
				}
				break;
			}
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CELL_WORD || _la==CELL_INT) {
				{
				State = 401; cellVariableName();
				}
			}

			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 404; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableRowContext : ParserRuleContext {
		public ITerminalNode CELL_DELIMITER() { return GetToken(AutoStepParser.CELL_DELIMITER, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public TableRowCellContext[] tableRowCell() {
			return GetRuleContexts<TableRowCellContext>();
		}
		public TableRowCellContext tableRowCell(int i) {
			return GetRuleContext<TableRowCellContext>(i);
		}
		public TableRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRow; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowContext tableRow() {
		TableRowContext _localctx = new TableRowContext(Context, State);
		EnterRule(_localctx, 74, RULE_tableRow);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 407; tableRowCell();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 412; Match(CELL_DELIMITER);
			State = 413;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableRowCellContext : ParserRuleContext {
		public ITerminalNode TABLE_START() { return GetToken(AutoStepParser.TABLE_START, 0); }
		public ITerminalNode CELL_DELIMITER() { return GetToken(AutoStepParser.CELL_DELIMITER, 0); }
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TableRowCellContentContext tableRowCellContent() {
			return GetRuleContext<TableRowCellContentContext>(0);
		}
		public TableRowCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableRowCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableRowCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowCellContext tableRowCell() {
		TableRowCellContext _localctx = new TableRowCellContext(Context, State);
		EnterRule(_localctx, 76, RULE_tableRowCell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE_START || _la==CELL_DELIMITER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 416; Match(WS);
				}
				break;
			}
			State = 420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 419; tableRowCellContent();
				}
				break;
			}
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 422; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TableRowCellContentContext : ParserRuleContext {
		public CellContentBlockContext[] cellContentBlock() {
			return GetRuleContexts<CellContentBlockContext>();
		}
		public CellContentBlockContext cellContentBlock(int i) {
			return GetRuleContext<CellContentBlockContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TableRowCellContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowCellContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterTableRowCellContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitTableRowCellContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowCellContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowCellContentContext tableRowCellContent() {
		TableRowCellContentContext _localctx = new TableRowCellContentContext(Context, State);
		EnterRule(_localctx, 78, RULE_tableRowCellContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 426;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 425; Match(WS);
						}
					}

					State = 428; cellContentBlock();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class CellContentBlockContext : ParserRuleContext {
		public CellContentBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellContentBlock; } }
	 
		public CellContentBlockContext() { }
		public virtual void CopyFrom(CellContentBlockContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class CellColonContext : CellContentBlockContext {
		public ITerminalNode CELL_COLON() { return GetToken(AutoStepParser.CELL_COLON, 0); }
		public CellColonContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellColon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellColon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellColon(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellEscapedCharContext : CellContentBlockContext {
		public ITerminalNode CELL_ESCAPED_DELIMITER() { return GetToken(AutoStepParser.CELL_ESCAPED_DELIMITER, 0); }
		public ITerminalNode CELL_ESCAPED_VARSTART() { return GetToken(AutoStepParser.CELL_ESCAPED_VARSTART, 0); }
		public ITerminalNode CELL_ESCAPED_VAREND() { return GetToken(AutoStepParser.CELL_ESCAPED_VAREND, 0); }
		public CellEscapedCharContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellEscapedChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellEscapedChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellEscapedChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellVariableContext : CellContentBlockContext {
		public ITerminalNode CELL_VAR_START() { return GetToken(AutoStepParser.CELL_VAR_START, 0); }
		public CellVariableNameContext cellVariableName() {
			return GetRuleContext<CellVariableNameContext>(0);
		}
		public ITerminalNode CELL_VAR_STOP() { return GetToken(AutoStepParser.CELL_VAR_STOP, 0); }
		public CellVariableContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellInterpolateContext : CellContentBlockContext {
		public ITerminalNode CELL_COLON() { return GetToken(AutoStepParser.CELL_COLON, 0); }
		public ITerminalNode CELL_WORD() { return GetToken(AutoStepParser.CELL_WORD, 0); }
		public CellInterpolateContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellInterpolate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellInterpolate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellInterpolate(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellIntContext : CellContentBlockContext {
		public ITerminalNode CELL_INT() { return GetToken(AutoStepParser.CELL_INT, 0); }
		public CellIntContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellWordContext : CellContentBlockContext {
		public ITerminalNode CELL_WORD() { return GetToken(AutoStepParser.CELL_WORD, 0); }
		public CellWordContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellWord(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class CellFloatContext : CellContentBlockContext {
		public ITerminalNode CELL_FLOAT() { return GetToken(AutoStepParser.CELL_FLOAT, 0); }
		public CellFloatContext(CellContentBlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellContentBlockContext cellContentBlock() {
		CellContentBlockContext _localctx = new CellContentBlockContext(Context, State);
		EnterRule(_localctx, 80, RULE_cellContentBlock);
		int _la;
		try {
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				_localctx = new CellEscapedCharContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 433;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CELL_ESCAPED_VARSTART) | (1L << CELL_ESCAPED_VAREND) | (1L << CELL_ESCAPED_DELIMITER))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				_localctx = new CellVariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 434; Match(CELL_VAR_START);
				State = 435; cellVariableName();
				State = 436; Match(CELL_VAR_STOP);
				}
				break;
			case 3:
				_localctx = new CellIntContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 438; Match(CELL_INT);
				}
				break;
			case 4:
				_localctx = new CellFloatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 439; Match(CELL_FLOAT);
				}
				break;
			case 5:
				_localctx = new CellInterpolateContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 440; Match(CELL_COLON);
				State = 441; Match(CELL_WORD);
				}
				break;
			case 6:
				_localctx = new CellColonContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 442; Match(CELL_COLON);
				}
				break;
			case 7:
				_localctx = new CellWordContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 443; Match(CELL_WORD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class CellVariableNameContext : ParserRuleContext {
		public CellVarPhraseContext[] cellVarPhrase() {
			return GetRuleContexts<CellVarPhraseContext>();
		}
		public CellVarPhraseContext cellVarPhrase(int i) {
			return GetRuleContext<CellVarPhraseContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public CellVariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellVariableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellVariableNameContext cellVariableName() {
		CellVariableNameContext _localctx = new CellVariableNameContext(Context, State);
		EnterRule(_localctx, 82, RULE_cellVariableName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; cellVarPhrase();
			State = 451;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 447; Match(WS);
					State = 448; cellVarPhrase();
					}
					} 
				}
				State = 453;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class CellVarPhraseContext : ParserRuleContext {
		public ITerminalNode[] CELL_WORD() { return GetTokens(AutoStepParser.CELL_WORD); }
		public ITerminalNode CELL_WORD(int i) {
			return GetToken(AutoStepParser.CELL_WORD, i);
		}
		public ITerminalNode[] CELL_INT() { return GetTokens(AutoStepParser.CELL_INT); }
		public ITerminalNode CELL_INT(int i) {
			return GetToken(AutoStepParser.CELL_INT, i);
		}
		public CellVarPhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellVarPhrase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterCellVarPhrase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitCellVarPhrase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellVarPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellVarPhraseContext cellVarPhrase() {
		CellVarPhraseContext _localctx = new CellVarPhraseContext(Context, State);
		EnterRule(_localctx, 84, RULE_cellVarPhrase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 454;
				_la = TokenStream.LA(1);
				if ( !(_la==CELL_WORD || _la==CELL_INT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CELL_WORD || _la==CELL_INT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TextContext : ParserRuleContext {
		public ITerminalNode[] WORD() { return GetTokens(AutoStepParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AutoStepParser.WORD, i);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 86, RULE_text);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 460;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 459; Match(WS);
						}
					}

					State = 462; Match(WORD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 465;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LineContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 88, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 467; Match(WS);
				}
				break;
			}
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORD || _la==WS) {
				{
				State = 470; text();
				}
			}

			State = 473; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class DescriptionContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(AutoStepParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(AutoStepParser.NEWLINE, i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 90, RULE_description);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 475; Match(NEWLINE);
					}
					} 
				}
				State = 480;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			State = 482;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 481; line();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 484;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 489;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 486; Match(NEWLINE);
					}
					} 
				}
				State = 491;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class OnlyLineContext : ParserRuleContext {
		public OnlyLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onlyLine; } }
	 
		public OnlyLineContext() { }
		public virtual void CopyFrom(OnlyLineContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class LineTableRowContext : OnlyLineContext {
		public ITerminalNode CELL_DELIMITER() { return GetToken(AutoStepParser.CELL_DELIMITER, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public TableRowCellContext[] tableRowCell() {
			return GetRuleContexts<TableRowCellContext>();
		}
		public TableRowCellContext tableRowCell(int i) {
			return GetRuleContext<TableRowCellContext>(i);
		}
		public LineTableRowContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineTableRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineTableRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTableRow(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineThenContext : OnlyLineContext {
		public ITerminalNode THEN() { return GetToken(AutoStepParser.THEN, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public LineThenContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineScenarioContext : OnlyLineContext {
		public ITerminalNode SCENARIO() { return GetToken(AutoStepParser.SCENARIO, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineScenarioContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineScenario(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineScenario(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineScenario(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineAndContext : OnlyLineContext {
		public ITerminalNode AND() { return GetToken(AutoStepParser.AND, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public LineAndContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineBackgroundContext : OnlyLineContext {
		public ITerminalNode BACKGROUND() { return GetToken(AutoStepParser.BACKGROUND, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public LineBackgroundContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineBackground(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineBackground(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineBackground(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineTagContext : OnlyLineContext {
		public ITerminalNode TAG() { return GetToken(AutoStepParser.TAG, 0); }
		public ITerminalNode ANNOTATION_TEXT() { return GetToken(AutoStepParser.ANNOTATION_TEXT, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public LineTagContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTag(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineStepDefineContext : OnlyLineContext {
		public ITerminalNode STEP_DEFINE() { return GetToken(AutoStepParser.STEP_DEFINE, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public StepDeclarationContext stepDeclaration() {
			return GetRuleContext<StepDeclarationContext>(0);
		}
		public LineStepDefineContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineStepDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineStepDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStepDefine(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineGivenContext : OnlyLineContext {
		public ITerminalNode GIVEN() { return GetToken(AutoStepParser.GIVEN, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public LineGivenContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineGiven(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineGiven(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineGiven(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineOptContext : OnlyLineContext {
		public ITerminalNode OPTION() { return GetToken(AutoStepParser.OPTION, 0); }
		public ITerminalNode ANNOTATION_TEXT() { return GetToken(AutoStepParser.ANNOTATION_TEXT, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public LineOptContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineOpt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineOpt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineOpt(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineWhenContext : OnlyLineContext {
		public ITerminalNode WHEN() { return GetToken(AutoStepParser.WHEN, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public StatementBodyContext statementBody() {
			return GetRuleContext<StatementBodyContext>(0);
		}
		public LineWhenContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWhen(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineFeatureContext : OnlyLineContext {
		public ITerminalNode FEATURE() { return GetToken(AutoStepParser.FEATURE, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineFeatureContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineFeature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineFeature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFeature(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineScenarioOutlineContext : OnlyLineContext {
		public ITerminalNode SCENARIO_OUTLINE() { return GetToken(AutoStepParser.SCENARIO_OUTLINE, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(AutoStepParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(AutoStepParser.WS, i);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineScenarioOutlineContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineScenarioOutline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineScenarioOutline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineScenarioOutline(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineTextContext : OnlyLineContext {
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public LineTextContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineText(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LineExamplesContext : OnlyLineContext {
		public ITerminalNode EXAMPLES() { return GetToken(AutoStepParser.EXAMPLES, 0); }
		public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public LineExamplesContext(OnlyLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineExamples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineExamples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineExamples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnlyLineContext onlyLine() {
		OnlyLineContext _localctx = new OnlyLineContext(Context, State);
		EnterRule(_localctx, 92, RULE_onlyLine);
		int _la;
		try {
			int _alt;
			State = 607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				_localctx = new LineTagContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 492; Match(WS);
					}
				}

				State = 495; Match(TAG);
				State = 496; Match(ANNOTATION_TEXT);
				State = 497; lineTerm();
				}
				break;
			case 2:
				_localctx = new LineOptContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 498; Match(WS);
					}
				}

				State = 501; Match(OPTION);
				State = 502; Match(ANNOTATION_TEXT);
				State = 503; lineTerm();
				}
				break;
			case 3:
				_localctx = new LineStepDefineContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 504; Match(WS);
					}
				}

				State = 507; Match(STEP_DEFINE);
				State = 509;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 508; Match(WS);
					}
					break;
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEF_GIVEN) | (1L << DEF_WHEN) | (1L << DEF_THEN))) != 0)) {
					{
					State = 511; stepDeclaration();
					}
				}

				State = 514; lineTerm();
				}
				break;
			case 4:
				_localctx = new LineFeatureContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 515; Match(WS);
					}
				}

				State = 518; Match(FEATURE);
				State = 520;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 519; Match(WS);
					}
					break;
				}
				State = 523;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 522; text();
					}
					break;
				}
				State = 525; lineTerm();
				}
				break;
			case 5:
				_localctx = new LineBackgroundContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 526; Match(WS);
					}
				}

				State = 529; Match(BACKGROUND);
				State = 530; lineTerm();
				}
				break;
			case 6:
				_localctx = new LineScenarioContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 531; Match(WS);
					}
				}

				State = 534; Match(SCENARIO);
				State = 536;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
				case 1:
					{
					State = 535; Match(WS);
					}
					break;
				}
				State = 539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
				case 1:
					{
					State = 538; text();
					}
					break;
				}
				State = 541; lineTerm();
				}
				break;
			case 7:
				_localctx = new LineScenarioOutlineContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 542; Match(WS);
					}
				}

				State = 545; Match(SCENARIO_OUTLINE);
				State = 547;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
				case 1:
					{
					State = 546; Match(WS);
					}
					break;
				}
				State = 550;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 549; text();
					}
					break;
				}
				State = 552; lineTerm();
				}
				break;
			case 8:
				_localctx = new LineExamplesContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 553; Match(WS);
					}
				}

				State = 556; Match(EXAMPLES);
				State = 557; lineTerm();
				}
				break;
			case 9:
				_localctx = new LineTableRowContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 558; Match(WS);
					}
				}

				State = 562;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 561; tableRowCell();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 564;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 566; Match(CELL_DELIMITER);
				}
				break;
			case 10:
				_localctx = new LineGivenContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 568; Match(WS);
					}
				}

				State = 571; Match(GIVEN);
				State = 573;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
				case 1:
					{
					State = 572; statementBody();
					}
					break;
				}
				State = 575; lineTerm();
				}
				break;
			case 11:
				_localctx = new LineWhenContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 576; Match(WS);
					}
				}

				State = 579; Match(WHEN);
				State = 581;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
				case 1:
					{
					State = 580; statementBody();
					}
					break;
				}
				State = 583; lineTerm();
				}
				break;
			case 12:
				_localctx = new LineThenContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 585;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 584; Match(WS);
					}
				}

				State = 587; Match(THEN);
				State = 589;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 588; statementBody();
					}
					break;
				}
				State = 591; lineTerm();
				}
				break;
			case 13:
				_localctx = new LineAndContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 592; Match(WS);
					}
				}

				State = 595; Match(AND);
				State = 597;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 596; statementBody();
					}
					break;
				}
				State = 599; lineTerm();
				}
				break;
			case 14:
				_localctx = new LineTextContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 600; Match(WS);
					}
					break;
				}
				State = 604;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 603; text();
					}
					break;
				}
				State = 606; lineTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LineTermContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(AutoStepParser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(AutoStepParser.Eof, 0); }
		public ITerminalNode WS() { return GetToken(AutoStepParser.WS, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.EnterLineTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAutoStepParserListener typedListener = listener as IAutoStepParserListener;
			if (typedListener != null) typedListener.ExitLineTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoStepParserVisitor<TResult> typedVisitor = visitor as IAutoStepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineTermContext lineTerm() {
		LineTermContext _localctx = new LineTermContext(Context, State);
		EnterRule(_localctx, 94, RULE_lineTerm);
		int _la;
		try {
			State = 614;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609; Match(NEWLINE);
				}
				break;
			case Eof:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 610; Match(WS);
					}
				}

				State = 613; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '<', '\x26B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x3', '\x2', 
		'\a', '\x2', '\x64', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'g', '\v', 
		'\x2', '\x3', '\x2', '\x6', '\x2', 'j', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', 'k', '\x3', '\x2', '\x5', '\x2', 'o', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'u', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x5', '\x5', '|', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x80', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x85', '\n', '\x5', '\x3', '\x6', '\a', '\x6', '\x88', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x8B', '\v', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x8F', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x94', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x99', '\n', '\a', '\x3', '\a', '\x5', '\a', '\x9C', '\n', 
		'\a', '\x3', '\b', '\x6', '\b', '\x9F', '\n', '\b', '\r', '\b', '\xE', 
		'\b', '\xA0', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xA8', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\xAD', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\xB7', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xBC', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\a', '\xF', '\xC1', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC4', 
		'\v', '\xF', '\x3', '\x10', '\x5', '\x10', '\xC7', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xCD', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xD3', '\n', '\x11', '\x3', '\x12', '\x5', '\x12', '\xD6', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\xDB', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xDF', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\a', '\x14', 
		'\xE4', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xE7', '\v', '\x14', 
		'\x3', '\x15', '\x5', '\x15', '\xEA', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\a', '\x16', '\xF1', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xF4', '\v', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x5', '\x18', '\xFC', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x101', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x105', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x10A', '\n', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x10D', '\n', '\x19', '\x3', '\x1A', '\a', '\x1A', '\x110', '\n', 
		'\x1A', '\f', '\x1A', '\xE', '\x1A', '\x113', '\v', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x117', '\n', '\x1B', '\x3', '\x1C', '\x5', 
		'\x1C', '\x11A', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x11F', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x122', 
		'\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x127', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x12D', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x131', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x135', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x143', '\n', '\x1D', '\x3', '\x1E', '\x6', '\x1E', '\x146', '\n', '\x1E', 
		'\r', '\x1E', '\xE', '\x1E', '\x147', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x159', '\n', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x15E', '\n', ' ', '\f', 
		' ', '\xE', ' ', '\x161', '\v', ' ', '\x3', '!', '\x6', '!', '\x164', 
		'\n', '!', '\r', '!', '\xE', '!', '\x165', '\x3', '\"', '\a', '\"', '\x169', 
		'\n', '\"', '\f', '\"', '\xE', '\"', '\x16C', '\v', '\"', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x170', '\n', '#', '\x3', '#', '\x3', '#', '\x6', 
		'#', '\x174', '\n', '#', '\r', '#', '\xE', '#', '\x175', '\x3', '#', '\x3', 
		'#', '\x3', '$', '\x5', '$', '\x17B', '\n', '$', '\x3', '$', '\x3', '$', 
		'\x5', '$', '\x17F', '\n', '$', '\x3', '$', '\x3', '$', '\a', '$', '\x183', 
		'\n', '$', '\f', '$', '\xE', '$', '\x186', '\v', '$', '\x3', '%', '\x6', 
		'%', '\x189', '\n', '%', '\r', '%', '\xE', '%', '\x18A', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x5', '&', '\x192', '\n', '&', 
		'\x3', '&', '\x5', '&', '\x195', '\n', '&', '\x3', '&', '\x5', '&', '\x198', 
		'\n', '&', '\x3', '\'', '\x6', '\'', '\x19B', '\n', '\'', '\r', '\'', 
		'\xE', '\'', '\x19C', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', 
		'\x3', '(', '\x5', '(', '\x1A4', '\n', '(', '\x3', '(', '\x5', '(', '\x1A7', 
		'\n', '(', '\x3', '(', '\x5', '(', '\x1AA', '\n', '(', '\x3', ')', '\x5', 
		')', '\x1AD', '\n', ')', '\x3', ')', '\x6', ')', '\x1B0', '\n', ')', '\r', 
		')', '\xE', ')', '\x1B1', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x5', '*', '\x1BF', '\n', '*', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\a', '+', '\x1C4', '\n', '+', '\f', '+', '\xE', '+', '\x1C7', '\v', 
		'+', '\x3', ',', '\x6', ',', '\x1CA', '\n', ',', '\r', ',', '\xE', ',', 
		'\x1CB', '\x3', '-', '\x5', '-', '\x1CF', '\n', '-', '\x3', '-', '\x6', 
		'-', '\x1D2', '\n', '-', '\r', '-', '\xE', '-', '\x1D3', '\x3', '.', '\x5', 
		'.', '\x1D7', '\n', '.', '\x3', '.', '\x5', '.', '\x1DA', '\n', '.', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\a', '/', '\x1DF', '\n', '/', '\f', '/', 
		'\xE', '/', '\x1E2', '\v', '/', '\x3', '/', '\x6', '/', '\x1E5', '\n', 
		'/', '\r', '/', '\xE', '/', '\x1E6', '\x3', '/', '\a', '/', '\x1EA', '\n', 
		'/', '\f', '/', '\xE', '/', '\x1ED', '\v', '/', '\x3', '\x30', '\x5', 
		'\x30', '\x1F0', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x1F6', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x1FC', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x200', '\n', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x203', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x207', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x20B', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', '\x20E', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x212', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x217', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x21B', '\n', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x21E', '\n', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x222', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x226', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x229', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x22D', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x232', '\n', '\x30', '\x3', '\x30', '\x6', '\x30', '\x235', '\n', '\x30', 
		'\r', '\x30', '\xE', '\x30', '\x236', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x23C', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x240', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x244', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x248', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x24C', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x250', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x254', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x258', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x25C', '\n', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x25F', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', '\x262', 
		'\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x266', '\n', 
		'\x31', '\x3', '\x31', '\x5', '\x31', '\x269', '\n', '\x31', '\x3', '\x31', 
		'\x2', '\x2', '\x32', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x2', '\v', '\x3', '\x3', '\xF', '\xF', 
		'\x4', '\x2', '(', '*', '\x30', '\x30', '\x3', '\x2', '+', ',', '\x3', 
		'\x2', '\x1B', '\x1E', '\x3', '\x2', '\x1F', ' ', '\x4', '\x2', '$', '$', 
		'&', '&', '\x4', '\x2', '\x14', '\x14', ';', ';', '\x4', '\x2', '\x32', 
		'\x33', ':', ':', '\x4', '\x2', '\x36', '\x36', '\x38', '\x38', '\x2', 
		'\x2C1', '\x2', '\x65', '\x3', '\x2', '\x2', '\x2', '\x4', 't', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'v', '\x3', '\x2', '\x2', '\x2', '\b', '{', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xE', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xB0', '\x3', '\x2', '\x2', '\x2', '\x18', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xD2', '\x3', '\x2', '\x2', '\x2', '\"', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xDC', '\x3', '\x2', '\x2', '\x2', '&', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xE9', '\x3', '\x2', '\x2', '\x2', '*', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xF5', '\x3', '\x2', '\x2', '\x2', '.', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x111', '\x3', '\x2', '\x2', '\x2', '\x34', '\x116', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x134', '\x3', '\x2', '\x2', '\x2', '\x38', '\x142', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x158', '\x3', '\x2', '\x2', '\x2', '>', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x163', '\x3', '\x2', '\x2', '\x2', '\x42', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x17A', '\x3', '\x2', '\x2', '\x2', 'H', '\x188', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x18F', '\x3', '\x2', '\x2', '\x2', 'L', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x1AF', '\x3', '\x2', '\x2', '\x2', 'R', '\x1BE', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x1C0', '\x3', '\x2', '\x2', '\x2', 'V', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\\', '\x1E0', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x261', '\x3', '\x2', '\x2', '\x2', '`', '\x268', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\a', '\xF', '\x2', '\x2', 
		'\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x5', '\x4', '\x3', '\x2', 
		'i', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 
		'l', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\a', '\x11', '\x2', '\x2', 
		'n', 'm', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x2', '\x2', '\x3', 
		'q', '\x3', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x5', '\x1A', '\xE', 
		'\x2', 's', 'u', '\x5', '\x6', '\x4', '\x2', 't', 'r', '\x3', '\x2', '\x2', 
		'\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 'u', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x5', '\x1C', '\xF', '\x2', 'w', 'x', '\x5', 
		'\b', '\x5', '\x2', 'x', 'y', '\x5', '\n', '\x6', '\x2', 'y', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'z', '|', '\a', '\x11', '\x2', '\x2', '{', 'z', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', 
		'\x2', '\x2', '\x2', '}', '\x7F', '\a', '\a', '\x2', '\x2', '~', '\x80', 
		'\a', '\x11', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\x5', '\f', '\a', '\x2', '\x82', '\x84', '\t', 
		'\x2', '\x2', '\x2', '\x83', '\x85', '\x5', '\\', '/', '\x2', '\x84', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\t', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\x5', 
		'\x34', '\x1B', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8E', '\a', '(', '\x2', '\x2', '\x8D', '\x8F', '\a', '\x11', '\x2', 
		'\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x9C', '\x5', '\xE', '\b', '\x2', '\x91', '\x93', '\a', ')', '\x2', '\x2', 
		'\x92', '\x94', '\a', '\x11', '\x2', '\x2', '\x93', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x9C', '\x5', '\xE', '\b', '\x2', 
		'\x96', '\x98', '\a', '*', '\x2', '\x2', '\x97', '\x99', '\a', '\x11', 
		'\x2', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9C', '\x5', '\xE', '\b', '\x2', '\x9B', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x91', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9F', '\x5', '\x10', '\t', '\x2', '\x9E', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '-', 
		'\x2', '\x2', '\xA3', '\xA4', '\x5', '\x12', '\n', '\x2', '\xA4', '\xA5', 
		'\a', '.', '\x2', '\x2', '\xA5', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA8', '\x5', '\x18', '\r', '\x2', '\xA7', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAC', '\x5', '\x14', '\v', '\x2', '\xAA', 
		'\xAB', '\a', '/', '\x2', '\x2', '\xAB', '\xAD', '\x5', '\x16', '\f', 
		'\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\x13', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAF', '\a', '\x30', '\x2', '\x2', '\xAF', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\a', '\x30', '\x2', '\x2', '\xB1', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB7', '\t', '\x3', '\x2', '\x2', '\xB3', 
		'\xB7', '\t', '\x4', '\x2', '\x2', '\xB4', '\xB7', '\a', '\x11', '\x2', 
		'\x2', '\xB5', '\xB7', '\a', '/', '\x2', '\x2', '\xB6', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x5', 
		'\x1C', '\xF', '\x2', '\xB9', '\xBB', '\x5', '\"', '\x12', '\x2', '\xBA', 
		'\xBC', '\x5', '(', '\x15', '\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\x5', '&', '\x14', '\x2', '\xBE', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC1', '\x5', '\x1E', '\x10', 
		'\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC7', '\a', 
		'\x11', '\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC9', '\x5', ' ', '\x11', '\x2', '\xC9', '\xCA', '\a', 
		'\x19', '\x2', '\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCD', '\a', '\xF', '\x2', '\x2', '\xCC', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\t', '\x2', '\x2', '\xCF', 
		'\xD3', '\a', '\x16', '\x2', '\x2', '\xD0', '\xD1', '\a', '\n', '\x2', 
		'\x2', '\xD1', '\xD3', '\a', '\x16', '\x2', '\x2', '\xD2', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', '\a', '\x11', '\x2', 
		'\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD8', '\x5', '$', '\x13', '\x2', '\xD8', '\xDA', '\a', '\xF', '\x2', 
		'\x2', '\xD9', '\xDB', '\x5', '\\', '/', '\x2', '\xDA', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\a', '\x3', '\x2', '\x2', 
		'\xDD', '\xDF', '\a', '\x11', '\x2', '\x2', '\xDE', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x5', 'X', '-', '\x2', '\xE1', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\x5', ',', '\x17', '\x2', 
		'\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEA', '\a', '\x11', 
		'\x2', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEC', '\a', '\b', '\x2', '\x2', '\xEC', '\xED', '\a', '\xF', 
		'\x2', '\x2', '\xED', '\xEE', '\x5', '*', '\x16', '\x2', '\xEE', ')', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', '\x5', '\x34', '\x1B', '\x2', 
		'\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '+', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x5', '\x1C', '\xF', 
		'\x2', '\xF6', '\xF7', '\x5', '.', '\x18', '\x2', '\xF7', '\xF8', '\x5', 
		'\x32', '\x1A', '\x2', '\xF8', '\xF9', '\x5', '\x42', '\"', '\x2', '\xF9', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFC', '\a', '\x11', '\x2', 
		'\x2', '\xFB', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\x5', '\x30', '\x19', '\x2', '\xFE', '\x100', '\a', '\xF', '\x2', 
		'\x2', '\xFF', '\x101', '\x5', '\\', '/', '\x2', '\x100', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x102', '\x104', '\a', '\x4', '\x2', 
		'\x2', '\x103', '\x105', '\a', '\x11', '\x2', '\x2', '\x104', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x10D', '\x5', 
		'X', '-', '\x2', '\x107', '\x109', '\a', '\x5', '\x2', '\x2', '\x108', 
		'\x10A', '\a', '\x11', '\x2', '\x2', '\x109', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10D', '\x5', 'X', '-', '\x2', 
		'\x10C', '\x102', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x31', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x110', '\x5', '\x34', '\x1B', '\x2', '\x10F', '\x10E', '\x3', '\x2', 
		'\x2', '\x2', '\x110', '\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x33', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x117', '\x5', '\x36', '\x1C', '\x2', '\x115', 
		'\x117', '\a', '\xF', '\x2', '\x2', '\x116', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x11A', '\a', '\x11', '\x2', '\x2', 
		'\x119', '\x118', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11C', '\x5', '\x38', '\x1D', '\x2', '\x11C', '\x120', '\a', '\xF', 
		'\x2', '\x2', '\x11D', '\x11F', '\a', '\xF', '\x2', '\x2', '\x11E', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x123', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x5', '\x46', 
		'$', '\x2', '\x124', '\x135', '\x3', '\x2', '\x2', '\x2', '\x125', '\x127', 
		'\a', '\x11', '\x2', '\x2', '\x126', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x129', '\x5', '\x38', '\x1D', '\x2', '\x129', 
		'\x12A', '\a', '\xF', '\x2', '\x2', '\x12A', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12D', '\a', '\x11', '\x2', '\x2', '\x12C', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x130', '\x5', 
		'\x38', '\x1D', '\x2', '\x12F', '\x131', '\a', '\x11', '\x2', '\x2', '\x130', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', 
		'\a', '\x2', '\x2', '\x3', '\x133', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x119', '\x3', '\x2', '\x2', '\x2', '\x134', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\a', '\v', '\x2', 
		'\x2', '\x137', '\x138', '\a', '\x11', '\x2', '\x2', '\x138', '\x143', 
		'\x5', ':', '\x1E', '\x2', '\x139', '\x13A', '\a', '\f', '\x2', '\x2', 
		'\x13A', '\x13B', '\a', '\x11', '\x2', '\x2', '\x13B', '\x143', '\x5', 
		':', '\x1E', '\x2', '\x13C', '\x13D', '\a', '\r', '\x2', '\x2', '\x13D', 
		'\x13E', '\a', '\x11', '\x2', '\x2', '\x13E', '\x143', '\x5', ':', '\x1E', 
		'\x2', '\x13F', '\x140', '\a', '\xE', '\x2', '\x2', '\x140', '\x141', 
		'\a', '\x11', '\x2', '\x2', '\x141', '\x143', '\x5', ':', '\x1E', '\x2', 
		'\x142', '\x136', '\x3', '\x2', '\x2', '\x2', '\x142', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x143', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x146', '\x5', '<', '\x1F', '\x2', '\x145', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x145', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\x148', ';', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x159', '\a', '!', '\x2', '\x2', '\x14A', '\x159', '\a', '\"', '\x2', 
		'\x2', '\x14B', '\x14C', '\a', '\x1F', '\x2', '\x2', '\x14C', '\x14D', 
		'\x5', '>', ' ', '\x2', '\x14D', '\x14E', '\a', ' ', '\x2', '\x2', '\x14E', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x159', '\t', '\x5', '\x2', 
		'\x2', '\x150', '\x159', '\a', '$', '\x2', '\x2', '\x151', '\x159', '\a', 
		'#', '\x2', '\x2', '\x152', '\x153', '\a', '%', '\x2', '\x2', '\x153', 
		'\x159', '\a', '&', '\x2', '\x2', '\x154', '\x159', '\a', '%', '\x2', 
		'\x2', '\x155', '\x159', '\a', '&', '\x2', '\x2', '\x156', '\x159', '\t', 
		'\x6', '\x2', '\x2', '\x157', '\x159', '\a', '\x11', '\x2', '\x2', '\x158', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x158', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x158', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x158', '\x151', '\x3', '\x2', '\x2', '\x2', '\x158', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x154', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x155', '\x3', '\x2', '\x2', '\x2', '\x158', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x15F', '\x5', '@', '!', '\x2', '\x15B', 
		'\x15C', '\a', '\x11', '\x2', '\x2', '\x15C', '\x15E', '\x5', '@', '!', 
		'\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x162', '\x164', 
		'\t', '\a', '\x2', '\x2', '\x163', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x167', '\x169', '\x5', '\x44', '#', 
		'\x2', '\x168', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x16F', '\x5', '\x1C', '\xF', '\x2', '\x16E', '\x170', '\a', '\x11', 
		'\x2', '\x2', '\x16F', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x173', '\a', '\x6', '\x2', '\x2', '\x172', '\x174', '\a', '\xF', 
		'\x2', '\x2', '\x173', '\x172', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x178', '\x5', '\x46', '$', '\x2', '\x178', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17B', '\a', '\x11', '\x2', 
		'\x2', '\x17A', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x184', '\x5', 'H', '%', '\x2', '\x17D', '\x17F', '\a', '\x11', 
		'\x2', '\x2', '\x17E', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x183', '\x5', 'L', '\'', '\x2', '\x181', '\x183', '\a', '\xF', 
		'\x2', '\x2', '\x182', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x182', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x182', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\x3', 
		'\x2', '\x2', '\x2', '\x185', 'G', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x184', '\x3', '\x2', '\x2', '\x2', '\x187', '\x189', '\x5', 'J', '&', 
		'\x2', '\x188', '\x187', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x18D', '\a', ';', '\x2', '\x2', '\x18D', 
		'\x18E', '\t', '\x2', '\x2', '\x2', '\x18E', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x191', '\t', '\b', '\x2', '\x2', '\x190', '\x192', '\a', 
		'\x11', '\x2', '\x2', '\x191', '\x190', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x192', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x195', '\x5', 'T', '+', '\x2', '\x194', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x195', '\x3', '\x2', '\x2', '\x2', '\x195', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x196', '\x198', '\a', '\x11', '\x2', 
		'\x2', '\x197', '\x196', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x198', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x19B', '\x5', 'N', '(', '\x2', '\x19A', '\x199', '\x3', '\x2', 
		'\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', 
		';', '\x2', '\x2', '\x19F', '\x1A0', '\t', '\x2', '\x2', '\x2', '\x1A0', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A3', '\t', '\b', '\x2', 
		'\x2', '\x1A2', '\x1A4', '\a', '\x11', '\x2', '\x2', '\x1A3', '\x1A2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A7', '\x5', 
		'P', ')', '\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1AA', '\a', '\x11', '\x2', '\x2', '\x1A9', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AA', 'O', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AD', '\a', '\x11', 
		'\x2', '\x2', '\x1AC', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1B0', '\x5', 'R', '*', '\x2', '\x1AF', '\x1AC', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1BF', '\t', '\t', 
		'\x2', '\x2', '\x1B4', '\x1B5', '\a', '\x34', '\x2', '\x2', '\x1B5', '\x1B6', 
		'\x5', 'T', '+', '\x2', '\x1B6', '\x1B7', '\a', '\x35', '\x2', '\x2', 
		'\x1B7', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1BF', '\a', 
		'\x38', '\x2', '\x2', '\x1B9', '\x1BF', '\a', '\x37', '\x2', '\x2', '\x1BA', 
		'\x1BB', '\a', '\x39', '\x2', '\x2', '\x1BB', '\x1BF', '\a', '\x36', '\x2', 
		'\x2', '\x1BC', '\x1BF', '\a', '\x39', '\x2', '\x2', '\x1BD', '\x1BF', 
		'\a', '\x36', '\x2', '\x2', '\x1BE', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BC', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BF', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x1C0', '\x1C5', '\x5', 'V', ',', '\x2', '\x1C1', 
		'\x1C2', '\a', '\x11', '\x2', '\x2', '\x1C2', '\x1C4', '\x5', 'V', ',', 
		'\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C5', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C6', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x1C7', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1CA', 
		'\t', '\n', '\x2', '\x2', '\x1C9', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'\x1CA', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', '\x3', 
		'\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CF', '\a', '\x11', '\x2', 
		'\x2', '\x1CE', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x1D2', '\a', '\x10', '\x2', '\x2', '\x1D1', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		'\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D7', '\a', 
		'\x11', '\x2', '\x2', '\x1D6', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D9', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1DA', '\x5', 'X', '-', '\x2', '\x1D9', '\x1D8', '\x3', 
		'\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\a', '\xF', '\x2', 
		'\x2', '\x1DC', '[', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DF', '\a', 
		'\xF', '\x2', '\x2', '\x1DE', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DF', 
		'\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1DE', '\x3', '\x2', '\x2', 
		'\x2', '\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E0', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E5', '\x5', 'Z', '.', '\x2', '\x1E4', '\x1E3', '\x3', '\x2', 
		'\x2', '\x2', '\x1E5', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E7', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1EA', '\a', 
		'\xF', '\x2', '\x2', '\x1E9', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E9', '\x3', '\x2', '\x2', 
		'\x2', '\x1EB', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EC', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x1ED', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x1F0', '\a', '\x11', '\x2', '\x2', '\x1EF', '\x1EE', '\x3', '\x2', '\x2', 
		'\x2', '\x1EF', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\a', '\t', '\x2', '\x2', 
		'\x1F2', '\x1F3', '\a', '\x16', '\x2', '\x2', '\x1F3', '\x262', '\x5', 
		'`', '\x31', '\x2', '\x1F4', '\x1F6', '\a', '\x11', '\x2', '\x2', '\x1F5', 
		'\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\x3', '\x2', '\x2', 
		'\x2', '\x1F6', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', 
		'\a', '\n', '\x2', '\x2', '\x1F8', '\x1F9', '\a', '\x16', '\x2', '\x2', 
		'\x1F9', '\x262', '\x5', '`', '\x31', '\x2', '\x1FA', '\x1FC', '\a', '\x11', 
		'\x2', '\x2', '\x1FB', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', 
		'\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FD', '\x3', '\x2', '\x2', '\x2', 
		'\x1FD', '\x1FF', '\a', '\a', '\x2', '\x2', '\x1FE', '\x200', '\a', '\x11', 
		'\x2', '\x2', '\x1FF', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x200', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'\x201', '\x203', '\x5', '\f', '\a', '\x2', '\x202', '\x201', '\x3', '\x2', 
		'\x2', '\x2', '\x202', '\x203', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', 
		'\x3', '\x2', '\x2', '\x2', '\x204', '\x262', '\x5', '`', '\x31', '\x2', 
		'\x205', '\x207', '\a', '\x11', '\x2', '\x2', '\x206', '\x205', '\x3', 
		'\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x208', '\x20A', '\a', '\x3', '\x2', 
		'\x2', '\x209', '\x20B', '\a', '\x11', '\x2', '\x2', '\x20A', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', '\x3', '\x2', '\x2', '\x2', 
		'\x20B', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20E', '\x5', 
		'X', '-', '\x2', '\x20D', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20D', 
		'\x20E', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', '\x3', '\x2', '\x2', 
		'\x2', '\x20F', '\x262', '\x5', '`', '\x31', '\x2', '\x210', '\x212', 
		'\a', '\x11', '\x2', '\x2', '\x211', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'\x211', '\x212', '\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '\x214', '\a', '\b', '\x2', '\x2', '\x214', 
		'\x262', '\x5', '`', '\x31', '\x2', '\x215', '\x217', '\a', '\x11', '\x2', 
		'\x2', '\x216', '\x215', '\x3', '\x2', '\x2', '\x2', '\x216', '\x217', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\x3', '\x2', '\x2', '\x2', 
		'\x218', '\x21A', '\a', '\x4', '\x2', '\x2', '\x219', '\x21B', '\a', '\x11', 
		'\x2', '\x2', '\x21A', '\x219', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x21E', '\x5', 'X', '-', '\x2', '\x21D', '\x21C', '\x3', '\x2', 
		'\x2', '\x2', '\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', '\x21F', '\x262', '\x5', '`', '\x31', '\x2', 
		'\x220', '\x222', '\a', '\x11', '\x2', '\x2', '\x221', '\x220', '\x3', 
		'\x2', '\x2', '\x2', '\x221', '\x222', '\x3', '\x2', '\x2', '\x2', '\x222', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x223', '\x225', '\a', '\x5', '\x2', 
		'\x2', '\x224', '\x226', '\a', '\x11', '\x2', '\x2', '\x225', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'\x226', '\x228', '\x3', '\x2', '\x2', '\x2', '\x227', '\x229', '\x5', 
		'X', '-', '\x2', '\x228', '\x227', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x262', '\x5', '`', '\x31', '\x2', '\x22B', '\x22D', 
		'\a', '\x11', '\x2', '\x2', '\x22C', '\x22B', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x3', 
		'\x2', '\x2', '\x2', '\x22E', '\x22F', '\a', '\x6', '\x2', '\x2', '\x22F', 
		'\x262', '\x5', '`', '\x31', '\x2', '\x230', '\x232', '\a', '\x11', '\x2', 
		'\x2', '\x231', '\x230', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', 
		'\x3', '\x2', '\x2', '\x2', '\x232', '\x234', '\x3', '\x2', '\x2', '\x2', 
		'\x233', '\x235', '\x5', 'N', '(', '\x2', '\x234', '\x233', '\x3', '\x2', 
		'\x2', '\x2', '\x235', '\x236', '\x3', '\x2', '\x2', '\x2', '\x236', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x236', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x238', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\a', 
		';', '\x2', '\x2', '\x239', '\x262', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'\x23C', '\a', '\x11', '\x2', '\x2', '\x23B', '\x23A', '\x3', '\x2', '\x2', 
		'\x2', '\x23B', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', 
		'\x3', '\x2', '\x2', '\x2', '\x23D', '\x23F', '\a', '\v', '\x2', '\x2', 
		'\x23E', '\x240', '\x5', ':', '\x1E', '\x2', '\x23F', '\x23E', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x241', '\x262', '\x5', '`', '\x31', 
		'\x2', '\x242', '\x244', '\a', '\x11', '\x2', '\x2', '\x243', '\x242', 
		'\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x245', '\x3', '\x2', '\x2', '\x2', '\x245', '\x247', '\a', 
		'\f', '\x2', '\x2', '\x246', '\x248', '\x5', ':', '\x1E', '\x2', '\x247', 
		'\x246', '\x3', '\x2', '\x2', '\x2', '\x247', '\x248', '\x3', '\x2', '\x2', 
		'\x2', '\x248', '\x249', '\x3', '\x2', '\x2', '\x2', '\x249', '\x262', 
		'\x5', '`', '\x31', '\x2', '\x24A', '\x24C', '\a', '\x11', '\x2', '\x2', 
		'\x24B', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', '\x3', 
		'\x2', '\x2', '\x2', '\x24C', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x24D', 
		'\x24F', '\a', '\r', '\x2', '\x2', '\x24E', '\x250', '\x5', ':', '\x1E', 
		'\x2', '\x24F', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', 
		'\x3', '\x2', '\x2', '\x2', '\x250', '\x251', '\x3', '\x2', '\x2', '\x2', 
		'\x251', '\x262', '\x5', '`', '\x31', '\x2', '\x252', '\x254', '\a', '\x11', 
		'\x2', '\x2', '\x253', '\x252', '\x3', '\x2', '\x2', '\x2', '\x253', '\x254', 
		'\x3', '\x2', '\x2', '\x2', '\x254', '\x255', '\x3', '\x2', '\x2', '\x2', 
		'\x255', '\x257', '\a', '\xE', '\x2', '\x2', '\x256', '\x258', '\x5', 
		':', '\x1E', '\x2', '\x257', '\x256', '\x3', '\x2', '\x2', '\x2', '\x257', 
		'\x258', '\x3', '\x2', '\x2', '\x2', '\x258', '\x259', '\x3', '\x2', '\x2', 
		'\x2', '\x259', '\x262', '\x5', '`', '\x31', '\x2', '\x25A', '\x25C', 
		'\a', '\x11', '\x2', '\x2', '\x25B', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'\x25B', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25E', '\x3', 
		'\x2', '\x2', '\x2', '\x25D', '\x25F', '\x5', 'X', '-', '\x2', '\x25E', 
		'\x25D', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\x3', '\x2', '\x2', 
		'\x2', '\x25F', '\x260', '\x3', '\x2', '\x2', '\x2', '\x260', '\x262', 
		'\x5', '`', '\x31', '\x2', '\x261', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x261', '\x1FB', '\x3', 
		'\x2', '\x2', '\x2', '\x261', '\x206', '\x3', '\x2', '\x2', '\x2', '\x261', 
		'\x211', '\x3', '\x2', '\x2', '\x2', '\x261', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x261', '\x221', '\x3', '\x2', '\x2', '\x2', '\x261', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', '\x261', '\x231', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x261', '\x243', '\x3', 
		'\x2', '\x2', '\x2', '\x261', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x261', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\x261', '\x25B', '\x3', '\x2', '\x2', 
		'\x2', '\x262', '_', '\x3', '\x2', '\x2', '\x2', '\x263', '\x269', '\a', 
		'\xF', '\x2', '\x2', '\x264', '\x266', '\a', '\x11', '\x2', '\x2', '\x265', 
		'\x264', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\x3', '\x2', '\x2', 
		'\x2', '\x266', '\x267', '\x3', '\x2', '\x2', '\x2', '\x267', '\x269', 
		'\a', '\x2', '\x2', '\x3', '\x268', '\x263', '\x3', '\x2', '\x2', '\x2', 
		'\x268', '\x265', '\x3', '\x2', '\x2', '\x2', '\x269', '\x61', '\x3', 
		'\x2', '\x2', '\x2', 'i', '\x65', 'k', 'n', 't', '{', '\x7F', '\x84', 
		'\x89', '\x8E', '\x93', '\x98', '\x9B', '\xA0', '\xA7', '\xAC', '\xB6', 
		'\xBB', '\xC2', '\xC6', '\xCC', '\xD2', '\xD5', '\xDA', '\xDE', '\xE5', 
		'\xE9', '\xF2', '\xFB', '\x100', '\x104', '\x109', '\x10C', '\x111', '\x116', 
		'\x119', '\x120', '\x126', '\x12C', '\x130', '\x134', '\x142', '\x147', 
		'\x158', '\x15F', '\x165', '\x16A', '\x16F', '\x175', '\x17A', '\x17E', 
		'\x182', '\x184', '\x18A', '\x191', '\x194', '\x197', '\x19C', '\x1A3', 
		'\x1A6', '\x1A9', '\x1AC', '\x1B1', '\x1BE', '\x1C5', '\x1CB', '\x1CE', 
		'\x1D3', '\x1D6', '\x1D9', '\x1E0', '\x1E6', '\x1EB', '\x1EF', '\x1F5', 
		'\x1FB', '\x1FF', '\x202', '\x206', '\x20A', '\x20D', '\x211', '\x216', 
		'\x21A', '\x21D', '\x221', '\x225', '\x228', '\x22C', '\x231', '\x236', 
		'\x23B', '\x23F', '\x243', '\x247', '\x24B', '\x24F', '\x253', '\x257', 
		'\x25B', '\x25E', '\x261', '\x265', '\x268',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AutoStep.Language.Test.Parser

